name: SagaScript
scopeName: source.coffee
fileTypes: [sa, coffee]
patterns: [{include: "#core"}]

information_for_contributors: |
  SagaScript is a modern functional, imperative and object-oriented programming language
  with a syntax inspired by Python, and compile(s) to JavaScript and WebAssembly.

  SagaScript is additionally inspired by Ruby, Elixir, Clojure, LiveScript, Haskell, OCaml, Go,
  Scala, Flix, Nim, Bash and YAML.

  Should you want to provide a fix or improvement, or even a new feature,
  please create a pull request against this repo: https://github.com/nxltm/sagascript
  and I will be very happy to receive them.

  Once accepted, I am happy to receive your request and feedback.

  This document is always under construction, and there's still a couple of things that
  need to be fixed. All this info would be on my Trello which I will be posting very soon.
  I will come back to fix them if I have the time.

define:
  number-literal: &number-literal
    1: {name: storage.type.numeric.sa}
    2: {name: punctuation.separator.decimal.period.sa}
    3: {name: constant.numeric.other.separator.sa}
    4: {name: constant.numeric.other.exponent.sa}
    5: {name: constant.numeric.other.density.sa}
    6: {name: storage.type.numeric.sa}

  entity-name: &entity-name |
    (?x)\s*\b

    (?!
    \b(?:# don't match keywords
    in|of|as|is|new|infer|unset
    |typeof|nameof|sizeof|keyof|valof
    |len|del|to|til|thru|at|by
    |and|x?or|not|para|seq|spawn
    |def|func?|fn|macro|proc|sub
    |let|var|val|const|decl
    |class|given|law|enum|rel|lat
    |proj|prot|ext|impl|frag|inter|struct
    |module|nspace|object|record|label
    |raw|data|query|schema|style|trait|alias|type
    |if|else|elif|eless|unless|guard
    |for|each|while|until|repeat|do|redo
    |switch|case|fail|default|match|when|pass|fallthru
    |try|retry|throw|raise|catch|rescue|finally
    |with|ref|defer|refer|show|hide|enter|exit
    |then|begin|end|debug|check|assert
    |break|continue|halt|skip|fixed|lock
    |(?:return|give|await|yield|throw|raise)s?
    |yield\b\s*\bfrom|import|export|show|hide
    |from|where|join|equals|[io]nto|order
    |take|drop|fold|scan|select|use|using
    |fi|rof|done|esac|wend|yrt|disc|wout
    |open|close
    )\b
    )

    ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
    \b

  posix-class: &posix-class |
    (?xi)
    \\o|
    \\p(?:
    # POSIX
    alpha|alnum|ascii|blank|cntrl|x?digit
    |graph|lower|print|punct|space|upper|word
    # Extended-POSIX
    |symbol|open|close|dash|link|start|final|math|money
    |number|letter|title|mark|modify
    |bin|qua|sen|oct|dec|doz|hex
    )

repository:
  core:
    patterns:
      - include: "#embedded-langs"
      - include: "#clauses"
      - include: "#declarations"
      - include: "#keywords"
      - include: "#comments"
      - include: "#brackets"
      - include: "#punctuation"
      - include: "#type-annotation"
      - include: "#operators"
      - include: "#literals"
      - include: "#calls"
      - include: "#variables"
      - include: "#illegal"

  illegal:
    patterns:
      - match: '\p{n}[\p{l}\p{m}\p{n}_.+-/\\]*?'
        name: invalid.illegal.numeric.other.sa
      - match: '[_\p{l}\p{m}\p{n}]+?'
        name: invalid.illegal.variable.other.sa
      - match: '[\p{ps}\p{pe}]+?'
        name: invalid.illegal.missing-bracket.sa
      - match: '\S+?'
        name: invalid.illegal.syntax.sa

  entities:
    patterns:
      - include: "#function-names"
      - include: "#constant-names"
      - include: "#type-names"
      - include: "#variable-names"

  class-names:
    comment: Names for built-in classes
    patterns:
      - comment:

  type-names:
    comment: Names for built-in types
    patterns:
      - comment: primitive data types
        match: |
          (?x)\s*\b(
          bool|u?int|float|nat|ratio|real|imag|complex|number
          |char|rune|string|symbol|regexp?|func|buffer|binary
          |# numeric types
          (?:c|i|f|s|u|n|[nr]at|u?int|float|imag|comp)
          (?:8|16|32|64|128)
          |(?:c|i|)(?:half|float|double|quad|octa)
          )\b
        name: support.type.builtin.primitive.sa
      - comment: built-in constant types and data structures
        match: |
          (?x)\s*\b(
          true|yes|on|false|no|off|null|nil|none|undef|void|nan|inf|infin
          |any|empty|object|record|unit|mixed
          |array|tuple|(?:mut)?(?:list|set|map)|dict|seq|gen|range
          )\b
        name: support.type.builtin.sa
      - comment: built-in primitive classes
        match: |
          (?x)\s*\b(
          Bool|U?Int|Float|Nat|Ratio|Real|Imag|Complex|Number
          |Char|Rune|String|Symbol|RegExp?|Func|Buffer|Binary
          |# numeric types
          (?:C|I|F|S|U|N|[NR]at|U?Int|Real|Imag|Comp)
          (?:8|16|32|64|128)
          |(?:C|I|)(?:Half|Float|Double|Quad|Octa)
          )\b
        name: support.type.builtin.class.sa
      - comment: built-in primitive type classes
        match: |
          (?x)\s*\b(
          True|Yes|On|False|No|Off|Null|Nil|None|Undef|Void|NaN|Inf|Infin
          |Any|Empty|Object|Record|Unit|Mixed
          |Array|Tuple|(?:Mut)?(?:List|Set|Map)|Dict|Seq|Gen|Range
          )\b
        name: support.type.class.sa
      - comment: interface classes (beginning with I)
        match: (?x)\s*\b(I((\p{lu}\p{ll}*)+))\b
        name: entity.name.interface.sa
      - comment: namespace classes (beginning with NS)
        match: (?x)\s*\b(NS((\p{lu}\p{ll}*)+))\b
        name: entity.name.namespace.sa
      - comment: error classes (ending with Error)
        match: (?x)\s*\b(((\p{lu}\p{ll}*)+)Error)\b
        name: support.class.error.sa
      - match: \s*\b((?>WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|strings|SIMD.Uint8x16|SIMD.Uint32x4|SIMD.Uint16x8|SIMD.Int8x16|SIMD.Int32x4|SIMD.Int16x8|SIMD.Float64x2|SIMD.Float32x4|SIMD.Bool8x16|SIMD.Bool64x2|SIMD.Bool32x4|SIMD.Bool16x8|SIMD|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|numbers|NaN|Math|Map|JSON|Intl.NumberFormat|Intl.DateTimeFormat|Intl.Collator|Intl|InternalError|Int8Array|Int32Array|Int16Array|Infinity|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array))\b
        name: support.type.builtin.class.sa
      - match: \s*\b((SIMD)((\.)(Uint8x16|Uint32x4|Uint16x8|Int8x16|Int32x4|Int16x8|Float64x2|Float32x4|Bool8x16|Bool64x2|Bool32x4|Bool16x8))?)\b
        name: support.type.builtin.class.sa
      - match: \s*\b((Intl)((\.)(NumberFormat|DateTimeFormat|Collator))?)\b
        name: support.type.builtin.class.sa

  function-names:
    comment: Names for built-in functions (initial dump)
    patterns:
      - match: (?i)\s*\b(import|abs|all|any|ascii|bin|breakpoint|callable|chr|compile|copyright|credits|delattr|dir|divmod|enumerate|eval|exec|exit|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|license|locals|map|max|memoryview|min|next|oct|open|ord|pow|print|quit|range|reload|repr|reversed|round|setattr|sorted|sum|vars|zip)\b\s*
        name: support.function.builtin.sa
      - match: (?i)\s*\b(adprep|append|arp|assoc|at|atmadm|attrib|auditpol|autochk|autoconv|autofmt|bcdboot|bcdedit|bdehdcfg|bitsadmin|bootcfg|brea|cacls|cd|certreq|certutil|change|chcp|chdir|chglogon|chgport|chgusr|chkdsk|chkntfs|choice|cipher|clip|cls|clscluadmin|cluster|cmd|cmdkey|cmstp|color|comp|compact|convert|copy|cprofile|cscript|csvde|date|dcdiag|dcgpofix|dcpromo|defra|del|dfscmd|dfsdiag|dfsrmig|diantz|dir|dirquota|diskcomp|diskcopy|diskpart|diskperf|diskraid|diskshadow|dispdiag|doin|dnscmd|doskey|driverquery|dsacls|dsadd|dsamain|dsdbutil|dsget|dsmgmt|dsmod|dsmove|dsquery|dsrm|edit|endlocal|eraseesentutl|eventcreate|eventquery|eventtriggers|evntcmd|expand|extract|fc|filescrn|find|findstr|finger|flattemp|fonde|forfiles|format|freedisk|fsutil|ftp|ftype|fveupdate|getmac|gettype|gpfixup|gpresult|gpupdate|graftabl|hashgen|hep|helpctr|hostname|icacls|iisreset|inuse|ipconfig|ipxroute|irftp|ismserv|jetpack|klist|ksetup|ktmutil|ktpass|label|ldifd|ldp|lodctr|logman|logoff|lpq|lpr|macfile|makecab|manage-bde|mapadmin|md|mkdir|mklink|mmc|mode|more|mount|mountvol|move|mqbup|mqsvc|mqtgsvc|msdt|msg|msiexec|msinfo32|mstsc|nbtstat|netcomputer|netgroup|netlocalgroup|netprint|netsession|netshare|netstart|netstop|netuse|netuser|netview|net|netcfg|netdiag|netdom|netsh|netstat|nfsadmin|nfsshare|nfsstat|nlb|nlbmgr|nltest|nslookup|ntackup|ntcmdprompt|ntdsutil|ntfrsutl|openfiles|pagefileconfig|path|pathping|pause|pbadmin|pentnt|perfmon|ping|pnpunatten|pnputil|popd|powercfg|powershell|powershellise|print|prncnfg|prndrvr|prnjobs|prnmngr|prnport|prnqctl|prompt|pubprn|pushd|pushprinterconnections|pwlauncher|qappsrv|qprocess|query|quser|qwinsta|rasdial|rcp|rd|rdpsign|regentc|recover|redircmp|redirusr|reg|regini|regsvr32|relog|ren|rename|rendom|repadmin|repair-bde|replace|resetsession|rxec|risetup|rmdir|robocopy|route|rpcinfo|rpcping|rsh|runas|rundll32|rwinsta|sc|schtasks|scp|scwcmd|secedit|serverceipoptin|servrmanagercmd|serverweroptin|setspn|setx|sfc|sftp|shadow|shift|showmount|shutdown|sort|ssh|ssh-add|ssh-agent|ssh-keygen|ssh-keyscan|start|storrept|subst|sxstrace|ysocmgr|systeminfo|takeown|tapicfg|taskkill|tasklist|tcmsetup|telnet|tftp|time|timeout|title|tlntadmn|tpmvscmgr|tpmvscmgr|tacerpt|tracert|tree|tscon|tsdiscon|tsecimp|tskill|tsprof|type|typeperf|tzutil|uddiconfig|umount|unlodctr|ver|verifier|verif|vol|vssadmin|w32tm|waitfor|wbadmin|wdsutil|wecutil|wevtutil|where|whoami|winnt|winnt32|winpop|winrm|winrs|winsat|wlbs|wmic|wscript|wsl|xcopy)\b\s*
        name: support.function.command.sa
      - match: (?i)\s*\b((abs|add|aenter|aexit|aiter|and|anext|await|bool|call|ceil|cmp|coerce|complex|contains|copy|deepcopy|del|delattr|delete|delitem|delslice|dir|div|divmod|enter|eq|exit|float|floor|floordiv|format|ge|get|getattr|getattribute|getinitargs|getitem|getnewargs|getslice|getstate|gt|hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imod|imul|index|init|instancecheck|int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|long|lshift|lt|missing|mod|mul|ne|neg|new|next|nonzero|oct|or|pos|pow|radd|rand|rdiv|rdivmod|reduce|reduceex|repr|reversed|rfloordiv|rlshift|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|setslice|setstate|sizeof|str|sub|subclasscheck|truediv|trunc|unicode|xor|matmul|rmatmul|imatmul|initsubclass|setname|fspath|bytes|prepare))\b\s*
        name: support.function.magic.sa
      - match: (?i)\s*\b(alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)\b\s*
        name: support.function.shell.sa
      - match: (?i)\s*\b(headings|stylesheeturl|rgba?|hsla?|iehexstr|red|green|blue|alpha|opacity|hue|saturation|lightness|prefixed|prefix|moz|svg|css2|pie|webkit|ms|font(files|url)|gridimage|image(width|height|url|color)|sprites?|sprite(map|mapname|file|url|position)|inline(fontfiles|image)|oppositeposition|gradpoint|gradendposition|colorstops|colorstopsinpercentages|gradcolorstops|(radial|linear)(gradient|svggradient)|opacify|fade?in|transparentize|fade?out|lighten|darken|saturate|desaturate|grayscale|adjust(hue|lightness|saturation|color)|scale(lightness|saturation|color)|changecolor|spin|complement|invert|mix|compass(list|spacelist|slice|nth|listsize)|blank|compact|nth|firstvalueof|join|length|append|nest|appendselector|headers|enumerate|range|percentage|unitless|unit|if|typeof|comparable|elementsoftype|quote|unquote|escape|e|sin|cos|tan|abs|round|ceil|floor|pi|translate(X|Y))\b\s*
        name: support.function.misc.sa
      - match: (?i)\s*\b(eager|hyper|substr|index|rindex|grep|map|sort|join|lines|hints|chmod|split|reduce|min|max|reverse|truncate|zip|cat|roundrobin|classify|first|sum|keys|values|pairs|defined|delete|exists|elems|end|kv|any|all|one|wrap|shape|key|value|name|pop|push|shift|splice|unshift|floor|ceiling|abs|exp|log|log10|rand|sign|sqrt|sin|cos|tan|round|strand|roots|cis|unpolar|polar|atan2|pick|chop|p5chop|chomp|p5chomp|lc|lcfirst|uc|ucfirst|capitalize|normalize|pack|unpack|quotemeta|comb|samecase|sameaccent|chars|nfd|nfc|nfkd|nfkc|printf|sprintf|caller|evalfile|run|runinstead|nothing|want|bless|chr|ord|gmtime|time|eof|localtime|gethost|getpw|chroot|getlogin|getpeername|kill|fork|wait|perl|graphs|codes|bytes|clone|print|open|read|write|readline|say|seek|close|opendir|readdir|slurp|spurt|shell|run|pos|fmt|vec|link|unlink|symlink|uniq|pair|asin|atan|sec|cosec|cotan|asec|acosec|acotan|sinh|cosh|tanh|asinh|done|acos|acosh|atanh|sech|cosech|cotanh|sech|acosech|acotanh|asech|ok|nok|planok|diesok|livesok|skip|todo|pass|flunk|forcetodo|useok|isaok|diag|isdeeply|isnt|like|skiprest|unlike|cmpok|evaldiesok|nokerror|evallivesok|approx|isapprox|throwsok|versionlt|plan|EVAL|succ|pred|times|nonce|once|signature|new|connect|operator|undef|undefine|sleep|from|to|infix|postfix|prefix|circumfix|postcircumfix|minmax|lazy|count|unwrap|getc|pi|e|context|void|quasi|body|each|contains|rewinddir|subst|can|isa|flush|arity|assuming|rewind|callwith|callsame|nextwith|nextsame|attr|evalelsewhere|none|srand|trim|trimstart|trimend|lastcall|WHAT|WHERE|HOW|WHICH|VAR|WHO|WHENCE|ACCEPTS|REJECTS|not|true|iterator|by|re|im|invert|flip|gist|flat|tree|isprime|throwslike|trans)\b\s*
        name: support.function.perl.sa
      - match: (?i)\s*\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\b\s*
        name: support.function.lua.sa
      - match: (?i)\s*\b(coroutine(create|resume|running|status|wrap|yield)|string(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table(concat|insert|maxn|remove|sort)|math(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package(cpath|loaded|loadlib|path|preload|seeall)|debug(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\b\s*
        name: support.function.library.sa
      - match: (?i)\s*\b(debug|warn|info|log|error|time|timeEnd|assert)\b\s*
        name: support.function.console.sa
      - match: (?i)\s*\b(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf)\b\s*
        name: support.function.method.array.sa
      - match: (?i)\s*\b(isArray)\b\s*
        name: support.function.static.array.sa
      - match: (?i)\s*\b(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal)\b\s*
        name: support.function.static.object.sa
      - match: (?i)\s*\b(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc)\b\s*
        name: support.function.static.math.sa
      - match: (?i)\s*\b(is(Finite|Integer|NaN)|toInteger)\b\s*
        name: support.function.static.number.sa
      - match: (?x)\s*\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|require|set(Interval|Timeout)|clear(Interval|Timeout))\b\s*
        name: support.function.coffee
      - match: (?i)\s*\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\b\s*
        name: support.function.builtin.sa
      - match: (?x)\s*\b(sprintf|print(f|ln)?)\b\s*
        name: support.function.print.sa
      - match: (?x)\s*\b(shouldFail|fail(NotEquals)?|ass(ume|ert(S(cript|ame)|N(ot(Same|Null)|ull)|Contains|T(hat|oString|rue)|Inspect|Equals|False|Length|ArrayEquals)))\b\s*
        name: support.function.testing.sa
      - match: (?i:\s*\b(Lock|Unlock|SetAbort|SetComplete|BinaryRead|AddHeader|AppendToLog|BinaryWrite|Clear|End|Flush|Redirect|Write|CreateObject|HTMLEncode|MapPath|URLEncode|Abandon|Convert|Regex)\b)
        name: support.function.asp.sa
      - match: (?i:\s*\b(ApplicationOnEnd|ApplicationOnStart|OnTransactionAbort|OnTransactionCommit|SessionOnEnd|SessionOnStart)\b)
        name: support.function.event.sa
      - match: (?i:\s*\b(Array|Add|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng|Conversions|Cos|CreateObject|CSng|CStr|Date|DateAdd|DateDiff|DatePart|DateSerial|DateValue|Day|Derived|Math|Escape|Eval|Exists|Exp|Filter|FormatCurrency|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric|IsObject|Item|Items|Join|Keys|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Remove|RemoveAll|Replace|RGB|Right|Rnd|Round|ScriptEngine|ScriptEngineBuildVersion|ScriptEngineMajorVersion|ScriptEngineMinorVersion|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse|Tan|Time|Timer|TimeSerial|TimeValue|TypeName|UBound|UCase|Unescape|VarType|Weekday|WeekdayName|Year)\b)
        name: support.function.vb.sa
      - match: (?i)\s*\bdefault\b\s*
        name: support.function.default.sa
      - match: (?i)\s*\b(isurl|isstring|isnumber|iskeyword|iscolor)\b\s*
        name: support.function.typechecking.sa
      - match: (?i)\s*\b(isunit|ispixel|ispercentage|isem)\b\s*
        name: support.function.unitchecking.sa
      - match: (?i)\s*\b(subst|patsubst|strip|findstring|filter(out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile)\b\s*
        name: support.function.makefile.sa
      - match: (?i)\s*\b(ARGV|DATA|ENV|SIG|STDERR|STDIN|STDOUT|atan2|bind|binmode|bless|caller|chdir|chmod|chomp|chop|chown|chr|chroot|close|closedir|cmp|connect|cos|crypt|dbmclose|dbmopen|defined|delete|dump|each|endgrent|endhostent|endnetent|endprotoent|endpwent|endservent|eof|eq|eval|exec|exists|exp|fcntl|fileno|flock|fork|formline|ge|getc|getgrent|getgrgid|getgrnam|gethostbyaddr|gethostbyname|gethostent|getlogin|getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|getppid|getpriority|getprotobyname|getprotobynumber|getprotoent|getpwent|getpwnam|getpwuid|getservbyname|getservbyport|getservent|getsockname|getsockopt|glob|gmtime|grep|gt|hex|import|index|int|ioctl|join|keys|kill|lc|lcfirst|le|length|link|listen|local|localtime|log|lstat|lt|m|map|mkdir|msgctl|msgget|msgrcv|msgsnd|ne|no|oct|open|opendir|ord|pack|pipe|pop|pos|print|printf|push|quotemeta|rand|read|readdir|readlink|recv|ref|rename|reset|reverse|rewinddir|rindex|rmdir|s|say|scalar|seek|seekdir|semctl|semget|semop|send|setgrent|sethostent|setnetent|setpgrp|setpriority|setprotoent|setpwent|setservent|setsockopt|shift|shmctl|shmget|shmread|shmwrite|shutdown|sin|sleep|socket|socketpair|sort|splice|split|sprintf|sqrt|srand|stat|study|substr|symlink|syscall|sysopen|sysread|system|syswrite|tell|telldir|tie|tied|time|times|tr|truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|utime|values|vec|waitpid|wantarray|warn|write|y)\b\s*
        name: support.function.perl.sa
      - match: (?i)\s*\b(abort|atexit|autoload[?]?|binding|callcc|caller|callerlocations|chomp|chop|eval|exec|exit|exit!|fork|format|gets|globalvariables|gsub|lambda|load|localvariables|open|p|print|printf|proc|putc|puts|rand|readline|readlines|select|settracefunc|sleep|spawn|sprintf|srand|sub|syscall|system|test|tracevar|trap|untracevar|warn)\b\s*
        name: support.function.kernel.sa
      - match: (?i)\s*\b(avg|checksumagg|count|countbig|grouping|groupingid|max|min|sum|stdev|stdevp|var|varp)\b\s*
        name: support.function.aggregate.sa
      - match: (?i)\s*\b(cast|convert|parse|trycast|tryconvert|tryparse)\b\s*
        name: support.function.conversion.sa
      - match: (?i)\s*\b(cursorstatus)\b\s*
        name: support.function.cursor.sa
      - match: (?i)\s*\b(sysdatetime|sysdatetimeoffset|sysutcdatetime|currenttime(stamp)?|getdate|getutcdate|datename|datepart|day|month|year|datefromparts|datetime2fromparts|datetimefromparts|datetimeoffsetfromparts|smalldatetimefromparts|timefromparts|datediff|dateadd|eomonth|switchoffset|todatetimeoffset|isdate)\b\s*
        name: support.function.datetime.sa
      - match: (?i)\s*\b(coalesce|nullif)\b\s*
        name: support.function.expression.sa
      - match: (?i)\s*\b(cursorrows|connections|cpubusy|datefirst|dbts|error|fetchstatus|identity|idle|iobusy|langid|language|locktimeout|maxconnections|maxprecision|nestlevel|options|packeterrors|packreceived|packsent|procid|remserver|rowcount|servername|servicename|spid|textsize|timeticks|totalerrors|totalread|totalwrite|trancount|version)\b\s*
        name: support.function.globalvar.sa
      - match: (?i)\s*\b(choose|iif)\b\s*
        name: support.function.logical.sa
      - match: (?i)\s*\b(abs|acos|asin|atan|atn2|ceiling|cos|cot|degrees|exp|floor|log|log10|pi|power|radians|rand|round|sign|sin|sqrt|square|tan)\b\s*
        name: support.function.mathematical.sa
      - match: (?i)\s*\b(appname|applockmode|applocktest|assemblyproperty|collength|colname|columnproperty|databaseprincipalid|databasepropertyex|dbid|dbname|fileid|fileidex|filename|filegroupid|filegroupname|filegroupproperty|fileproperty|fulltextcatalogproperty|fulltextserviceproperty|indexcol|indexkeyproperty|indexproperty|objectdefinition|objectid|objectname|objectschemaname|objectproperty|objectpropertyex|originaldbname|parsename|schemaid|schemaname|scopeidentity|serverproperty|statsdate|typeid|typename|typeproperty)\b\s*
        name: support.function.metadata.sa
      - match: (?i)\s*\b(rank|denserank|ntile|rownumber)\b\s*
        name: support.function.ranking.sa
      - match: (?i)\s*\b(opendatasource|openrowset|openquery|openxml)\b\s*
        name: support.function.rowset.sa
      - match: (?i)\s*\b(certencoded|certprivatekey|currentuser|databaseprincipalid|haspermsbyname|ismember|isrolemember|issrvrolemember|originallogin|permissions|pwdcompare|pwdencrypt|schemaid|schemaname|sessionuser|suserid|susersid|susersname|systemuser|susername|userid|username)\b\s*
        name: support.function.security.sa
      - match: (?i)\s*\b(ascii|char|charindex|concat|difference|format|left|len|lower|ltrim|nchar|nodes|patindex|quotename|replace|replicate|reverse|right|rtrim|soundex|space|str|stringagg|stringescape|stringsplit|stuff|substring|translate|trim|unicode|upper)\b\s*
        name: support.function.string.sa
      - match: (?i)\s*\b(binarychecksum|checksum|compress|connectionproperty|contextinfo|currentrequestid|currenttransactionid|decompress|errorline|errormessage|errornumber|errorprocedure|errorseverity|errorstate|formatmessage|getfilestreamtransactioncontext|getansinull|hostid|hostname|isnull|isnumeric|minactiverowversion|newid|newsequentialid|rowcountbig|sessioncontext|sessionid|xactstate)\b\s*
        name: support.function.system.sa
      - match: (?i)\s*\b(patindex|textptr|textvalid)\b\s*
        name: support.function.textimage.sa
      - match: (?i)\s*\b(s(ort(ed)?|plit)|contains|index|partition|f(i(lter|rst)|orEach|latMap)|with(MutableCharacters|CString|U(nsafe(Mutable(BufferPointer|Pointer(s|To(Header|Elements)))|BufferPointer)|TF8Buffer))|m(in|a(p|x)))(?=\s*[({])\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(s(ymmetricDifference|t(oreBytes|arts|ride)|ortInPlace|u(ccessor|ffix|btract(ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(oldsUnique(Reference|OrPinnedReference)|as(Suffix|Prefix))|ne(gate(d)?|xt)|c(o(untByEnumerating|py(Bytes)?)|lamp(ed)?|reate)|t(o(IntMax|Opaque|UIntMax)|ake(RetainedValue|UnretainedValue)|r(uncatingRemainder|a(nscodedLength|ilSurrogate)))|i(s(MutableAndUniquelyReferenced(OrPinned)?|S(trictSu(perset(Of)?|bset(Of)?)|u(perset(Of)?|bset(Of)?))|Continuation|T(otallyOrdered|railSurrogate)|Disjoint(With)?|Unique(Reference|lyReferenced(OrPinned)?)|Equal|Le(ss(ThanOrEqualTo)?|adSurrogate))|n(sert(ContentsOf)?|tersect(ion|InPlace)?|itialize(Memory|From)?|dex(Of|ForKey)))|o(verlaps|bjectAt)|d(i(stance(To)?|vide(d|WithOverflow)?)|e(s(cendant|troy)|code(CString)?|initialize|alloc(ate(Capacity)?)?)|rop(First|Last))|u(n(ion(InPlace)?|derestimateCount|wrappedOrError)|p(date(Value)?|percased))|join(ed|WithSeparator)|p(op(First|Last)|ass(Retained|Unretained)|re(decessor|fix))|e(scape(d)?|n(code|umerate(d)?)|lementsEqual|xclusiveOr(InPlace)?)|f(orm(Remainder|S(ymmetricDifference|quareRoot)|TruncatingRemainder|In(tersection|dex)|Union)|latten|rom(CString(RepairingIllFormedUTF8)?|Opaque))|w(i(thMemoryRebound|dth)|rite(To)?)|l(o(wercased|ad)|e(adSurrogate|xicographical(Compare|lyPrecedes)))|a(ss(ign(BackwardFrom|From)?|umingMemoryBound)|d(d(ing(Product)?|Product|WithOverflow)?|vanced(By)?)|utorelease|ppend(ContentsOf)?|lloc(ate)?|bs)|r(ound(ed)?|e(serveCapacity|tain|duce|place(Range|Subrange)?|verse(d)?|quest(NativeBuffer|UniqueMutableBackingBuffer)|lease|m(ove(Range|Subrange|Value(ForKey)?|First|Last|A(tIndex|ll))?|ainder(WithOverflow)?)))|ge(nerate|t(Objects|Element))|m(in(imum(Magnitude)?|Element)|ove(Initialize(Memory|BackwardFrom|From)?|Assign(From)?)?|ultipl(y(WithOverflow)?|ied)|easure|a(ke(Iterator|Description)|x(imum(Magnitude)?|Element)))|bindMemory)\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(s(uperclassMirror|amePositionIn|tartsWith)|nextObject|c(haracterAtIndex|o(untByEnumeratingWithState|pyWithZone)|ustom(Mirror|PlaygroundQuickLook))|is(EmptyInput|ASCII)|object(Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(oveInitializeAssignFrom|ember))\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(anyGenerator|autoreleasepool)\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(s(tride(of(Value)?)?|izeof(Value)?|equence|wap)|numericCast|transcode|is(UniquelyReferenced(NonObjC)?|KnownUniquelyReferenced)|zip|d(ump|ebugPrint)|unsafe(BitCast|Downcast|Unwrap|Address(Of)?)|pr(int|econdition(Failure)?)|fatalError|with(Unsafe(MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(ssert(ionFailure)?|lignof(Value)?|bs)|re(peatElement|adLine)|getVaList|m(in|ax))(?=\s*\()
        name: support.function.swift.sa
      - match: (?i)\s*\b(s(ort|uffix|pli(ce|t))|insert|overlaps|d(istance|rop(First|Last))|join|prefix|extend|withUnsafe(MutablePointers|Pointers)|lazy|advance|re(flect|move(Range|Last|A(tIndex|ll))))(?=\s*\()
        name: support.function.swift.sa
      - match: (?i)\s*\b(abs|acos|alpha|argb|asin|atan|average|blue|calc|ceil|color|contrast|convert|convert|cos|darken|datauri|desaturate|difference|e|escape|exclusion|extract|fade|fadein|fadeout|floor|format|green|greyscale|hardlight|hsl|hsla|hsv|hsva|hsvhue|hsvsaturation|hsvvalue|hue|length|lighten|lightness|luma|max|min|mix|mod|multiply|negation|overlay|percentage|pi|pow|red|replace|round|saturate|saturation|screen|sin|softlight|spin|sqrt|tan|unit)\b\s*
        name: support.function.anymethod.builtin.less
      - match: (?x)\s*\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|Before(cut|deactivate|unload|update|paste|print|editfocus|activate)|Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\b\s*
        name: support.function.eventhandler.sa
      - match: (?x)\s*\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\b\s*
        name: support.function.sa
      - match: (?x)\s*\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|appendChild|appendData|before|blur|canPlayType|captureStream|caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|cloneContents|cloneNode|cloneRange|close|closest|collapse|compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|createAttributeNS|createCaption|createCDATASection|createComment|createContextualFragment|createDocument|createDocumentFragment|createDocumentType|createElement|createElementNS|createEntityReference|createEvent|createExpression|createHTMLDocument|createNodeIterator|createNSResolver|createProcessingInstruction|createRange|createShadowRoot|createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|getClientRects|getContext|getDestinationInsertionPoints|getElementById|getElementsByClassName|getElementsByName|getElementsByTagName|getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|previousSibling|probablySupportsContext|queryCommandEnabled|queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|querySelector|querySelectorAll|registerContentHandler|registerElement|registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|toDataURL|toggle|toString|values|write|writeln)\b\s*
        name: support.function.dom.sa
      - match: (?i)\s*\b(?i)(abort|abortafterwait|absent|absolute|accentsensitivity|acceptablecursopt|acp|action|activation|add|address|admin|aes128|aes192|aes256|affinity|after|aggregate|algorithm|allconstraints|allerrormsgs|allindexes|alllevels|allresults|allowconnections|allowduprow|allowencryptedvaluemodifications|allowpagelocks|allowrowlocks|allowsnapshotisolation|alter|altercolumn|always|anonymous|ansidefaults|ansinulldefault|ansinulldfltoff|ansinulldflton|ansinulls|ansipadding|ansiwarnings|appdomain|append|application|apply|arithabort|arithignore|assembly|asymmetric|asynchronouscommit|at|atan2|atomic|attach|attachforcerebuildlog|attachrebuildlog|audit|authrealm|authentication|auto|autocleanup|autoclose|autocreatestatistics|autoshrink|autoupdatestatistics|autoupdatestatisticsasync|automatedbackuppreference|automatic|autopilot|availability|availabilitymode|backuppriority|base64|basic|batches|batchsize|before|between|bigint|binary|binding|bit|block|blocksize|bmk|break|broker|brokerinstance|bucketcount|buffer|buffercount|bulklogged|by|call|caller|card|case|catalog|catch|cert|certificate|changeretention|changetracking|changetrackingcontext|changes|char|character|characterset|checkexpiration|checkpolicy|checkconstraints|checkindex|checkpoint|cleanuppolicy|clear|clearport|close|clustered|codepage|collection|columnencryptionkey|columnmasterkey|columnstore|columnstorearchive|colv80to100|colv100to80|commitdifferentialbase|committed|compatibilitylevel|compressallrowgroups|compression|compressiondelay|concatnullyieldsnull|concatenate|configuration|connect|continue|continueaftererror|contract|contractname|control|conversation|conversationgroupid|conversationhandle|copy|copyonly|countrows|counter|create(\s+or\s+alter)?|credential|cross|cryptographic|cryptographicprovider|cube|cursor|cursorcloseoncommit|cursordefault|data|datacompression|dataflushintervalseconds|datamirroring|datapurity|datasource|database|databasename|databasesnapshot|datafiletype|datecorrelationoptimization|date|datefirst|dateformat|dateformat|datetime|datetime2|datetimeoffset|days|dbchaining|dbid|dbidexec|dboonly|deadlockpriority|deallocate|dec|decimal|declare|decrypt|decrypta|decryption|defaultdatabase|defaultlanguage|defaultlogondomain|defaultschema|definition|delay|delayeddurability|delimitedtext|densityvector|dependent|des|description|desiredstate|desx|differential|digest|disable|disablebroker|disabledefcnstchk|disabled|disk|distinct|distributed|distribution|drop|dropexisting|dtsbuffers|dump|durability|dynamic|edition|elements|else|emergency|empty|enable|enablebroker|enabled|encoding|encrypted|encryptedvalue|encryption|encryptiontype|end|endpoint|endpointurl|enhancedintegrity|entry|errorbrokerconversations|errorfile|estimateonly|event|except|exec|executable|execute|exists|expand|expiredate|expirydate|explicit|external|externalaccess|failover|failovermode|failureconditionlevel|fast|fastforward|fastfirstrow|federatedserviceaccount|fetch|fieldterminator|fieldterminator|file|filelistonly|filegroup|filename|filestream|filestreamlog|filestreamon|filetable|fileformat|filter|firstrow|fipsflagger|firetriggers|first|firstrow|float|flushintervalseconds|fmtonly|following|force|forcefailoverallowdataloss|forceserviceallowdataloss|forced|forceplan|formatfile|formatoptions|formattype|formsof|forwardonly|freecursors|freeexeccontext|fullscan|fulltext|fulltextall|fulltextkey|function|generated|get|geography|geometry|global|go|goto|governor|guid|hadoop|hardening|hash|hashed|headerlimit|headeronly|healthchecktimeout|hidden|hierarchyid|histogram|histogramsteps|hitscursors|hitsexeccontext|hours|http|identity|identityvalue|if|ifnull|ignoreconstraints|ignoredupkey|ignoreduprow|ignoretriggers|image|immediate|implicittransactions|include|includenullvalues|index|inflectional|init|initiator|insensitive|insert|instead|int|integer|integrated|intersect|intermediate|intervallengthminutes|into|inusecursors|inuseexeccontext|io|is|isabout|isoweek|isolation|jobtrackerlocation|json|keep|keepnulls|keepreplication|keepdefaults|keepfixed|keepidentity|keepnulls|kerberos|key|keypath|keysource|keystoreprovidername|keyset|kill|kilobytesperbatch|labelonly|langid|language|last|lastrow|legacycardinalityestimation|length|level|lifetime|lineage80to100|lineage100to80|listenerip|listenerport|load|loadhistory|lobcompaction|local|localservicename|locate|location|lockescalation|locktimeout|lockres|login|logintype|loop|manual|markinuseforremoval|masked|master|matched|maxqueuereaders|maxduration|maxoutstandingiopervolume|maxdop|maxerrors|maxlength|maxtransfersize|maxplansperquery|maxstoragesizemb|mediadescription|medianame|mediapassword|memogroup|memoryoptimized|merge|message|messageforwardsize|messageforwarding|microsecond|millisecond|minutes|mirroraddress|missescursors|missesexeccontext|mixed|modify|money|move|multiuser|mustchange|name|namespace|nanosecond|native|nativecompilation|nchar|ncharacter|never|newaccount|newbroker|newname|next|no|nobrowsetable|nochecksum|nocompression|noinfomsgs|notriggers|notruncate|nocount|noexec|noexpand|noformat|noinit|nolock|nonatomic|nonclustered|nondurable|none|norecompute|norecovery|noreset|norewind|noskip|not|notification|nounload|now|nowait|ntext|ntlm|numeric|numericroundabort|nvarchar|object|objid|oem|offline|oldaccount|online|operationmode|open|openjson|optimistic|option|orc|out|outer|output|over|override|owner|ownership|padindex|page|pagechecksum|pageverify|pagecount|paglock|param|parametersniffing|parametertypeexpansion|parameterization|parquet|parseonly|partial|partition|partner|password|path|pause|percentage|permissionset|persisted|period|physicalonly|planforcingmode|policy|pool|population|ports|preceding|precision|predicate|presumeabort|primary|primaryrole|print|prior|priority |prioritylevel|private|proc(edure)?|procedurename|profile|provider|querycapturemode|querygovernorcostlimit|queryoptimizerhotfixes|querystore|queue|quotedidentifier|raiserror|range|raw|rcfile|rc2|rc4|rc4128|rdbms|readcommittedsnapshot|read|readonly|readwrite|readcommitted|readcommittedlock|readonly|readpast|readuncommitted|readwrite|real|rebuild|receive|recmodel70backcomp|recompile|reconfigure|recovery|recursive|recursivetriggers|redoqueue|rejectsamplevalue|rejecttype|rejectvalue|relative|remote|remotedataarchive|remoteproctransactions|remoteservicename|remove|removedcursors|removedexeccontext|reorganize|repeat|repeatable|repeatableread|replica|replicated|replnick100to80|replnickarray80to100|replnickarray100to80|required|requiredcursopt|resample|reset|resource|resourcemanagerlocation|restart|restore|restricteduser|resume|retaindays|retention|return|revert|rewind|rewindonly|returns|robust|role|rollup|root|roundrobin|route|row|rowdump|rowguidcol|rowlock|rowterminator|rows|rowsperbatch|rowsetsonly|rowterminator|rowversion|rsa1024|rsa2048|rsa3072|rsa4096|rsa512|safe|safety|sample|save|schema|schemabinding|scoped|scroll|scrolllocks|sddl|secexpr|secondary|secondaryonly|secondaryrole|secret|security|securityaudit|selective|self|send|sent|sequence|serdemethod|serializable|server|service|servicebroker|servicename|serviceobjective|sessiontimeout|session|sessions|seterror|setopts|sets|shardmapmanager|shardmapname|sharded|sharedmemory|showstatistics|showplanall|showplantext|showplanxml|showplanxmlwithrecompile|shrinkdb|shutdown|sid|signature|simple|singleblob|singleclob|singlenclob|singleuser|singleton|site|sizebasedcleanupmode|skip|smalldatetime|smallint|smallmoney|snapshot|snapshotimport|snapshotrestorephase|soap|softnuma|sortintempdb|sorteddata|sorteddatareorg|spatial|sql|sqlbigint|sqlbinary|sqlbit|sqlchar|sqldate|sqldecimal|sqldouble|sqlfloat|sqlguid|sqlhandle|sqllongvarbinary|sqllongvarchar|sqlnumeric|sqlreal|sqlsmallint|sqltime|sqltimestamp|sqltinyint|sqltsiday|sqltsifracsecond|sqltsihour|sqltsiminute|sqltsimonth|sqltsiquarter|sqltsisecond|sqltsiweek|sqltsiyear|sqltypedate|sqltypetime|sqltypetimestamp|sqlvarbinary|sqlvarchar|sqlvariant|sqlwchar|sqlwlongvarchar|ssl|sslport|standard|standby|start|startdate|started|statheader|state|statement|static|statistics|statisticsincremental|statisticsnorecompute|statisticsonly|statman|statsstream|status|stop|stoponerror|stopat|stopatmark|stopbeforemark|stoplist|stopped|stringdelimiter|subject|supplementallogging|supported|suspend|symmetric|synchronouscommit|synonym|sysname|system|systemtime|systemversioning|table|tableresults|tablock|tablockx|take|tape|target|targetindex|targetpartition|tcp|temporalhistoryretention|text|textimageon|then|thesaurus|throw|time|timeout|timestamp|tinyint|to|top|tornpagedetection|trackcolumnsupdated|tran|transaction|transfer|tripledes|tripledes3key|truncate|trustworthy|try|tsql|type|typedesc|typewarning|tzoffset|uid|unbounded|uncommitted|unique|uniqueidentifier|unlimited|unload|unlock|unsafe|updlock|url|use|useplan|useroptions|usetypedefault|using|utcdatetime|validxml|validation|value|values|varbinary|varchar|verbose|verifyonly|version|viewmetadata|virtualdevice|visiblity|waitfor|webmethod|weekday|weight|wellformedxml|when|while|widechar|widecharansi|widenative|windows|with|within|witness|without|withoutarraywrapper|workload|wsdl|xactabort|xlock|xml|xmlschema|xquery|xsinil|zone)\b\s*
        name: support.function.sql.sa
      - match: (?i)\s*\b(shift|sort|splice|unshift|pop|push|reverse)\b
        name: support.function.mutator.sa}
      - match: (?i)\s*\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b
        name: support.function.sa
      - match: (?i)\s*\b(add|append|at|average|chunk|clone|compact|concat|construct|copyWithin|count|create|difference|differenceBy|differenceWith|drop|dropRight|dropRightWhile|dropWhile|entries|every|exclude|fill|filter|find|findIndex|findLastIndex|first|flat|flatMap|flatten|flattenDeep|flattenDepth|fnFromIndex|forEach|from|fromPairs|groupBy|head|includes|indexOf|inGroups|inGroupsOf|initial|insert|intersect|intersection|intersectionBy|intersectionWith|isArray|isEmpty|isEqual|join|keys|last|lastIndexOf|least|map|max|median|min|most|none|nth|object|of|pop|pull|pullAll|pullAllBy|pullAllWith|pullAt|push|range|reduce|reduceRight|remove|removeAt|rest|reverse|sample|shift|shuffle|slice|some|sort|sortBy|sortedIndex|sortedIndexBy|sortedIndexOf|sortedLastIndex|sortedLastIndexBy|sortedLastIndexOf|sortedUniq|sortedUniqBy|splice|subtract|sum|tail|take|takeRight|takeRightWhile|takeWhile|to|toLocaleString|toSource|toString|union|unionBy|unionWith|uniq|uniqBy|unique|uniqWith|unshift|unzip|unzipWith|values|without|xor|xorBy|xorWith|zip|zipObject|zipObjectDeep|zipWith)\b
        name: support.function.method.array.sa
      - match: (?i)\s*\b(add|and|clamp|clone|compareExchange|contains|dateUnit|every|exchange|intersect|isLockFree|isValid|load|notify|or|span|store|sub|toArray|toString|union|wait|xor)\b
        name: support.function.method.atomics.sa
      - match: (?i)\s*\b(asIntN|asUintN|toLocaleString|toString|valueOf)\b
        name: support.function.method.bigint.sa
      - match: (?i)\s*\b(toSource|toString|valueOf)\b
        name: support.function.method.boolean.sa
      - match: (?i)\s*\b(contains|countBy|each|eachRight|every|filter|find|findLast|findWhere|flatMap|flatMapDeep|flatMapDepth|forEach|forEachRight|groupBy|includes|indexBy|invoke|invokeMap|keyBy|map|max|min|orderBy|partition|pluck|reduce|reduceRight|reject|sample|sampleSize|shuffle|size|some|sortBy|toArray|where)\b
        name: support.function.method.collection.sa
      - match: (?i)\s*\b(getBigInt64|getBigUint64|getFloat32|getFloat64|getInt16|getInt32|getInt8|getUint16|getUint32|getUint8|setBigInt64|setBigUint64|setFloat32|setFloat64|setInt16|setInt32|setInt8|setUint16|setUint32|setUint8)\b
        name: support.function.method.dataview.sa
      - match: (?i)\s*\b(addLocale|addUnits|advance|beginningOfISOWeek|beginningOfUnit|clone|create|daysInMonth|endOfISOWeek|endOfUnit|format|full|get|getAllLocaleCodes|getAllLocales|getDate|getDay|getFullYear|getHours|getISOWeek|getLocale|getMilliseconds|getMinutes|getMonth|getOption|getSeconds|getTime|getTimezoneOffset|getUTCDate|getUTCDay|getUTCFullYear|getUTCHours|getUTCMilliseconds|getUTCMinutes|getUTCMonth|getUTCOffset|getUTCSeconds|getUTCWeekday|getWeekday|getYear|is|isAfter|isBefore|isBetween|isDay|isFuture|isLastUnit|isLeapYear|isNextUnit|iso|isPast|isThisUnit|isUTC|isValid|long|medium|now|parse|range|relative|relativeTo|removeLocale|reset|rewind|set|setDate|setFullYear|setHours|setISOWeek|setLocale|setMilliseconds|setMinutes|setMonth|setOption|setSeconds|setTime|setUTC|setUTCDate|setUTCFullYear|setUTCHours|setUTCMilliseconds|setUTCMinutes|setUTCMonth|setUTCSeconds|setWeekday|setYear|short|toDateString|toGMTString|toISOString|toJSON|toLocaleDateString|toLocaleString|toLocaleTimeString|toSource|toString|toTimeString|toUTCString|unitsAgo|unitsFromNow|unitsSince|unitsUntil|UTC|valueOf|add|closestIndexTo|closestTo|compareAsc|compareDesc|format|formatDistance|formatDistanceStrict|formatDistanceToNow|formatDistanceToNowStrict|formatDuration|formatISO|formatISO9075|formatISODuration|formatRFC3339|formatRFC7231|formatRelative|intervalToDuration|intlFormat|isAfter|isBefore|isDate|isEqual|isExists|isFuture|isMatch|validates|isPast|isValid|lightFormat|max|min|parse|parseISO|parseJSON|set|sub|toDate|daysToWeeks|hoursToMilliseconds|hoursToMinutes|hoursToSeconds|millisecondsToHours|millisecondsToMinutes|millisecondsToSeconds|minutesToHours|minutesToMilliseconds|minutesToSeconds|monthsToQuarters|monthsToYears|quartersToMonths|quartersToYears|secondsToHours|secondsToMilliseconds|secondsToMinutes|weeksToDays|yearsToMonths|yearsToQuarters|areIntervalsOverlapping|clamp|eachDayOfInterval|eachHourOfInterval|eachMinuteOfInterval|eachMonthOfInterval|eachQuarterOfInterval|eachWeekOfInterval|eachWeekendOfInterval|eachYearOfInterval|getOverlappingDaysInIntervals|isWithinInterval|fromUnixTime|getTime|getUnixTime|addMilliseconds|differenceInMilliseconds|getMilliseconds|milliseconds|setMilliseconds|subMilliseconds|addSeconds|differenceInSeconds|endOfSecond|getSeconds|isSameSecond|isThisSecond|setSeconds|startOfSecond|subSeconds|addMinutes|differenceInMinutes|endOfMinute|getMinutes|isSameMinute|isThisMinute|roundToNearestMinutes|setMinutes|startOfMinute|subMinutes|addHours|differenceInHours|endOfHour|getHours|isSameHour|isThisHour|setHours|startOfHour|subHours|addBusinessDays|addDays|differenceInBusinessDays|differenceInCalendarDays|differenceInDays|endOfDay|endOfToday|endOfTomorrow|endOfYesterday|getDate|getDayOfYear|isSameDay|isToday|isTomorrow|isYesterday|setDate|setDayOfYear|startOfDay|startOfToday|startOfTomorrow|startOfYesterday|subBusinessDays|subDays|getDay|getISODay|isFriday|isMonday|isSaturday|isSunday|isThursday|isTuesday|isWednesday|isWeekend|nextDay|nextFriday|nextMonday|nextSaturday|nextSunday|nextThursday|nextTuesday|nextWednesday|previousDay|previousFriday|previousMonday|previousSaturday|previousSunday|previousThursday|previousTuesday|previousWednesday|setDay|setISODay|addWeeks|differenceInCalendarWeeks|differenceInWeeks|endOfWeek|getWeek|getWeekOfMonth|getWeeksInMonth|isSameWeek|isThisWeek|lastDayOfWeek|setWeek|startOfWeek|subWeeks|differenceInCalendarISOWeeks|endOfISOWeek|getISOWeek|isSameISOWeek|isThisISOWeek|lastDayOfISOWeek|setISOWeek|startOfISOWeek|addMonths|differenceInCalendarMonths|differenceInMonths|eachWeekendOfMonth|endOfMonth|getDaysInMonth|getMonth|isFirstDayOfMonth|isLastDayOfMonth|isSameMonth|isThisMonth|lastDayOfMonth|setMonth|startOfMonth|subMonths|addQuarters|differenceInCalendarQuarters|differenceInQuarters|endOfQuarter|getQuarter|isSameQuarter|isThisQuarter|lastDayOfQuarter|setQuarter|startOfQuarter|subQuarters|addYears|differenceInCalendarYears|differenceInYears|eachWeekendOfYear|endOfYear|getDaysInYear|getYear|isLeapYear|isSameYear|isThisYear|lastDayOfYear|setYear|startOfYear|subYears|addISOWeekYears|differenceInCalendarISOWeekYears|differenceInISOWeekYears|endOfISOWeekYear|getISOWeekYear|getISOWeeksInYear|isSameISOWeekYear|lastDayOfISOWeekYear|setISOWeekYear|startOfISOWeekYear|subISOWeekYears|endOfDecade|getDecade|lastDayOfDecade|startOfDecade|getWeekYear|setWeekYear|startOfWeekYear)\b
        name: support.function.method.date.sa
      - match: (?i)\s*\b(|add|addIndex|adjust|after|all|allpass|fail|always|and|andThen|any|anypass|fail|ap|aperture|append|apply|applySpec|applyTo|ary|ascend|assoc|assocPath|before|binary|bind|bindAll|bindKey|both|call|cancel|chain|clamp|clone|comparator|complement|compose|composeK|composeP|composeWith|concat|cond|construct|constructN|contains|converge|countBy|curry|curryN|curryRight|debounce|dec|defaultTo|defer|delay|descend|difference|differenceWith|dissoc|dissocPath|divide|drop|dropLast|dropLastWhile|dropRepeats|dropRepeatsWith|dropWhile|either|empty|endsWith|eqBy|eqProps|equals|every|evolve|F|filter|find|findIndex|findLast|findLastIndex|flatten|flip|forEach|forEachObjIndexed|fromPairs|groupBy|groupWith|gt|gte|has|hasIn|hasPath|head|identical|identity|ifElse|inc|includes|indexBy|indexOf|init|innerJoin|insert|insertAll|intersection|intersperse|into|invert|invertObj|invoker|is|isEmpty|isNil|join|juxt|keys|keysIn|last|lastIndexOf|lazy|length|lens|lensIndex|lensPath|lensProp|lift|liftN|lock|lt|lte|map|mapAccum|mapAccumRight|mapObjIndexed|match|mathMod|max|maxBy|mean|median|memoize|memoizeWith|merge|mergeAll|mergeDeepLeft|mergeDeepRight|mergeDeepWith|mergeDeepWithKey|mergeLeft|mergeRight|mergeWith|mergeWithKey|min|minBy|modulo|move|multiply|nAry|negate|none|not|nth|nthArg|o|objOf|of|omit|once|or|otherwise|over|overArgs|pair|partial|partialRight|partition|path|pathEq|pathOr|paths|pathSatisfies|pick|pickAll|pickBy|pipe|pipeK|pipeP|pipeWith|pluck|prepend|product|project|prop|propEq|propIs|propOr|props|propSatisfies|range|rearg|reduce|reduceBy|reduced|reduceRight|reduceWhile|reject|remove|repeat|replace|rest|restArguments|reverse|scan|sequence|set|slice|sort|sortBy|sortWith|split|splitAt|splitEvery|splitWhen|spread|startsWith|subtract|sum|symmetricDifference|symmetricDifferenceWith|T|tail|take|takeLast|takeLastWhile|takeWhile|tap|test|throttle|thunkify|times|toLower|toPairs|toPairsIn|toSource|toString|toUpper|transduce|transpose|traverse|trim|tryCatch|type|unapply|unary|uncurryN|unfold|union|unionWith|uniq|uniqBy|uniqWith|unless|unnest|until|update|useWith|values|valuesIn|view|when|where|whereEq|without|wrap|xor|xprod|zip|zipObj|zipWith)\b
        name: support.function.method.function.sa
      - match: (?i)\s*\b(next|return|throw)\b
        name: support.function.method.generator.sa
      - match: (?i)\s*\b(chain|parse|stringify|value)\b
        name: support.function.method.json.sa
      - match: (?i)\s*\b(castArray|clone|cloneDeep|cloneDeepWith|cloneWith|conformsTo|eq|gt|gte|isArguments|isArray|isArrayBuffer|isArrayLike|isArrayLikeObject|isBoolean|isBuffer|isDate|isElement|isEmpty|isError|iSetual|iSetualWith|isFinite|isFunction|isInteger|isLength|isMap|isMatch|isMatchWith|isNaN|isNative|isNil|isNull|isNumber|isObject|isObjectLike|isPlainObject|isProxy|isRegExp|isSafeInteger|isSet|isString|isSymbol|isUndefined|isWeakMap|isWeakSet|lt|lte|toArray|toFinite|toInteger|toLength|toNumber|toPlainObject|toSafeInteger|toString)\b
        name: support.function.method.lang.sa
      - match: (?i)\s*\b(clear|delete|entries|forEach|get|has|keys|set|values)\b
        name: support.function.method.map.sa
      - match: (?i)\s*\b(abs|acos|acosh|acot|acoth|acsc|acsch|add|and|apply|arg|asec|asech|asin|asinh|atan|atan2|atanh|bellNumbers|bin|bitAnd|bitNot|bitOr|bitXor|catalan|cbrt|ceil|clone|clz32|column|combinations|combinationsWithRep|compare|compareNatural|compareText|compile|composition|concat|conj|cos|cosh|cot|coth|count|cross|csc|csch|ctranspose|cube|deepEqual|derivative|det|diag|diff|distance|divide|dot|dotDivide|dotMultiply|dotPow|eigs|equal|equalText|erf|evaluate|exp|expm|expm1|factorial|filter|fix|flatten|floor|forEach|format|fround|gamma|gcd|getMatrixDataType|hasNumericValue|help|hex|hypot|identity|im|imul|intersect|inv|isInteger|isNaN|isNegative|isNumeric|isPositive|isPrime|isZero|kldivergence|kron|larger|largerEq|lcm|leftShift|log|log10|log1p|log2|lsolve|lup|lusolve|mad|map|max|maxBy|mean|meanBy|median|min|minBy|mod|mode|multinomial|multiply|norm|not|nthRoot|nthRoots|numeric|oct|ones|or|parser|partitionSelect|permutations|pickRandom|pow|print|prod|qr|quantileSeq|random|randomInt|range|rationalize|re|reshape|resize|rightArithShift|rightLogShift|rotate|rotationMatrix|round|row|sec|sech|setCartesian|setDifference|setDistinct|setIntersect|setIsSubset|setMultiplicity|setPowerset|setSize|setSymDifference|setUnion|sign|simplify|sin|sinh|size|slu|smaller|smallerEq|sort|sqrt|sqrtm|square|squeeze|std|stirlingS2|subset|subtract|sum|sumBy|tan|tanh|to|trace|transpose|trunc|typeOf|unaryMinus|unaryPlus|unequal|usolve|variance|xgcd|xor|zeros)\b
        name: support.function.method.math.sa
      - match: (?i)\s*\b(abbr|bytes|cap|ceil|chr|clamp|dateUnit|dateUnitAfter|dateUnitAgo|dateUnitBefore|dateUnitFromNow|downto|duration|floor|format|hex|inRange|isEven|isFinite|isInteger|isMultipleOf|isNaN|isOdd|isSafeInteger|log|math|metric|ordinalize|pad|parseFloat|parseInt|random|range|round|times|toExponential|toFixed|toLocaleString|toNumber|toPrecision|toSource|toString|upto|valueOf)\b
        name: support.function.method.number.sa
      - match: (?i)\s*\b(defineGetter|defineSetter|lookupGetter|lookupSetter|add|addAll|allKeys|assign|assignIn|assignInWith|assignWith|at|average|clone|count|create|defaults|defaultsDeep|defineProperties|defineProperty|entries|entriesIn|every|exclude|extend|extendOwn|extendWith|filter|find|findKey|findLastKey|forEach|forIn|forInRight|forOwn|forOwnRight|freeze|fromEntries|fromQueryString|functions|functionsIn|get|getOwnPropertyDescriptor|getOwnPropertyDescriptors|getOwnPropertyNames|getOwnPropertySymbols|getPrototypeOf|has|hasIn|hasOwnProperty|intersect|invert|invertBy|invoke|is|isArguments|isArray|isArrayBuffer|isBoolean|isDataView|isDate|isElement|isEmpty|isEqual|isError|isExtensible|isFinite|isFrozen|isFunction|isMap|isMatch|isNaN|isNull|isNumber|isObject|isPrototypeOf|isRegExp|isSealed|isSet|isString|isSymbol|isType|isTypedArray|isUndefined|isWeakMap|isWeakSet|keys|keysIn|least|map|mapKeys|mapObject|mapValues|matcher|max|median|merge|mergeAll|mergeWith|min|most|none|omit|omitBy|pairs|pick|pickBy|preventExtensions|property|propertyIsEnumerable|propertyOf|reduce|reject|remove|result|seal|select|set|setPrototypeOf|setWith|size|some|subtract|sum|tap|toLocaleString|toPairs|toPairsIn|toPath|toQueryString|toSource|toString|transform|unset|update|updateWith|valueOf|values|valuesIn)\b
        name: support.function.method.object.sa
      - match: (?i)\s*\b(all|allSettled|any|catch|finally|race|reject|resolve|then)\b
        name: support.function.method.promise.sa
      - match: (?i)\s*\b(apply|construct|defineProperty|deleteProperty|get|getOwnPropertyDescriptor|getPrototypeOf|has|isExtensible|ownKeys|preventExtensions|register|set|setPrototypeOf|unregister)\b
        name: support.function.method.proxy.sa
      - match: (?i)\s*\b(address|age|altitude|ampm|androidid|animal|appletoken|areacode|avatar|bbpin|birthday|bool|capitalize|cc|cctype|cf|character|city|coin|color|company|coordinates|country|cpf|currency|currencypair|date|depth|dice|dollar|domain|email|euro|exp|expmonth|expyear|falsy|fbid|first|floating|gender|geohash|googleanalytics|guid|hammertime|hash|hashtag|hidden|hour|integer|ip|ipv6|klout|last|latitude|letter|locale|longitude|millisecond|minute|mixin|month|n|name|natural|normal|pad|paragraph|phone|pick|pickone|pickset|postal|postcode|prefix|prime|profession|province|radio|rpg|second|sentence|set|shuffle|ssn|state|street|string|suffix|syllable|timestamp|timezone|tld|tv|twitter|unique|url|weekday|weighted|word|wp7anid|wp8anid2|year|zip)\b
        name: support.function.method.random.sa
      - match: (?i)\s*\b(addFlags|compile|escape|exec|getFlags|removeFlags|setFlags|test|toSource|toString)\b
        name: support.function.method.regexp.sa
      - match: (?i)\s*\b(at|chain|commit|next|plant|prototype|reverse|tap|thru|toJSON|value|valueOf)\b
        name: support.function.method.seq.sa
      - match: (?i)\s*\b(add|clear|delete|entries|forEach|has|values)\b
        name: support.function.method.set.sa
      - match: (?i)\s*\b(addAcronym|addHuman|addPlural|anchor|at|big|blink|bold|camelCase|camelize|capitalize|chain|charAt|charCodeAt|chars|codePointAt|codePoints|codes|compact|concat|count|countGraphemes|countSubstrings|countWhere|countWords|dasherize|deburr|decapitalize|decodeBase64|encodeBase64|endsWith|escape|escapeHtml|escapeHTML|escapeRegExp|escapeURL|first|fixed|fontcolor|fontsize|forEach|format|from|fromCharCode|fromCodePoint|graphemeAt|graphemes|hankaku|hasScript|hiragana|humanize|includes|indexOf|insert|isAlpha|isAlphaDigit|isBlank|isDigit|isEmpty|isLowerCase|isNumeric|isScript|isString|isUpperCase|italics|katakana|kebabCase|last|lastIndexOf|latinise|lines|link|localeCompare|lowerCase|lowerFirst|match|matchAll|matches|normalize|pad|padEnd|padLeft|padRight|padStart|parameterize|parseInt|pluralize|prune|range|raw|remove|removeAll|removeTags|repeat|replace|replaceAll|reverse|reverseGrapheme|search|shift|singularize|slice|slugify|small|snakeCase|spacify|splice|split|sprintf|startCase|startsWith|strike|stripBom|stripTags|sub|substr|substring|sup|swapCase|template|thru|titleCase|titleize|to|toLocaleLowerCase|toLocaleUpperCase|toLower|toLowerCase|toNumber|toSource|toString|toUpper|toUpperCase|tr|trim|trimEnd|trimLeft|trimRight|trimStart|truncate|truncateOnWord|underscore|unescape|unescapeHtml|unescapeHTML|unescapeURL|upperCase|upperFirst|value|valueOf|vprintf|words|wordWrap|zenkaku)\b
        name: support.function.method.string.sa
      - match: (?i)\s*\b(for|keyFor|toSource|toString|valueOf)\b
        name: support.function.method.symbol.sa
      - match: (?i)\s*\b(at|copyWithin|entries|every|fill|filter|find|findIndex|forEach|from|includes|indexOf|join|keys|lastIndexOf|map|of|reduce|reduceRight|reverse|set|slice|some|sort|subarray|toLocaleString|toString|values)\b
        name: support.function.method.typedarray.sa
      - match: (?i)\s*\b(attempt|bindAll|cond|conforms|constant|defaultTo|escape|flow|flowRight|identity|iteratee|matches|matchesProperty|method|methodOf|mixin|noConflict|noop|now|nthArg|over|overEvery|overSome|property|propertyOf|random|range|rangeRight|result|runInContext|stubArray|stubFalse|stubObject|stubString|stubTrue|template|times|toPath|unescape|uniqueId)\b
        name: support.function.method.util.sa
      - match: (?i)\s*\b(compile|compileStreaming|instantiate|instantiateStreaming|validate)\b
        name: support.function.method.webassembly.sa
      - match: (?i)\s*\b(on(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|Before(cut|deactivate|unload|update|paste|print|editfocus|activate)|Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort))\b
        name: support.function.event-handler.sa
      - match: (?i)\s*\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\b
        name: support.function.method.sa
      - match: (?i)\s*\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|appendChild|appendData|before|blur|canPlayType|captureStream|caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|cloneContents|cloneNode|cloneRange|close|closest|collapse|compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|createAttributeNS|createCaption|createCDATASection|createComment|createContextualFragment|createDocument|createDocumentFragment|createDocumentType|createElement|createElementNS|createEntityReference|createEvent|createExpression|createHTMLDocument|createNodeIterator|createNSResolver|createProcessingInstruction|createRange|createShadowRoot|createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|getClientRects|getContext|getDestinationInsertionPoints|getElementById|getElementsByClassName|getElementsByName|getElementsByTagName|getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|previousSibling|probablySupportsContext|queryCommandEnabled|queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|querySelector|querySelectorAll|registerContentHandler|registerElement|registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|toDataURL|toggle|toString|values|write|writeln)\b
        name: support.function.dom.sa
      - match: (?i)\bapc(store|smainfo|compilefile|clearcache|cas|cacheinfo|inc|dec|defineconstants|delete(file)?|exists|fetch|loadconstants|add|bin(dump|load)(file)?)\b
        name: support.function.apc.sa
      - match: (?i)\b(shuffle|sizeof|sort|next|nat(case)?sort|count|compact|current|inarray|usort|uksort|uasort|pos|prev|end|each|extract|ksort|key(exists)?|krsort|list|asort|arsort|rsort|reset|range|array((shift|sum|splice|search|slice|chunk|changekeycase|countvalues|column|combine|(diff|intersect)((u)?(key|assoc))?|u(diff|intersect)((u)?assoc)?|unshift|unique|pop|push|pad|product|values|keys|keyexists|filter|fill(keys)?|flip|walk(recursive)?|reduce|replace(recursive)?|reverse|rand|multisort|merge(recursive)?|map)?))\b
        name: support.function.array.sa
      - match: (?i)\b(showsource|sysgetloadavg|sleep|highlight(file|string)|constant|connection(aborted|status)|time(nanosleep|sleepuntil)|ignoreuserabort|die|define(d)?|usleep|uniqid|unpack|haltcompiler|php(checksyntax|stripwhitespace)|pack|eval|exit|getbrowser)\b
        name: support.function.basicfunctions.sa
      - match: (?i)\bbc(scale|sub|sqrt|comp|div|pow(mod)?|add|mod|mul)\b
        name: support.function.bcmath.sa
      - match: (?i)\bblencencrypt\b
        name: support.function.blenc.sa
      - match: (?i)\bbz(compress|close|open|decompress|errstr|errno|error|flush|write|read)\b
        name: support.function.bz2.sa
      - match: (?i)\b((French|Gregorian|Jewish|Julian)ToJD|cal(tojd|info|daysinmonth|fromjd)|unixtojd|jdto(unix|jewish)|easter(date|days)|JD(MonthName|To(Gregorian|Julian|French)|DayOfWeek))\b
        name: support.function.calendar.sa
      - match: (?i)\b(classalias|allusermethod(array)?|is(a|subclassof)|autoload|(class|interface|method|property|trait)exists|get(class((vars|methods))?|(called|parent)class|objectvars|declared(classes|interfaces|traits)))\b
        name: support.function.classobj.sa
      - match: (?i)\b(com(createguid|printtypeinfo|eventsink|loadtypelib|getactiveobject|messagepump)|variant(sub|set(type)?|not|neg|cast|cat|cmp|int|idiv|imp|or|div|date(from|to)timestamp|pow|eqv|fix|and|add|abs|round|gettype|xor|mod|mul))\b
        name: support.function.com.sa
      - match: (?i)\b(isset|unset|eval|empty|list)\b
        name: support.function.construct.sa
      - match: (?i)\b(print|echo)\b
        name: support.function.construct.output.sa
      - match: (?i)\bctype(space|cntrl|digit|upper|punct|print|lower|alnum|alpha|graph|xdigit)\b
        name: support.function.ctype.sa
      - match: (?i)\bcurl(share(close|init|setopt)|strerror|setopt(array)?|copyhandle|close|init|unescape|pause|escape|errno|error|exec|version|filecreate|reset|getinfo|multi(strerror|setopt|select|close|init|inforead|(add|remove)handle|getcontent|exec))\b
        name: support.function.curl.sa
      - match: (?i)\b(strtotime|str[fp]time|checkdate|time|timezonename(fromabbr|get)|idate|timezone((location|offset|transitions|version)get|(abbreviations|identifiers)list|open)|date((sun(rise|set)|suninfo|sub|create((immutable)?fromformat)?|timestamp(get|set)|timezone(get|set)|timeset|isodateset|interval(createfromdatestring|format)|offsetget|diff|defaulttimezone(get|set)|dateset|parse(fromformat)?|format|add|getlasterrors|modify))?|localtime|get(date|timeofday)|gm(strftime|date|mktime)|microtime|mktime)\b
        name: support.function.datetime.sa
      - match: (?i)\bdba(sync|handlers|nextkey|close|insert|optimize|open|delete|popen|exists|keysplit|firstkey|fetch|list|replace)\b
        name: support.function.dba.sa
      - match: (?i)\bdbx(sort|connect|compare|close|escapestring|error|query|fetchrow)\b
        name: support.function.dbx.sa
      - match: (?i)\b(scandir|chdir|chroot|closedir|opendir|dir|rewinddir|readdir|getcwd)\b
        name: support.function.dir.sa
      - match: (?i)\beio(sync(fs)?|syncfilerange|symlink|stat(vfs)?|sendfile|setminparallel|setmax(idle|poll(reqs|time)|parallel)|seek|n(threads|op|pending|reqs|ready)|chown|chmod|custom|close|cancel|truncate|init|open|dup2|unlink|utime|poll|eventloop|f(sync|stat(vfs)?|chown|chmod|truncate|datasync|utime|allocate)|write|lstat|link|rename|realpath|read(ahead|dir|link)?|rmdir|get(eventstream|lasterror)|grp((add|cancel|limit))?|mknod|mkdir|busy)\b
        name: support.function.eio.sa
      - match: (?i)\benchant(dict(storereplacement|suggest|check|isinsession|describe|quickcheck|addto(personal|session)|geterror)|broker(setordering|init|dictexists|describe|free(dict)?|listdicts|request(pwl)?dict|geterror))\b
        name: support.function.enchant.sa
      - match: (?i)\b(split(i)?|sqlregcase|ereg(i)?(replace)?)\b
        name: support.function.ereg.sa
      - match: (?i)\b((restore|set)(errorhandler|exceptionhandler)|triggererror|debug(print)?backtrace|usererror|error(log|reporting|getlast))\b
        name: support.function.errorfunc.sa
      - match: (?i)\b(shellexec|system|passthru|proc(nice|close|terminate|open|getstatus)|escapeshell(arg|cmd)|exec)\b
        name: support.function.exec.sa
      - match: (?i)\b(exif(thumbnail|tagname|imagetype|readdata)|readexifdata)\b
        name: support.function.exif.sa
      - match: (?i)\bfann((duplicate|length|merge|shuffle|subset)traindata|scale(train(data)?|(input|output)(traindata)?)|set(scalingparams|sarprop(steperror(shift|thresholdfactor)|temperature|weightdecayshift)|cascade(numcandidategroups|candidate(changefraction|limit|stagnationepochs)|output(changefraction|stagnationepochs)|weightmultiplier|activation(functions|steepnesses)|(max|min)(cand|out)epochs)|callback|trainingalgorithm|train(error|stop)function|(input|output)scalingparams|errorlog|quickprop(decay|mu)|weight(array)?|learning(momentum|rate)|bitfaillimit|activation(function|steepness)((hidden|layer|output))?|rprop((decrease|increase)factor|delta(max|min|zero)))|save(train)?|num(input|output)traindata|copy|clearscalingparams|cascadetrainon(file|data)|create((sparse|shortcut|standard)(array)?|train(fromcallback)?|fromfile)|test(data)?|train((on(file|data)|epoch))?|initweights|descale(input|output|train)|destroy(train)?|printerror|run|reset(MSE|err(no|str))|readtrainfromfile|randomizeweights|get(sarprop(steperror(shift|thresholdfactor)|temperature|weightdecayshift)|num(input|output|layers)|networktype|MSE|connection(array|rate)|biasarray|bitfail(limit)?|cascade(num(candidates|candidategroups)|(candidate|output)(changefraction|limit|stagnationepochs)|weightmultiplier|activation(functions|steepnesses)(count)?|(max|min)(cand|out)epochs)|total(connections|neurons)|trainingalgorithm|train(error|stop)function|err(no|str)|quickprop(decay|mu)|learning(momentum|rate)|layerarray|activation(function|steepness)|rprop((decrease|increase)factor|delta(max|min|zero))))\b
        name: support.function.fann.sa
      - match: (?i)\b(symlink|stat|setfilebuffer|chown|chgrp|chmod|copy|clearstatcache|touch|tempnam|tmpfile|is(dir|(uploaded)?file|executable|link|readable|writ(e)?able)|disk(free|total)space|diskfreespace|dirname|delete|unlink|umask|pclose|popen|pathinfo|parseini(file|string)|fscanf|fstat|fseek|fnmatch|fclose|ftell|ftruncate|file(size|[acm]time|type|inode|owner|perms|group)?|file(exists|(get|put)contents)|f(open|puts|putcsv|passthru|eof|flush|write|lock|read|gets(s)?|getc(sv)?)|lstat|lchown|lchgrp|link(info)?|rename|rewind|read(file|link)|realpath(cache(get|size))?|rmdir|glob|moveuploadedfile|mkdir|basename)\b
        name: support.function.file.sa
      - match: (?i)\b(finfo(setflags|close|open|file|buffer)|mimecontenttype)\b
        name: support.function.fileinfo.sa
      - match: (?i)\bfilter(hasvar|input(array)?|id|var(array)?|list)\b
        name: support.function.filter.sa
      - match: (?i)\bfastcgifinishrequest\b
        name: support.function.fpm.sa
      - match: (?i)\b(calluser(func|method)(array)?|createfunction|unregistertickfunction|forwardstaticcall(array)?|functionexists|func(numargs|getarg(s)?)|register(shutdown|tick)function|getdefinedfunctions)\b
        name: support.function.funchand.sa
      - match: (?i)\b((n)?gettext|textdomain|d((n)?gettext|c(n)?gettext)|bind(textdomain|textdomaincodeset))\b
        name: support.function.gettext.sa
      - match: (?i)\bgmp(scan[01]|strval|sign|sub|setbit|sqrt(rem)?|hamdist|neg|nextprime|com|clrbit|cmp|testbit|intval|init|invert|import|or|div(exact)?|div(q|qr|r)|jacobi|popcount|pow(m)?|perfectsquare|probprime|export|fact|legendre|and|add|abs|root(rem)?|random((bits|range))?|gcd(ext)?|xor|mod|mul)\b
        name: support.function.gmp.sa
      - match: (?i)\bhash((hmac(file)?|copy|init|update((file|stream))?|pbkdf2|equals|file|final|algos))?\b
        name: support.function.hash.sa
      - match: (?i)\b(http(support|send(status|stream|content(disposition|type)|data|file|lastmodified)|head|negotiate(charset|contenttype|language)|chunkeddecode|cache(etag|lastmodified)|throttle|inflate|deflate|date|post(data|fields)|put(data|file|stream)|persistenthandles(count|clean|ident)|parse(cookie|headers|message|params)|redirect|request((method(exists|name|(un)?register)|bodyencode))?|get(request(headers|body(stream)?))?|match(etag|modified|requestheader)|build(cookie|str|url))|ob(etag|deflate|inflate)handler)\b
        name: support.function.http.sa
      - match: (?i)\b(iconv((str(pos|len|rpos)|substr|(get|set)encoding|mime(decode(headers)?|encode)))?|obiconvhandler)\b
        name: support.function.iconv.sa
      - match: (?i)\biis((start|stop)(service|server)|set(scriptmap|serverrights|dirsecurity|appsettings)|(add|remove)server|get(scriptmap|servicestate|server(rights|by(comment|path))|dirsecurity))\b
        name: support.function.iisfunc.sa
      - match: (?i)\b(iptc(embed|parse)|(jpeg|png)2wbmp|gdinfo|getimagesize(fromstring)?|image(s[xy]|scale|(char|string)(up)?|set(style|thickness|tile|interpolation|pixel|brush)|savealpha|convolution|copy(resampled|resized|merge(gray)?)?|colors(forindex|total)|color(set|closest(alpha|hwb)?|transparent|deallocate|(allocate|exact|resolve)(alpha)?|at|match)|crop(auto)?|create(truecolor|from(string|jpeg|png|wbmp|webp|gif|gd(2(part)?)?|xpm|xbm))?|types|ttf(bbox|text)|truecolortopalette|istruecolor|interlace|2wbmp|destroy|dashedline|jpeg|typeto(extension|mimetype)|ps(slantfont|text|(encode|extend|free|load)font|bbox)|png|polygon|palette(copy|totruecolor)|ellipse|ft(text|bbox)|filter|fill|filltoborder|filled(arc|ellipse|polygon|rectangle)|font(height|width)|flip|webp|wbmp|line|loadfont|layereffect|antialias|affine(matrix(concat|get))?|alphablending|arc|rotate|rectangle|gif|gd(2)?|gammacorrect|grab(screen|window)|xbm))\b
        name: support.function.image.sa
      - match: (?i)\b(sysgettempdir|set(timelimit|includepath|magicquotesruntime)|cli(get|set)processtitle|ini(alter|get(all)?|restore|set)|zend(threadid|version|logoguid)|dl|php(credits|info|version)|php(sapiname|ini(scannedfiles|loadedfile)|uname|logoguid)|putenv|extensionloaded|versioncompare|assert(options)?|restoreincludepath|gc(collectcycles|disable|enable(d)?)|getopt|get(cfgvar|currentuser|definedconstants|extensionfuncs|includepath|includedfiles|loadedextensions|magicquotes(gpc|runtime)|requiredfiles|resources)|get(env|lastmod|rusage|my(inode|[gup]id))|memoryget(peak)?usage|main|magicquotesruntime)\b
        name: support.function.info.sa
      - match: (?i)\bibase(seteventhandler|service(attach|detach)|serverinfo|num(fields|params)|nameresult|connect|commit(ret)?|close|trans|deleteuser|dropdb|dbinfo|pconnect|paraminfo|prepare|err(code|msg)|execute|query|fieldinfo|fetch(assoc|object|row)|free(eventhandler|query|result)|waitevent|adduser|affectedrows|rollback(ret)?|restore|genid|modifyuser|maintaindb|backup|blob(cancel|close|create|import|info|open|echo|add|get))\b
        name: support.function.interbase.sa
      - match: (?i)\b(normalizer(normalize|isnormalized)|idnto(unicode|utf8|ascii)|numfmt(set(symbol|(text)?attribute|pattern)|create|(parse|format)(currency)?|get(symbol|(text)?attribute|pattern|error(code|message)|locale))|collator(sort(withsortkeys)?|set(attribute|strength)|compare|create|asort|get(strength|sortkey|error(code|message)|locale|attribute))|transliterator(create((inverse|fromrules))?|transliterate|listids|geterror(code|message))|intl(cal|tz)geterror(code|message)|intl(isfailure|errorname|geterror(code|message))|datefmt(set(calendar|lenient|pattern|timezone(id)?)|create|islenient|parse|format(object)?|localtime|get(calendar(object)?|time(type|zone(id)?)|datetype|pattern|error(code|message)|locale))|locale(setdefault|compose|canonicalize|parse|filtermatches|lookup|acceptfromhttp|get(script|display(script|name|variant|language|region)|default|primarylanguage|keywords|allvariants|region))|resourcebundle(create|count|locales|get((error(code|message)))?)|grapheme(str(i?str|r?i?pos|len)|substr|extract)|msgfmt(setpattern|create|(format|parse)(message)?|get(pattern|error(code|message)|locale)))\b
        name: support.function.intl.sa
      - match: (?i)\bjson(decode|encode|lasterror(msg)?)\b
        name: support.function.json.sa
      - match: (?i)\bldap(start|tls|sort|search|saslbind|set(option|rebindproc)|(first|next)(attribute|entry|reference)|connect|controlpagedresult(response)?|countentries|compare|close|t61to8859|8859tot61|dn2ufn|delete|unbind|parse(reference|result)|escape|errno|err2str|error|explodedn|bind|freeresult|list|add|rename|read|get(option|dn|entries|values(len)?|attributes)|modify(batch)?|mod(add|del|replace))\b
        name: support.function.ldap.sa
      - match: (?i)\blibxml(set(streamscontext|externalentityloader)|clearerrors|disableentityloader|useinternalerrors|get(errors|lasterror))\b
        name: support.function.libxml.sa
      - match: (?i)\b(ezmlmhash|mail)\b
        name: support.function.mail.sa
      - match: (?i)\b((a)?(cos|sin|tan)(h)?|sqrt|srand|hypot|hexdec|ceil|is(nan|(in)?finite)|octdec|dec(hex|oct|bin)|deg2rad|pi|pow|exp(m1)?|floor|fmod|lcgvalue|log(1(p|0))?|atan2|abs|round|rand|rad2deg|getrandmax|mt(srand|rand|getrandmax)|max|min|bindec|baseconvert)\b
        name: support.function.math.sa
      - match: (?i)\bmb(str(cut|str|to(lower|upper)|istr|ipos|imwidth|pos|width|len|rchr|richr|ripos|rpos)|substitutecharacter|substr(count)?|split|sendmail|http(input|output)|checkencoding|convert(case|encoding|kana|variables)|internalencoding|outputhandler|decode(numericentity|mimeheader)|detect(encoding|order)|parsestr|preferredmimename|encodingaliases|encode(numericentity|mimeheader)|ereg(i(replace)?)?|ereg(search((get(pos|regs)|init|regs|(set)?pos))?|replace(callback)?|match)|listencodings|language|regex(setoptions|encoding)|getinfo)\b
        name: support.function.mbstring.sa
      - match: (?i)\b(mcrypt(cfb|createiv|cbc|ofb|decrypt|encrypt|ecb|list(algorithms|modes)|generic(((de)?init|end))?|enc(selftest|isblock(algorithm|algorithmmode|mode)|get(supportedkeysizes|(block|iv|key)size|(algorithms|modes)name))|get(ciphername|(block|iv|key)size)|module(close|selftest|isblock(algorithm|algorithmmode|mode)|open|get(supportedkeysizes|algo(block|key)size)))|mdecryptgeneric)\b
        name: support.function.mcrypt.sa
      - match: (?i)\bmemcachedebug\b
        name: support.function.memcache.sa
      - match: (?i)\bmhash((count|keygens2k|get(hashname|blocksize)))?\b
        name: support.function.mhash.sa
      - match: (?i)\b(log(cmd(insert|delete|update)|killcursor|writebatch|reply|getmore)|bson(decode|encode))\b
        name: support.function.mongo.sa
      - match: (?i)\bmysql(stat|setcharset|selectdb|num(fields|rows)|connect|clientencoding|close|createdb|escapestring|threadid|tablename|insertid|info|dataseek|dropdb|db(name|query)|unbufferedquery|pconnect|ping|errno|error|query|field(seek|name|type|table|flags|len)|fetch(object|field|lengths|assoc|array|row)|freeresult|list(tables|dbs|processes|fields)|affectedrows|result|realescapestring|get(client|host|proto|server)info)\b
        name: support.function.mysql.sa
      - match: (?i)\bmysqli(sslset|storeresult|stat|send(query|longdata)|set(charset|opt|localinfile(default|handler))|stmt(storeresult|sendlongdata|nextresult|close|init|dataseek|prepare|execute|fetch|freeresult|attr(get|set)|resultmetadata|reset|get(result|warnings)|moreresults|bind(param|result))|selectdb|slavequery|savepoint|nextresult|changeuser|charactersetname|connect|commit|clientencoding|close|threadsafe|init|options|(enable|disable)(readsfrommaster|rplparse)|dumpdebuginfo|debug|dataseek|useresult|ping|poll|paramcount|prepare|escapestring|execute|embeddedserver(start|end)|kill|query|fieldseek|freeresult|autocommit|rollback|report|refresh|fetch((object|fields|field(direct)?|assoc|all|array|row))?|rpl(parseenabled|probe|querytype)|releasesavepoint|reapasyncquery|real(connect|escapestring|query)|moreresults|multiquery|get(charset|connectionstats|client(stats|info|version)|cachestats|warnings|linksstats|metadata)|masterquery|bind(param|result)|begintransaction)\b
        name: support.function.mysqli.sa
      - match: (?i)\bmysqlndmemcache(set|getconfig)\b
        name: support.function.mysqlnd-memcache.sa
      - match: (?i)\bmysqlndms(set(userpickserver|qos)|dumpservers|queryisselect|fabricselect(shard|global)|get(stats|last(usedconnection|gtid))|xa(commit|rollback|gc|begin)|matchwild)\b
        name: support.function.mysqlnd-ms.sa
      - match: (?i)\bmysqlndqc(set(storagehandler|cachecondition|isselect|userhandlers)|clearcache|get(normalizedquerytracelog|corestats|cacheinfo|querytracelog|availablehandlers))\b
        name: support.function.mysqlnd-qc.sa
      - match: (?i)\bmysqlnduh(set(statement|connection)proxy|converttomysqlnd)\b
        name: support.function.mysqlnd-uh.sa
      - match: (?i)\b(syslog|socket(set(blocking|timeout)|getstatus)|set(raw)?cookie|httpresponsecode|openlog|headers(list|sent)|header((registercallback|remove))?|checkdnsrr|closelog|inet(ntop|pton)|ip2long|openlog|dns(checkrecord|get(record|mx))|definesyslogvariables|(p)?fsockopen|long2ip|get(servby(name|port)|host(name|by(name(l)?|addr))|protoby(name|number)|mxrr))\b
        name: support.function.network.sa
      - match: (?i)\bnsapi(virtual|responseheaders|requestheaders)\b
        name: support.function.nsapi.sa
      - match: (?i)\b(oci(statementtype|setprefetch|serverversion|savelob(file)?|numcols|new(collection|cursor|descriptor)|nlogon|column(scale|size|name|type(raw)?|isnull|precision)|coll(size|trim|assign(elem)?|append|getelem|max)|commit|closelob|cancel|internaldebug|definebyname|plogon|parse|error|execute|fetch(statement|into)?|free(statement|collection|cursor|desc)|write(temporarylob|lobtofile)|loadlob|log(on|off)|rowcount|rollback|result|bindbyname)|oci(statementtype|set(client(info|identifier)|prefetch|edition|action|modulename)|serverversion|num(fields|rows)|new(connect|collection|cursor|descriptor)|connect|commit|clientversion|close|cancel|internaldebug|definebyname|pconnect|passwordchange|parse|error|execute|bind(array)?byname|field(scale|size|name|type(raw)?|isnull|precision)|fetch((object|assoc|all|array|row))?|free(statement|descriptor)|lob(copy|isequal)|rollback|result|getimplicitresultset))\b
        name: support.function.oci8.sa
      - match: (?i)\bopcache(compilefile|invalidate|reset|get(status|configuration))\b
        name: support.function.opcache.sa
      - match: (?i)\bopenssl(sign|spki(new|export(challenge)?|verify)|seal|csr(sign|new|export(tofile)?|get(subject|publickey))|cipherivlength|open|dhcomputekey|digest|decrypt|public(decrypt|encrypt)|encrypt|errorstring|pkcs12(export(tofile)?|read)|pkcs7(sign|decrypt|encrypt|verify)|verify|freekey|randompseudobytes|pkey(new|export(tofile)?|free|get(details|public|private))|private(decrypt|encrypt)|pbkdf2|get((cipher|md)methods|certlocations|(public|private)key)|x509(checkprivatekey|checkpurpose|parse|export(tofile)?|fingerprint|free|read))\b
        name: support.function.openssl.sa
      - match: (?i)\b(output(addrewritevar|resetrewritevars)|flush|ob(start|clean|implicitflush|end(clean|flush)|flush|listhandlers|gzhandler|get(status|contents|clean|flush|length|level)))\b
        name: support.function.output.sa
      - match: (?i)\bpassword(hash|needsrehash|verify|getinfo)\b
        name: support.function.password.sa
      - match: (?i)\bpcntl(strerror|signal(dispatch)?|sig(timedwait|procmask|waitinfo)|setpriority|errno|exec|fork|w(stopsig|termsig|if(stopped|signaled|exited))|wait(pid)?|alarm|getpriority|getlasterror)\b
        name: support.function.pcntl.sa
      - match: (?i)\bpg(socket|send(prepare|execute|query(params)?)|set(clientencoding|errorverbosity)|select|host|num(fields|rows)|consumeinput|connection(status|reset|busy)|connect(poll)?|convert|copy(from|to)|clientencoding|close|cancelquery|tty|transactionstatus|trace|insert|options|delete|dbname|untrace|unescapebytea|update|pconnect|ping|port|putline|parameterstatus|prepare|version|query(params)?|escape(string|identifier|literal|bytea)|endcopy|execute|flush|freeresult|last(notice|error|oid)|field(size|num|name|type(oid)?|table|isnull|prtlen)|affectedrows|result(status|seek|error(field)?)|fetch(object|assoc|all(columns)?|array|row|result)|get(notify|pid|result)|metadata|lo(seek|close|create|tell|truncate|import|open|unlink|export|write|read(all)?)|)\b
        name: support.function.pgsql.sa
      - match: (?i)\b(virtual|getallheaders|apache((get|set)env|note|childterminate|lookupuri|responseheaders|resettimeout|requestheaders|get(version|modules)))\b
        name: support.function.saapache.sa
      - match: (?i)\bdomimportsimplexml\b
        name: support.function.sadom.sa
      - match: (?i)\bftp(sslconnect|systype|site|size|setoption|nlist|nb(continue|f?(put|get))|ch(dir|mod)|connect|cdup|close|delete|put|pwd|pasv|exec|quit|f(put|get)|login|alloc|rename|raw(list)?|rmdir|get(option)?|mdtm|mkdir)\b
        name: support.function.saftp.sa
      - match: (?i)\bimap((create|delete|list|rename|scan)(mailbox)?|status|sort|subscribe|setquota|set(flagfull|acl)|search|savebody|num(recent|msg)|check|close|clearflagfull|thread|timeout|open|header(info)?|headers|append|alerts|reopen|8bit|unsubscribe|undelete|utf7(decode|encode)|utf8|uid|ping|errors|expunge|qprint|gc|fetch(structure|header|text|mime|body)|fetchoverview|lsub|list(scan|subscribed)|lasterror|rfc822(parse(headers|adrlist)|writeaddress)|get(subscribed|acl|mailboxes)|getquota(root)?|msgno|mimeheaderdecode|mail(copy|compose|move)|mail|mailboxmsginfo|binary|body(struct)?|base64)\b
        name: support.function.saimap.sa
      - match: (?i)\bmssql(selectdb|num(fields|rows)|nextresult|connect|close|init|dataseek|pconnect|execute|query|field(seek|name|type|length)|fetch(object|field|assoc|array|row|batch)|free(statement|result)|rowsaffected|result|guidstring|getlastmessage|min(error|message)severity|bind)\b
        name: support.function.samssql.sa
      - match: (?i)\bodbc(statistics|specialcolumns|setoption|num(fields|rows)|nextresult|connect|columns|columnprivileges|commit|cursor|close(all)?|tables|tableprivileges|do|datasource|pconnect|primarykeys|procedures|procedurecolumns|prepare|error(msg)?|exec(ute)?|field(scale|num|name|type|precision|len)|foreignkeys|freeresult|fetch(into|object|array|row)|longreadlen|autocommit|rollback|result(all)?|gettypeinfo|binmode)\b
        name: support.function.saodbc.sa
      - match: (?i)\bpreg(split|quote|filter|lasterror|replace(callback)?|grep|match(all)?)\b
        name: support.function.sapcre.sa
      - match: (?i)\b(spl(classes|objecthash|autoload((call|unregister|extensions|functions|register))?)|class(implements|uses|parents)|iterator(count|toarray|apply))\b
        name: support.function.saspl.sa
      - match: (?i)\bzip(close|open|entry(name|compressionmethod|compressedsize|close|open|filesize|read)|read)\b
        name: support.function.sazip.sa
      - match: (?i)\bposix(strerror|set(s|e?u|[ep]?g)id|ctermid|ttyname|times|isatty|initgroups|uname|errno|kill|access|get(sid|cwd|uid|pid|ppid|pwnam|pwuid|pgid|pgrp|euid|egid|login|rlimit|gid|grnam|groups|grgid)|getlasterror|mknod|mkfifo)\b
        name: support.function.posix.sa
      - match: (?i)\bset(thread|proc)title\b
        name: support.function.proctitle.sa
      - match: (?i)\bpspell(storereplacement|suggest|savewordlist|new((config|personal))?|check|clearsession|config(saverepl|create|ignore|(data|dict)dir|personal|runtogether|repl|mode)|addto(session|personal))\b
        name: support.function.pspell.sa
      - match: (?i)\breadline((completionfunction|clearhistory|callback(handler(install|remove)|readchar)|info|onnewline|writehistory|listhistory|addhistory|redisplay|readhistory))?\b
        name: support.function.readline.sa
      - match: (?i)\brecode((string|file))?\b
        name: support.function.recode.sa
      - match: (?i)\brrd(cdisconnect|(create|tune|info|update|error|version|first|fetch|last(update)?|restore|graph|xport))\b
        name: support.function.rrd.sa
      - match: (?i)\b(shm((get|has|remove|put)var|detach|attach|remove)|sem(acquire|release|remove|get)|ftok|msg((get|remove|set|stat)queue|send|queueexists|receive))\b
        name: support.function.sem.sa
      - match: (?i)\bsession(status|start|set(savehandler|cookieparams)|savepath|name|commit|cache(expire|limiter)|isregistered|id|destroy|decode|unset|unregister|encode|writeclose|abort|reset|register(shutdown)?|regenerateid|getcookieparams|modulename)\b
        name: support.function.session.sa
      - match: (?i)\bshmop(size|close|open|delete|write|read)\b
        name: support.function.shmop.sa
      - match: (?i)\bsimplexml(importdom|load(string|file))\b
        name: support.function.simplexml.sa
      - match: (?i)\b(snmp(walk(oid)?|realwalk|get(next)?|set)|snmp(set(valueretrieval|quickprint|enumprint|oid(numericprint|outputformat))|readmib|get(valueretrieval|quickprint))|snmp[23](set|walk|realwalk|get(next)?))\b
        name: support.function.snmp.sa
      - match: (?i)\b(issoapfault|usesoaperrorhandler)\b
        name: support.function.soap.sa
      - match: (?i)\bsocket(shutdown|strerror|send(to|msg)?|set((non)?block|option)|select|connect|close|clearerror|bind|create((pair|listen))?|cmsgspace|importstream|write|listen|lasterror|accept|recv(from|msg)?|read|get(peer|sock)name|getoption)\b
        name: support.function.sockets.sa
      - match: (?i)\bsqlite(singlequery|seek|has(more|prev)|num(fields|rows)|next|changes|column|current|close|create(aggregate|function)|open|unbufferedquery|udf(decode|encode)binary|popen|prev|escapestring|errorstring|exec|valid|key|query|fieldname|factory|fetch(string|single|columntypes|object|all|array)|lib(encoding|version)|last(insertrowid|error)|arrayquery|rewind|busytimeout)\b
        name: support.function.sqlite.sa
      - match: (?i)\bsqlsrv(sendstreamdata|serverinfo|hasrows|num(fields|rows)|nextresult|connect|configure|commit|clientinfo|close|cancel|prepare|errors|execute|query|fieldmetadata|fetch((array|object))?|freestmt|rowsaffected|rollback|get(config|field)|begintransaction)\b
        name: support.function.sqlsrv.sa
      - match: (?i)\bstats(harmonicmean|covariance|standarddeviation|skew|cdf(noncentral(chisquare|f)|negativebinomial|chisquare|cauchy|t|uniform|poisson|exponential|f|weibull|logistic|laplace|gamma|binomial|beta)|stat(noncentralt|correlation|innerproduct|independentt|powersum|percentile|pairedt|gennch|binomialcoef)|dens(normal|negativebinomial|chisquare|cauchy|t|pmf(hypergeometric|poisson|binomial)|exponential|f|weibull|logistic|laplace|gamma|beta)|denuniform|variance|kurtosis|absolutedeviation|rand(setall|phrasetoseeds|ranf|getseeds|gen(noncentral[ft]|noncenralchisquare|normal|chisquare|t|int|i(uniform|poisson|binomial(negative)?)|exponential|f(uniform)?|gamma|beta)))\b
        name: support.function.stats.sa
      - match: (?i)\b(setsocketblocking|stream(socket(shutdown|sendto|server|client|pair|enablecrypto|accept|recvfrom|getname)|set(chunksize|timeout|(read|write)buffer|blocking)|select|notificationcallback|supportslock|context(set(option|default|params)|create|get(options|default|params))|copytostream|islocal|encoding|filter(append|prepend|register|remove)|wrapper((un)?register|restore)|resolveincludepath|registerwrapper|get(contents|transports|filters|wrappers|line|metadata)|bucket(new|prepend|append|makewriteable)))\b
        name: support.function.streamsfuncs.sa
      - match: (?i)\b(moneyformat|md5(file)?|metaphone|bin2hex|sscanf|sha1(file)?|str(str|c?spn|n(at)?(case)?cmp|chr|coll|(case)?cmp|to(upper|lower)|tok|tr|istr|pos|pbrk|len|rchr|ri?pos|rev)|str(getcsv|ireplace|pad|repeat|replace|rot13|shuffle|split|wordcount)|strip(c?slashes|os)|striptags|similartext|soundex|substr((count|compare|replace))?|setlocale|html(specialchars(decode)?|entities)|htmlentitydecode|hex2bin|hebrev(c)?|numberformat|nl2br|nllanginfo|chop|chunksplit|chr|convert(cyrstring|uu(decode|encode))|countchars|crypt|crc32|trim|implode|ord|uc(first|words)|join|parsestr|print(f)?|echo|explode|v?[fs]?printf|quotedprintable(decode|encode)|quotemeta|wordwrap|lcfirst|[lr]trim|localeconv|levenshtein|addc?slashes|gethtmltranslationtable)\b
        name: support.function.string.sa
      - match: (?i)\bsybase(setmessagehandler|selectdb|num(fields|rows)|connect|close|deadlockretrycount|dataseek|unbufferedquery|pconnect|query|fieldseek|fetch(object|field|assoc|array|row)|freeresult|affectedrows|result|getlastmessage|min(client|error|message|server)severity)\b
        name: support.function.sybase.sa
      - match: (?i)\b(taint|istainted|untaint)\b
        name: support.function.taint.sa
      - match: (?i)\b(tidy((get|set)opt|setencoding|saveconfig|configcount|cleanrepair|is(xhtml|xml)|diagnose|(access|error|warning)count|loadconfig|resetconfig|(parse|repair)(string|file)|get(status|html(ver)?|head|config|output|optdoc|root|release|body))|obtidyhandler)\b
        name: support.function.tidy.sa
      - match: (?i)\btoken(name|getall)\b
        name: support.function.tokenizer.sa
      - match: (?i)\btrader(stoch(f|r|rsi)?|stddev|sin(h)?|sum|sub|set(compat|unstableperiod)|sqrt|sar(ext)?|sma|ht(sine|trend(line|mode)|dc(period|phase)|phasor)|natr|cci|cos(h)?|correl|cdl(shootingstar|shortline|sticksandwich|stalledpattern|spinningtop|separatinglines|hikkake(mod)?|highwave|homingpigeon|hangingman|harami(cross)?|hammer|concealbabyswall|counterattack|closingmarubozu|thrusting|tasukigap|takuri|tristar|inneck|invertedhammer|identical3crows|2crows|onneck|doji(star)?|darkcloudcover|dragonflydoji|unique3river|upsidegap2crows|3(starsinsouth|inside|outside|whitesoldiers|linestrike|blackcrows)|piercing|engulfing|evening(doji)?star|kicking(bylength)?|longline|longleggeddoji|ladderbottom|advanceblock|abandonedbaby|risefall3methods|rickshawman|gapsidesidewhite|gravestonedoji|xsidegap3methods|morning(doji)?star|mathold|matchinglow|marubozu|belthold|breakaway)|ceil|cmo|tsf|typprice|t3|tema|tan(h)?|trix|trima|trange|obv|div|dema|dx|ultosc|ppo|plusd[im]|errno|exp|ema|var|kama|floor|wclprice|willr|wma|ln|log10|bop|beta|bbands|linearreg((slope|intercept|angle))?|asin|acos|atan|atr|adosc|ad|add|adx(r)?|apo|avgprice|aroon(osc)?|rsi|roc|rocp|rocr(100)?|get(compat|unstableperiod)|min(index)?|minusd[im]|minmax(index)?|mid(point|price)|mom|mult|medprice|mfi|macd(ext|fix)?|mavp|max(index)?|ma(ma)?)\b
        name: support.function.trader.sa
      - match: (?i)\buopz(copy|compose|implement|overload|delete|undefine|extend|function|flags|restore|rename|redefine|backup)\b
        name: support.function.uopz.sa
      - match: (?i)\b(httpbuildquery|(raw)?url(decode|encode)|parseurl|get(headers|metatags)|base64(decode|encode))\b
        name: support.function.url.sa
      - match: (?i)\b(strval|settype|serialize|(bool|double|float)val|debugzvaldump|intval|importrequestvariables|isset|is(scalar|string|null|numeric|callable|int(eger)?|object|double|float|long|array|resource|real|bool)|unset|unserialize|printr|empty|var(dump|export)|gettype|get(definedvars|resourcetype))\b
        name: support.function.var.sa
      - match: (?i)\bwddx(serialize(value|vars)|deserialize|packet(start|end)|addvars)\b
        name: support.function.wddx.sa
      - match: (?i)\bxhprof(sample)?(disable|enable)\b
        name: support.function.xhprof.sa
      - match: (?i)\b(utf8(decode|encode)|xml(set((notation|(end|start)namespace|unparsedentity)declhandler|(characterdata|default|element|externalentityref|processinginstruction)handler|object)|parse(intostruct)?|parser((get|set)option|create(ns)?|free)|errorstring|get(current((column|line)number|byteindex)|errorcode)))\b
        name: support.function.xml.sa
      - match: (?i)\bxmlrpc(server(callmethod|create|destroy|addintrospectiondata|register(introspectioncallback|method))|isfault|decode(request)?|parsemethoddescriptions|encode(request)?|(get|set)type)\b
        name: support.function.xmlrpc.sa
      - match: (?i)\bxmlwriter((end|start|write)(comment|cdata|dtd((attlist|entity|element))?|document|pi|attribute|element)|(start|write)(attribute|element)ns|writeraw|setindent(string)?|text|outputmemory|open(memory|uri)|fullendelement|flush|)\b
        name: support.function.xmlwriter.sa
      - match: (?i)\b(zlib(decode|encode|getcodingtype)|readgzfile|gz(seek|compress|close|tell|inflate|open|decode|deflate|uncompress|puts|passthru|encode|eof|file|write|rewind|read|getc|getss?))\b
        name: support.function.zlib.sa
      - match: (?i)\bisint(eger)?\b
        name: support.function.alias.sa
      - match: (?i)\s*\b(abbreviate|abs|acos|acosh|addNA|addTaskCallback|agrep|agrepl|alist|all|allequal|allequalcharacter|allequaldefault|allequalenvironment|allequalenvRefClass|allequalfactor|allequalformula|allequallanguage|allequallist|allequalnumeric|allequalPOSIXt|allequalraw|allnames|allvars|any|anyDuplicated|anyDuplicatedarray|anyDuplicateddataframe|anyDuplicateddefault|anyDuplicatedmatrix|anyNA|anyNAnumericversion|anyNAPOSIXlt|aperm|apermdefault|apermtable|append|apply|Arg|args|array|arrayInd|asarray|asarraydefault|ascall|ascharacter|ascharactercondition|ascharacterDate|ascharacterdefault|ascharactererror|ascharacterfactor|ascharacterhexmode|ascharacternumericversion|ascharacteroctmode|ascharacterPOSIXt|ascharactersrcref|ascomplex|asdataframe|asdataframearray|asdataframeAsIs|asdataframecharacter|asdataframecomplex|asdataframedataframe|asdataframeDate|asdataframedefault|asdataframedifftime|asdataframefactor|asdataframeinteger|asdataframelist|asdataframelogical|asdataframematrix|asdataframemodelmatrix|asdataframenoquote|asdataframenumeric|asdataframenumericversion|asdataframeordered|asdataframePOSIXct|asdataframePOSIXlt|asdataframeraw|asdataframetable|asdataframets|asdataframevector|asDate|asDatecharacter|asDatedate|asDatedates|asDatedefault|asDatefactor|asDatenumeric|asDatePOSIXct|asDatePOSIXlt|asdifftime|asdouble|asdoubledifftime|asdoublePOSIXlt|asenvironment|asexpression|asexpressiondefault|asfactor|asfunction|asfunctiondefault|ashexmode|asinteger|aslist|aslistdataframe|aslistDate|aslistdefault|aslistenvironment|aslistfactor|aslistfunction|aslistnumericversion|aslistPOSIXct|aslogical|aslogicalfactor|asmatrix|asmatrixdataframe|asmatrixdefault|asmatrixnoquote|asmatrixPOSIXlt|asname|asnull|asnulldefault|asnumeric|asnumericversion|asoctmode|asordered|aspackageversion|aspairlist|asPOSIXct|asPOSIXctdate|asPOSIXctDate|asPOSIXctdates|asPOSIXctdefault|asPOSIXctnumeric|asPOSIXctPOSIXlt|asPOSIXlt|asPOSIXltcharacter|asPOSIXltdate|asPOSIXltDate|asPOSIXltdates|asPOSIXltdefault|asPOSIXltfactor|asPOSIXltnumeric|asPOSIXltPOSIXct|asqr|asraw|assingle|assingledefault|assymbol|astable|astabledefault|asvector|asvectorfactor|asin|asinh|asNamespace|asS3|asS4|assign|atan|atan2|atanh|attach|attachNamespace|attr|attrallequal|attributes|autoload|autoloader|backsolve|baseenv|basename|besselI|besselJ|besselK|besselY|beta|bindingIsActive|bindingIsLocked|bindtextdomain|bitwAnd|bitwNot|bitwOr|bitwShiftL|bitwShiftR|bitwXor|body|bquote|break|browser|browserCondition|browserSetDebug|browserText|builtins|by|bydataframe|bydefault|bzfile|c|cDate|cdifftime|cnoquote|cnumericversion|cPOSIXct|cPOSIXlt|cwarnings|call|callCC|capabilities|casefold|cat|cbind|cbinddataframe|ceiling|charexpand|character|charmatch|charToRaw|chartr|checktzones|chkDots|chol|choldefault|chol2inv|choose|class|clearPushBack|close|closeconnection|closesrcfile|closesrcfilealias|closeAllConnections|col|colMeans|colnames|colSums|commandArgs|comment|complex|computeRestarts|conditionCall|conditionCallcondition|conditionMessage|conditionMessagecondition|conflicts|Conj|contributors|cos|cosh|cospi|crossprod|Cstackinfo|cummax|cummin|cumprod|cumsum|curlGetHeaders|cut|cutDate|cutdefault|cutPOSIXt|dataclass|dataframe|datamatrix|date|debug|debuggingState|debugonce|defaultstringsAsFactors|delayedAssign|deparse|det|detach|determinant|determinantmatrix|dget|diag|diff|diffDate|diffdefault|diffdifftime|diffPOSIXt|difftime|digamma|dim|dimdataframe|dimnames|dimnamesdataframe|dir|dircreate|direxists|dirname|docall|dontCheck|double|dput|dQuote|drop|droplevels|droplevelsdataframe|droplevelsfactor|dump|duplicated|duplicatedarray|duplicateddataframe|duplicateddefault|duplicatedmatrix|duplicatednumericversion|duplicatedPOSIXlt|duplicatedwarnings|dynload|dynunload|dynGet|eapply|eigen|emptyenv|enc2native|enc2utf8|encodeString|Encoding|endsWith|enquote|envprofile|environment|environmentIsLocked|environmentName|eval|evalparent|evalq|exists|exp|expandgrid|expm1|expression|extSoftVersion|factor|factorial|fifo|file|fileaccess|fileappend|filechoose|filecopy|filecreate|fileexists|fileinfo|filelink|filemode|filemtime|filepath|fileremove|filerename|fileshow|filesize|filesymlink|Filter|Find|findpackage|findInterval|findPackageEnv|findRestart|floor|flush|flushconnection|for|force|forceAndCall|formals|format|formatAsIs|formatdataframe|formatDate|formatdefault|formatdifftime|formatfactor|formathexmode|formatinfo|formatlibraryIQR|formatnumericversion|formatoctmode|formatpackageInfo|formatPOSIXct|formatPOSIXlt|formatpval|formatsummaryDefault|formatC|formatDL|forwardsolve|function|gamma|gc|gctime|gcinfo|gctorture|gctorture2|get|get0|getAllConnections|getCallingDLL|getCallingDLLe|getConnection|getDLLRegisteredRoutines|getDLLRegisteredRoutinescharacter|getDLLRegisteredRoutinesDLLInfo|getElement|geterrmessage|getExportedValue|getHook|getLoadedDLLs|getNamespace|getNamespaceExports|getNamespaceImports|getNamespaceInfo|getNamespaceName|getNamespaceUsers|getNamespaceVersion|getNativeSymbolInfo|getOption|getRversion|getSrcLines|getTaskCallbackNames|gettext|gettextf|getwd|gl|globalenv|gregexpr|grep|grepl|grepRaw|grouping|gsub|gzcon|gzfile|I|iconv|iconvlist|icuGetCollate|icuSetCollate|identical|identity|if|ifelse|Im|importIntoEnv|inherits|integer|interaction|interactive|intersect|intToBits|intToUtf8|inverserle|invisible|invokeRestart|invokeRestartInteractively|isarray|isatomic|iscall|ischaracter|iscomplex|isdataframe|isdouble|iselement|isenvironment|isexpression|isfactor|isfinite|isfunction|isinfinite|isinteger|islanguage|islist|isloaded|islogical|ismatrix|isna|isnadataframe|isnanumericversion|isnaPOSIXlt|isname|isnan|isnull|isnumeric|isnumericversion|isnumericDate|isnumericdifftime|isnumericPOSIXt|isobject|isordered|ispackageversion|ispairlist|isprimitive|isqr|isR|israw|isrecursive|issingle|issymbol|istable|isunsorted|isvector|isatty|isBaseNamespace|isdebugged|isIncomplete|isNamespace|isNamespaceLoaded|ISOdate|ISOdatetime|isOpen|isRestart|isS4|isSeekable|isSymmetric|isSymmetricmatrix|isTRUE|jitter|julian|julianDate|julianPOSIXt|kappa|kappadefault|kappalm|kappaqr|kronecker|l10ninfo|Lalibrary|Laversion|Lasvd|labels|labelsdefault|lapply|lazyLoad|lazyLoadDBexec|lazyLoadDBfetch|lbeta|lchoose|length|lengthPOSIXlt|lengths|levels|levelsdefault|lfactorial|lgamma|libcurlVersion|library|librarydynam|librarydynamunload|licence|license|list|listdirs|listfiles|list2env|load|loadedNamespaces|loadingNamespaceInfo|loadNamespace|local|lockBinding|lockEnvironment|log|log10|log1p|log2|logb|logical|lowertri|ls|makenames|makeunique|makeActiveBinding|Map|mapply|margintable|matorvec|match|matcharg|matchcall|matchfun|Mathdataframe|MathDate|Mathdifftime|Mathfactor|MathPOSIXt|matrix|max|maxcol|mean|meanDate|meandefault|meandifftime|meanPOSIXct|meanPOSIXlt|memlimits|memCompress|memDecompress|memoryprofile|merge|mergedataframe|mergedefault|message|mget|min|missing|Mod|mode|months|monthsDate|monthsPOSIXt|names|namesPOSIXlt|namespaceExport|namespaceImport|namespaceImportClasses|namespaceImportFrom|namespaceImportMethods|nargs|nchar|ncol|NCOL|Negate|newenv|next|NextMethod|ngettext|nlevels|noquote|norm|normalizePath|nrow|NROW|numeric|numericversion|nzchar|objects|oldClass|OlsonNames|onexit|open|openconnection|opensrcfile|opensrcfilealias|opensrcfilecopy|Opsdataframe|OpsDate|Opsdifftime|Opsfactor|Opsnumericversion|Opsordered|OpsPOSIXt|options|order|ordered|outer|packageversion|packageEvent|packageHasNamespace|packageStartupMessage|packBits|pairlist|parentenv|parentframe|parse|parseNamespaceFile|paste|paste0|pathexpand|pathpackage|pcreconfig|pipe|pmatch|pmax|pmaxint|pmin|pminint|polyroot|postoenv|Position|pretty|prettydefault|prettyNum|print|printAsIs|printby|printcondition|printconnection|printdataframe|printDate|printdefault|printdifftime|printDlist|printDLLInfo|printDLLInfoList|printDLLRegisteredRoutines|printeigen|printfactor|printfunction|printhexmode|printlibraryIQR|printlistof|printNativeRoutineList|printnoquote|printnumericversion|printoctmode|printpackageInfo|printPOSIXct|printPOSIXlt|printproctime|printrestart|printrle|printsimplelist|printsrcfile|printsrcref|printsummarytable|printsummaryDefault|printtable|printwarnings|prmatrix|proctime|prod|proptable|provideDimnames|psigamma|pushBack|pushBackLength|q|qr|qrcoef|qrdefault|qrfitted|qrQ|qrqty|qrqy|qrR|qrresid|qrsolve|qrX|quarters|quartersDate|quartersPOSIXt|quit|quote|Rsystemversion|Rhome|RVersion|range|rangedefault|rank|rapply|raw|rawConnection|rawConnectionValue|rawShift|rawToBits|rawToChar|rbind|rbinddataframe|rcond|Re|readdcf|readBin|readChar|readline|readLines|readRDS|readRenviron|Recall|Reduce|regfinalizer|regexec|regexpr|registerS3method|registerS3methods|regmatches|remove|removeTaskCallback|rep|replen|repDate|repfactor|repint|repnumericversion|repPOSIXct|repPOSIXlt|repeat|replace|replicate|require|requireNamespace|restartDescription|restartFormals|retracemem|return|returnValue|rev|revdefault|rle|rm|RNGkind|RNGversion|round|roundDate|roundPOSIXt|row|rownames|rownamesdataframe|rownamesdefault|rowMeans|rownames|rowsum|rowsumdataframe|rowsumdefault|rowSums|sample|sampleint|sapply|save|saveimage|saveRDS|scale|scaledefault|scan|search|searchpaths|seek|seekconnection|seq|seqalong|seqlen|seqDate|seqdefault|seqint|seqPOSIXt|sequence|serialize|setseed|setdiff|setequal|setHook|setNamespaceInfo|setSessionTimeLimit|setTimeLimit|setwd|showConnections|shQuote|sign|signalCondition|signif|simpleCondition|simpleError|simpleMessage|simpleWarning|simplify2array|sin|single|sinh|sink|sinknumber|sinpi|sliceindex|socketConnection|socketSelect|solve|solvedefault|solveqr|sort|sortdefault|sortint|sortlist|sortPOSIXlt|source|split|splitdataframe|splitDate|splitdefault|splitPOSIXct|sprintf|sqrt|sQuote|srcfile|srcfilealias|srcfilecopy|srcref|standardGeneric|startsWith|stderr|stdin|stdout|stop|stopifnot|storagemode|strftime|strptime|strrep|strsplit|strtoi|strtrim|structure|strwrap|sub|subset|subsetdataframe|subsetdefault|subsetmatrix|substitute|substr|substring|sum|summary|summaryconnection|summarydataframe|Summarydataframe|summaryDate|SummaryDate|summarydefault|Summarydifftime|summaryfactor|Summaryfactor|summarymatrix|Summarynumericversion|Summaryordered|summaryPOSIXct|SummaryPOSIXct|summaryPOSIXlt|SummaryPOSIXlt|summaryproctime|summarysrcfile|summarysrcref|summarytable|suppressMessages|suppressPackageStartupMessages|suppressWarnings|svd|sweep|switch|syscall|syscalls|Syschmod|SysDate|sysframe|sysframes|sysfunction|Sysgetenv|Sysgetlocale|Sysgetpid|Sysglob|Sysinfo|sysloadimage|Syslocaleconv|sysnframe|sysonexit|sysparent|sysparents|Sysreadlink|syssaveimage|Syssetenv|SyssetFileTime|Syssetlocale|Syssleep|syssource|sysstatus|Systime|Systimezone|Sysumask|Sysunsetenv|Syswhich|system|systemfile|systemtime|system2|t|tdataframe|tdefault|table|tabulate|tan|tanh|tanpi|tapply|taskCallbackManager|tcrossprod|tempdir|tempfile|testPlatformEquivalence|textConnection|textConnectionValue|tolower|topenv|toString|toStringdefault|toupper|trace|traceback|tracemem|tracingState|transform|transformdataframe|transformdefault|trigamma|trimws|trunc|truncDate|truncPOSIXt|truncate|truncateconnection|try|tryCatch|typeof|unclass|undebug|union|unique|uniquearray|uniquedataframe|uniquedefault|uniquematrix|uniquenumericversion|uniquePOSIXlt|uniquewarnings|units|unitsdifftime|unixtime|unlink|unlist|unloadNamespace|unlockBinding|unname|unserialize|unsplit|untrace|untracemem|unz|uppertri|url|UseMethod|utf8ToInt|validEnc|validUTF8|vapply|vector|Vectorize|warning|warnings|weekdays|weekdaysDate|weekdaysPOSIXt|which|whichmax|whichmin|while|with|withdefault|withAutoprint|withCallingHandlers|within|withindataframe|withinlist|withRestarts|withVisible|write|writedcf|writeBin|writeChar|writeLines|xor|xorhexmode|xoroctmode|xpdrowsdataframe|xtfrm|xtfrmAsIs|xtfrmDate|xtfrmdefault|xtfrmdifftime|xtfrmfactor|xtfrmnumericversion|xtfrmPOSIXct|xtfrmPOSIXlt|xtfrmSurv|xzfile|zapsmall)\s*\b
        name: support.function.r.sa
      - match: (?i)\s*\b(abline|arrows|assocplot|axis|Axis|axisDate|AxisDate|Axisdefault|axisPOSIXct|AxisPOSIXt|Axistable|axTicks|barplot|barplotdefault|box|boxplot|boxplotdefault|boxplotformula|boxplotmatrix|bxp|cdplot|cdplotdefault|cdplotformula|clip|closescreen|cointervals|contour|contourdefault|coplot|curve|dotchart|erasescreen|filledcontour|fourfoldplot|frame|grconvertX|grconvertY|grid|hist|histDate|histdefault|histPOSIXt|identify|identifydefault|image|imagedefault|layout|layoutshow|lcm|legend|lines|linesdefault|linesformula|lineshistogram|linestable|locator|matlines|matplot|matpoints|mosaicplot|mosaicplotdefault|mosaicplotformula|mtext|pairs|pairsdefault|pairsformula|panelsmooth|par|persp|perspdefault|pie|piechart|plot|plotdataframe|plotdefault|plotdesign|plotfactor|plotformula|plotfunction|plothistogram|plotnew|plotraster|plottable|plotwindow|plotxy|plotHclust|points|pointsdefault|pointsformula|pointstable|polygon|polypath|rasterImage|rect|rug|screen|segments|smoothScatter|spineplot|spineplotdefault|spineplotformula|splitscreen|stars|stem|strheight|stripchart|stripchartdefault|stripchartformula|strwidth|sunflowerplot|sunflowerplotdefault|sunflowerplotformula|symbols|text|textdefault|textformula|title|xinch|xspline|xyinch|yinch)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(adjustcolor|anyNAraster|asgraphicsAnnot|asmatrixraster|asraster|asrasterarray|asrastercharacter|asrasterlogical|asrastermatrix|asrasternumeric|asrasterraster|asrasterraw|axisTicks|bitmap|bmp|boxplotstats|c2to3|cairopdf|cairops|cairoVersion|checkforXQuartz|checkgstype|checkoptions|checkFont|checkFontCIDFont|checkFontdefault|checkFontType1Font|checkFontInUse|checkIntFormat|checkQuartzFont|checkX11Font|chromaticAdaptation|chull|CIDFont|cm|cmcolors|col2rgb|colorConverter|colorRamp|colorRampPalette|colors|colours|contourLines|convertColor|densCols|devcapabilities|devcapture|devcontrol|devcopy|devcopy2eps|devcopy2pdf|devcur|devdisplaylist|devflush|devhold|devinteractive|devlist|devnew|devnext|devoff|devprev|devprint|devset|devsize|dev2bitmap|devAskNewPage|deviceIsInteractive|embedFonts|extendrange|getGraphicsEvent|getGraphicsEventEnv|graphicsoff|gray|graycolors|grey|greycolors|grSoftVersion|guessEncoding|hcl|heatcolors|hsv|initPSandPDFfonts|isnaraster|israster|isPDF|jpeg|makergb|matchEncoding|matchEncodingCIDFont|matchEncodingType1Font|matchFont|n2mfrow|nclassFD|nclassscott|nclassSturges|Opsraster|palette|pdf|pdfoptions|pdfFonts|pictex|png|postscript|postscriptFonts|prettyDate|printcolorConverter|printraster|printrecordedplot|printRGBcolorConverter|printFont|printFontCIDFont|printFontType1Font|printFonts|psoptions|quartz|quartzoptions|quartzsave|quartzFont|quartzFonts|rainbow|recordGraphics|recordPalette|recordPlot|replayPlot|restoreRecordedPlot|rgb|rgb2hsv|savePlot|seqDtime|setEPS|setFonts|setGraphicsEventEnv|setGraphicsEventHandlers|setPS|setQuartzFonts|setX11Fonts|svg|terraincolors|tiff|topocolors|trans3d|truncPOSIXt|Type1Font|x11|X11|X11options|X11Font|X11FontError|X11Fonts|xfig|xycoords|xyTable|xyzcoords)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(addNextMethod|allGenerics|allNames|Arith|as|asMethodDefinition|assignClassDef|assignMethodsMetaData|balanceMethodsList|bindactivation|cacheGenericsMetaData|cacheMetaData|cacheMethod|cacheOnAssign|callGeneric|callNextMethod|canCoerce|cbind|cbind2|checkAtAssignment|checkSlotAssignment|classesToAM|classGeneratorFunction|classLabel|classMetaName|className|coerce|Compare|completeClassDefinition|completeExtends|completeSubclasses|Complex|conformMethod|defaultDumpName|defaultPrototype|dispatchIsInternal|doPrimitiveMethod|dumpMethod|dumpMethods|el|elNamed|emptydump|emptyMethodsList|envRefInferField|envRefSetField|evalOnLoad|evalqOnLoad|evalSource|existsFunction|existsMethod|extends|externalRefMethod|finalDefaultMethod|findClass|findFunction|findMethod|findMethods|findMethodSignatures|findUnique|fixPre18|formalArgs|fromNextMethod|functionBody|genericskeleton|genericForBasic|getAccess|getAllMethods|getAllSuperClasses|getClass|getClassDef|getClasses|getClassName|getClassPackage|getDataPart|getExtends|getFunction|getGeneric|getGenericFromCall|getGenerics|getGroup|getGroupMembers|getLoadActions|getMethod|getMethods|getMethodsAndAccessors|getMethodsForDispatch|getMethodsMetaData|getPackageName|getProperties|getPrototype|getRefClass|getRefSuperClasses|getSlots|getSubclasses|getValidity|getVirtual|hasArg|hasLoadAction|hasMethod|hasMethods|implicitGeneric|inBasicFuns|inferProperties|inheritedSlotNames|inheritedSubMethodLists|initFieldArgs|initialize|initMethodDispatch|initRefFields|insertClassMethods|insertMethod|insertMethodInEmptyList|insertSource|installClassMethod|is|isBaseFun|isClass|isClassDef|isClassUnion|isGeneric|isGrammarSymbol|isGroup|isMixin|isRematched|isS3Generic|isSealedClass|isSealedMethod|isVirtualClass|isXS3Class|kronecker|languageEl|linearizeMlist|listFromMethods|listFromMlist|loadMethod|Logic|makeClassMethod|makeClassRepresentation|makeEnvRefMethods|makeExtends|makeGeneric|makeMethodsList|makePrototypeFromClassDef|makeStandardGeneric|matchDefaults|matchSignature|Math|Math2|mergeMethods|metaNameUndo|methodskeleton|MethodAddCoerce|methodSignatureMatrix|MethodsList|MethodsListSelect|methodsPackageMetaName|missingArg|mlistMetaName|multipleClasses|new|newBasic|newClassRepresentation|newEmptyObject|Ops|outerLabels|packageSlot|possibleExtends|printMethodsList|printClassRepresentation|printPropertiesList|prohibitGeneric|promptClass|promptMethods|prototype|Quote|rbind|rbind2|reconcilePropertiesAndPrototype|refClassFields|refClassInformation|refClassMethods|refClassPrompt|refObjectClass|registerImplicitGenerics|rematchDefinition|removeClass|removeGeneric|removeMethod|removeMethods|removeMethodsObject|representation|requireMethods|resetClass|resetGeneric|S3Class|S3forS4Methods|S3Part|sealClass|seemsS4Object|selectMethod|selectSuperClasses|setAs|setCacheOnAssign|setClass|setClassUnion|setDataPart|setGeneric|setGenericImplicit|setGroupGeneric|setIs|setLoadAction|setLoadActions|setMethod|setNames|setOldClass|setPackageName|setPrimitiveMethods|setRefClass|setReplaceMethod|setValidity|show|showClass|showClassMethod|showDefault|showExtends|showExtraSlots|showMethods|showMlist|showRefClassDef|signature|SignatureMethod|sigToEnv|slot|slotNames|slotsFromS3|substituteDirect|substituteFunctionArgs|Summary|superClassDepth|superClassMethodName|tableNames|testInheritedMethods|testVirtual|traceOff|traceOn|tryNew|unRematchDefinition|useMTable|validObject|validSlotNames)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(acf|acf2AR|addname|add1|add1default|add1glm|add1lm|add1mlm|addmargins|aggregate|aggregatedataframe|aggregatedefault|aggregateformula|aggregatets|AIC|AICdefault|AIClogLik|alias|aliasformula|aliaslm|anova|anovaglm|anovaglmlist|anovalm|anovalmlist|anovaloess|anovamlm|anovamlmlist|anovanls|anovalistnls|ansaritest|ansaritestdefault|ansaritestformula|aov|approx|approxfun|ar|arburg|arburgdefault|arburgmts|armle|arols|aryw|arywdefault|arywmts|arima|arimasim|arima0|arima0diag|ARMAacf|ARMAtoMA|asdataframeaovproj|asdataframeftable|asdataframelogLik|asdendrogram|asdendrogramdendrogram|asdendrogramhclust|asdist|asdistdefault|asformula|ashclust|ashclustdefault|ashclustdendrogram|ashclusttwins|asmatrixdist|asmatrixftable|asstepfun|asstepfundefault|asstepfunisoreg|astableftable|asts|astsdefault|asOneSidedFormula|ave|bandwidthkernel|bartletttest|bartletttestdefault|bartletttestformula|BIC|BICdefault|BIClogLik|binomtest|binomial|biplot|biplotdefault|biplotprcomp|biplotprincomp|Boxtest|bwpaircnts|bwbcv|bwnrd|bwnrd0|bwSJ|bwucv|C|cancor|casenames|casenamesdefault|casenameslm|cbindts|ccf|checkexact|chisqtest|cmdscale|coef|coefaov|coefArima|coefdefault|coeflistof|coefmaov|coefnls|coefficients|completecases|confint|confintdefault|confintglm|confintlm|confintnls|constrOptim|contrhelmert|contrpoly|contrSAS|contrsum|contrtreatment|contrasts|convolve|cooksdistance|cooksdistanceglm|cooksdistancelm|cophenetic|copheneticdefault|copheneticdendrogram|cor|cortest|cortestdefault|cortestformula|cov|covwt|cov2cor|covratio|cpgram|cutdendrogram|cutree|cycle|cycledefault|cyclets|D|dbeta|dbinom|dcauchy|dchisq|decompose|deleteresponse|deltat|deltatdefault|dendrapply|density|densitydefault|deriv|derivdefault|derivformula|deriv3|deriv3default|deriv3formula|deviance|deviancedefault|devianceglm|deviancelm|deviancemlm|deviancenls|dexp|df|dfkernel|dfresidual|dfresidualdefault|dfresidualnls|dfbeta|dfbetalm|dfbetas|dfbetaslm|dffits|dgamma|dgeom|dhyper|diffts|diffinv|diffinvdefault|diffinvts|diffinvvector|dist|dlnorm|dlogis|dmultinom|dnbinom|dnorm|dpois|dropname|dropterms|drop1|drop1default|drop1glm|drop1lm|drop1mlm|dsignrank|dt|dummycoef|dummycoefaovlist|dummycoeflm|dunif|dweibull|dwilcox|ecdf|effaovlist|effects|effectsglm|effectslm|embed|end|enddefault|estVar|estVarmlm|estVarSSD|expandmodelframe|extractAIC|extractAICaov|extractAICcoxph|extractAICglm|extractAIClm|extractAICnegbin|extractAICsurvreg|factanal|factanalfitmle|factorname|family|familyglm|familylm|fft|filter|fishertest|fitted|fitteddefault|fittedisoreg|fittedkmeans|fittednls|fittedsmoothspline|fittedvalues|fivenum|flignertest|flignertestdefault|flignertestformula|formatperc|formatdist|formatftable|formatperc|formula|formulacharacter|formuladataframe|formuladefault|formulaformula|formulaglm|formulalm|formulanls|formulaterms|frequency|frequencydefault|friedmantest|friedmantestdefault|friedmantestformula|ftable|ftabledefault|ftableformula|Gamma|gaussian|getallvars|getCall|getCalldefault|getInitial|getInitialdefault|getInitialformula|getInitialselfStart|glm|glmcontrol|glmfit|hasTsp|hat|hatvalues|hatvalueslm|hatvaluessmoothspline|hclust|heatmap|HL|HoltWinters|hymanfilter|identifyhclust|influence|influenceglm|influencelm|influencemeasures|integrate|interactionplot|inversegaussian|IQR|isemptymodel|isleaf|ismts|isstepfun|ists|istskernel|isoreg|KalmanForecast|KalmanLike|KalmanRun|KalmanSmooth|kernapply|kernapplydefault|kernapplyts|kernapplytskernel|kernapplyvector|kernel|kmeans|knots|knotsstepfun|kruskaltest|kruskaltestdefault|kruskaltestformula|kstest|ksmooth|labelsdendrogram|labelsdist|labelslm|labelsterms|lag|lagdefault|lagplot|line|linesisoreg|linesstepfun|linests|lm|lmfit|lminfluence|lmwfit|loadings|loess|loesscontrol|loesssmooth|logLik|logLikArima|logLikglm|logLiklm|logLiklogLik|logLiknls|loglin|lowess|lsdiag|lsprint|lsfit|mad|mahalanobis|makelink|maketablesaovproj|maketablesaovprojlist|makeARIMA|makepredictcall|makepredictcalldefault|makepredictcallpoly|manova|mantelhaentest|mauchlytest|mauchlytestmlm|mauchlytestSSD|mcnemartest|median|mediandefault|medpolish|mergedendrogram|midcachedendrogram|modelextract|modelframe|modelframeaovlist|modelframedefault|modelframeglm|modelframelm|modelmatrix|modelmatrixdefault|modelmatrixlm|modeloffset|modelresponse|modeltables|modeltablesaov|modeltablesaovlist|modelweights|monthplot|monthplotdefault|monthplotstl|monthplotStructTS|monthplotts|moodtest|moodtestdefault|moodtestformula|mvfft|nknots|naaction|naactiondefault|nacontiguous|nacontiguousdefault|naexclude|naexcludedataframe|naexcludedefault|nafail|nafaildefault|naomit|naomitdataframe|naomitdefault|naomitts|napass|napredict|napredictdefault|napredictexclude|naprint|naprintdefault|naprintexclude|naprintomit|naresid|naresiddefault|naresidexclude|nextn|nleaves|nlm|nlminb|nls|nlsportfit|nlscontrol|nlsModel|nlsModelplinear|NLSstAsymptotic|NLSstAsymptoticsortedXyData|NLSstClosestX|NLSstClosestXsortedXyData|NLSstLfAsymptote|NLSstLfAsymptotesortedXyData|NLSstRtAsymptote|NLSstRtAsymptotesortedXyData|nobs|nobsdefault|nobsdendrogram|nobsglm|nobslm|nobslogLik|nobsnls|numericDeriv|offset|onewaytest|Opsts|optim|optimHess|optimise|optimize|orderdendrogram|padjust|pacf|pacfdefault|pairwiseproptest|pairwisettest|pairwisetable|pairwisewilcoxtest|pbeta|pbinom|pbirthday|pcauchy|pchisq|pexp|pf|pgamma|pgeom|phyper|Pillai|plclust|plnorm|plogis|plotacf|plotdecomposedts|plotdendrogram|plotdensity|plotecdf|plothclust|plotHoltWinters|plotisoreg|plotlm|plotmedpolish|plotmlm|plotppr|plotprcomp|plotprincomp|plotprofilenls|plotspec|plotspeccoherency|plotspecphase|plotstepfun|plotstl|plotts|plottskernel|plotTukeyHSD|plotNode|plotNodeLimit|pnbinom|pnorm|pointwise|poisson|poissontest|poly|polym|portgetnamedv|portmsg|power|poweranovatest|powerproptest|powerttest|PPtest|ppoints|ppois|ppr|pprdefault|pprformula|prcomp|prcompdefault|prcompformula|predict|predictar|predictArima|predictarima0|predictglm|predictHoltWinters|predictlm|predictloess|predictmlm|predictnls|predictpoly|predictppr|predictprcomp|predictprincomp|predictsmoothspline|predictsmoothsplinefit|predictStructTS|predLoess|preplot|princomp|princompdefault|princompformula|printacf|printanova|printaov|printaovlist|printar|printArima|printarima0|printdendrogram|printdensity|printdist|printdummycoef|printdummycoeflist|printecdf|printfactanal|printfamily|printformula|printftable|printglm|printhclust|printHoltWinters|printhtest|printinfl|printintegrate|printisoreg|printkmeans|printlm|printloadings|printloess|printlogLik|printmedpolish|printmtable|printnls|printpairwisehtest|printpowerhtest|printppr|printprcomp|printprincomp|printsmoothspline|printstepfun|printstl|printStructTS|printsummaryaov|printsummaryaovlist|printsummaryecdf|printsummaryglm|printsummarylm|printsummaryloess|printsummarymanova|printsummarynls|printsummaryppr|printsummaryprcomp|printsummaryprincomp|printtablesaov|printterms|printts|printtskernel|printTukeyHSD|printtukeyline|printtukeysmooth|printxtabs|printCoefmat|profile|profilenls|profiler|profilernls|proj|projaov|projaovlist|projdefault|projlm|projmatrix|promax|proptest|proptrendtest|psignrank|pt|ptukey|punif|pweibull|pwilcox|qbeta|qbinom|qbirthday|qcauchy|qchisq|qexp|qf|qgamma|qgeom|qhyper|qlnorm|qlogis|qnbinom|qnorm|qpois|qqline|qqnorm|qqnormdefault|qqplot|qrlm|qsignrank|qt|qtukey|quadetest|quadetestdefault|quadetestformula|quantile|quantiledefault|quantileecdf|quantilePOSIXt|quasi|quasibinomial|quasipoisson|qunif|qweibull|qwilcox|r2dtable|Rank|rbeta|rbinom|rcauchy|rchisq|readftable|recthclust|reformulate|regularizevalues|relevel|releveldefault|relevelfactor|relevelordered|reorder|reorderdefault|reorderdendrogram|replications|reshape|resid|residuals|residualsdefault|residualsglm|residualsHoltWinters|residualsisoreg|residualslm|residualsnls|residualssmoothspline|residualstukeyline|revdendrogram|rexp|rf|rgamma|rgeom|rhyper|rlnorm|rlogis|rmultinom|rnbinom|rnorm|Roy|rpois|rsignrank|rstandard|rstandardglm|rstandardlm|rstudent|rstudentglm|rstudentlm|rt|runif|runmed|rweibull|rwilcox|rWishart|safepchisq|safepf|scattersmooth|screeplot|screeplotdefault|sd|seaov|seaovlist|secontrast|secontrastaov|secontrastaovlist|selfStart|selfStartdefault|selfStartformula|setNames|shapirotest|sigma|sigmadefault|sigmamlm|simpleLoess|simulate|simulatelm|smooth|smoothspline|smoothEnds|sortedXyData|sortedXyDatadefault|specar|specpgram|spectaper|spectrum|sphericity|splcoefconv|spline|splinefun|splinefunH|splinefunH0|SSasymp|SSasympOff|SSasympOrig|SSbiexp|SSD|SSDmlm|SSfol|SSfpl|SSgompertz|SSlogis|SSmicmen|SSweibull|start|startdefault|statanova|step|stepfun|stl|strdendrogram|strlogLik|StructTS|summaryaov|summaryaovlist|summaryecdf|summaryglm|summaryinfl|summarylm|summaryloess|summarymanova|summarymlm|summarynls|summaryppr|summaryprcomp|summaryprincomp|summarystepfun|summarystl|summarytukeysmooth|supsmu|symnum|ttest|ttestdefault|ttestformula|tts|termplot|terms|termsaovlist|termsdefault|termsformula|termsterms|Thincol|Thinrow|time|timedefault|timets|toeplitz|Tr|ts|tsintersect|tsplot|tsunion|tsdiag|tsdiagArima|tsdiagarima0|tsdiagStructTS|tsp|tsSmooth|tsSmoothStructTS|TukeyHSD|TukeyHSDaov|uniroot|update|updatedefault|updateformula|var|vartest|vartestdefault|vartestformula|variablenames|variablenamesdefault|variablenameslm|varimax|vcov|vcovArima|vcovglm|vcovlm|vcovmlm|vcovnls|vcovsummaryglm|vcovsummarylm|weightedmean|weightedmeanDate|weightedmeandefault|weightedmeandifftime|weightedmeanPOSIXct|weightedmeanPOSIXlt|weightedresiduals|weights|weightsdefault|weightsglm|weightsnls|wilcoxtest|wilcoxtestdefault|wilcoxtestformula|Wilks|window|windowdefault|windowts|writeftable|xtabs)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(adist|alarm|apropos|aregexec|argNames|argsAnywhere|asbibentry|asbibentrybibentry|asbibentrycitation|ascharacterperson|ascharacterroman|asperson|aspersondefault|aspersonList|aspersonListdefault|aspersonListperson|asrelistable|asroman|aspell|aspellfinddictionaries|aspellfindprogram|aspellinspectcontext|aspellpackage|aspellpackageCfiles|aspellpackagedescription|aspellpackagepotfiles|aspellpackageRfiles|aspellpackageRdfiles|aspellpackagevignettes|aspellRCfiles|aspellRmanuals|aspellRRfiles|aspellRRdfiles|aspellRvignettes|aspellwritepersonaldictionaryfile|assignInMyNamespace|assignInNamespace|attachedPackageCompletions|availablepackages|bibentry|blankoutignoresinlines|blankoutregexpmatches|browseEnv|browseURL|browseVignettes|bugreport|bugreportinfo|cbibentry|cperson|captureoutput|changedFiles|checkforXQuartz|checkCRAN|chooseBioCmirror|chooseCRANmirror|citation|cite|citeNatbib|citEntry|citFooter|citHeader|closesocket|closetxtProgressBar|combn|compareVersion|contriburl|correctFilenameToken|countfields|CRANpackages|createpost|data|dataentry|dataentry|de|dencols|derestore|desetup|debugcall|debugger|defaultUserAgent|demo|downloadfile|downloadpackages|dumpframes|edit|editdataframe|editdefault|editmatrix|editvignette|emacs|example|expr2token|filetest|fileedit|fileCompletionPreferred|fileCompletions|fileSnapshot|filterpackagesbydependspredicates|find|findfilesindirectories|findExactMatches|findFuzzyMatches|findGeneric|findLineNum|findMatches|fix|fixInNamespace|flushconsole|fnLineNum|formataspell|formatbibentry|formatcitation|formatnewsdb|formatobjectsize|formatperson|formatroman|formatOL|formatUL|functionArgs|fuzzyApropos|getparsedataformessagestrings|getAnywhere|getCRANmirrors|getDependencies|getFromNamespace|getIsFirstArg|getKnownS3generics|getParseData|getParseText|getRcode|getRcodevignette|getS3method|getSrcDirectory|getSrcfile|getSrcFilename|getSrcLocation|getSrcref|getTxtProgressBar|glob2rx|globalVariables|hasName|head|headdataframe|headdefault|headftable|headfunction|headmatrix|headtable|help|helprequest|helpsearch|helpstart|helpCompletions|history|hsearchdb|hsearchdbconcepts|hsearchdbkeywords|indexsearch|inFunction|installpackages|installedpackages|isrelistable|isBasePkg|isInsideQuotes|isS3method|isS3stdGeneric|keywordCompletions|limitedLabels|loadedPackageCompletions|loadhistory|localeToCharset|lsstr|lsfstr|maintainer|makesysdatarda|makepackageshtml|makesocket|makeRegexpSafe|makeRweaveLatexCodeRunner|makeUserAgent|matchAvailableTopics|memorylimit|memorysize|menu|mergedemoindex|mergevignetteindex|methods|mirror2html|modifyList|newpackages|news|normalCompletions|nsl|objectsize|offlinehelphelper|oldpackages|Opsroman|packageskeleton|packageDescription|packageName|packageStatus|packageVersion|page|person|personList|pico|printaspell|printaspellinspectcontext|printbibentry|printBibtex|printbrowseVignettes|printchangedFiles|printcitation|printfileSnapshot|printfindLineNumResult|printgetAnywhere|printhelpfileswithtopic|printhsearch|printhsearchdb|printLatex|printlsstr|printMethodsFunction|printnewsdb|printobjectsize|printpackageDescription|printpackageIQR|printpackageStatus|printperson|printroman|printsessionInfo|printsocket|printsummarypackageStatus|printvignette|printhsearchInternal|processevents|prompt|promptdataframe|promptdefault|promptData|promptImport|promptPackage|rcgetOption|rcoptions|rcsettings|rcstatus|readcsv|readcsv2|readdelim|readdelim2|readDIF|readfortran|readfwf|readsocket|readtable|readCitationFile|recover|registerNames|regquote|relist|relistdefault|relistfactor|relistlist|relistmatrix|removepackages|removeSource|repbibentry|reproman|resolvePkgType|Rprof|Rprofmemorysummary|Rprofmem|RShowDoc|RSiteSearch|rtags|rtagsfile|Rtangle|RtangleFinish|RtangleRuncode|RtangleSetup|RtangleWritedoc|RweaveChunkPrefix|RweaveEvalWithOpt|RweaveLatex|RweaveLatexFinish|RweaveLatexOptions|RweaveLatexRuncode|RweaveLatexSetup|RweaveLatexWritedoc|RweaveTryStop|savehistory|selectlist|sessionInfo|setBreakpoint|setIsFirstArg|setRepositories|setTxtProgressBar|shortentostring|simplifyRepos|sortbibentry|specialCompletions|specialFunctionArgs|specialOpCompletionsHelper|specialOpLocs|stack|stackdataframe|stackdefault|Stangle|str|strdataframe|strDate|strdefault|strPOSIXt|strcapture|strextract|strOptions|substrwithtabs|summaryaspell|summarypackageStatus|summaryRprof|suppressForeignCheck|Sweave|SweaveGetSyntax|SweaveHooks|SweaveParseOptions|SweaveReadFile|SweaveSyntConv|tail|taildataframe|taildefault|tailftable|tailfunction|tailmatrix|tailtable|tar|timestamp|toBibtex|toBibtexbibentry|toBibtexperson|toLatex|toLatexsessionInfo|topicName|txtProgressBar|typeconvert|undebugcall|uniquebibentry|unlistrelistable|unstack|unstackdataframe|unstackdefault|untar|untar2|unzip|updatepackages|updatepackageStatus|upgrade|upgradepackageStatus|urlshow|URLdecode|URLencode|vi|View|vignette|writecsv|writecsv2|writeetags|writesocket|writetable|wsbrowser|xedit|xemacs|zip)\b\s*
        name: support.function.r.sa

  constant-names:
    comment: Names for constants, symbols and static properties
    patterns: []

  variable-names:
    comment: Standard Library variable names
    patterns: []

  property-names:
    comment: Standard Library property names
    patterns: []

  clause-content:
    patterns:
      - include: "#embedded-langs"
      - include: "#clauses"
      - include: "#declarations"
      - include: "#keywords"
      - include: "#comments"
      - include: "#brackets"
      - include: "#punctuation"
      - include: "#operators"
      - include: "#literals"
      - include: "#calls"
      - include: "#variables"
      - include: "#illegal"

  literals:
    patterns:
      - include: "#regexps"
      - include: "#strings-unquoted"
      - include: "#strings-quoted"
      - include: "#symbols"
      - include: "#numbers"
      - include: "#constants"

  constants:
    patterns:
      - match: |
          (?x)\s*\b(?:
          (true|yes|on)|(false|no|off)|(null|nil|none)|(undef|void)|(nan)|(inf|infin)
          )\b\s*
        captures:
          1: {name: constant.language.boolean.true.sa}
          2: {name: constant.language.boolean.false.sa}
          3: {name: constant.language.null.sa}
          4: {name: constant.language.undefined.sa}
          5: {name: constant.language.nan.sa}
          6: {name: constant.language.infinity.sa}
      - match: |
          (?x)\s*\b(?:
          (params|args)|(super|this|self)|(_|proto)|(ctor)|(targ)
          )\b\s*
        captures:
          1: {name: variable.language.arguments.sa}
          2: {name: variable.language.$2.sa}
          3: {name: variable.language.prototype.sa}
          4: {name: variable.language.constructor.sa}
          5: {name: variable.language.target.sa}

  numbers:
    patterns:
      - match: (?<=(^|\p{ps})\s*\d\w*)\.
        name: punctuation.separator.decimal.period.sa
      - match: (?<=(?:^|\p{ps})\s*|\s)\.(?=\d)
        name: punctuation.separator.decimal.period.sa
      - match: |-
          (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)
          (?:(\.)(?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?)?
          (?:(\*)\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?
          (?:(\.)(?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?)
          (?:(\*)\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0b)
          (?:[01]+(?:(?:,|_+)?*[01]+)*)
          (?:(\.)(?:[01]+(?:(?:,|_+)?*[01]+)*)?)?
          (?:(\*)[01]+(?:(?:,|_+)?*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0b)
          (?:[01]+(?:(?:,|_+)?*[01]+)*)?
          (?:(\.)(?:[01]+(?:(?:,|_+)?*[01]+)*)?)
          (?:(\*)[01]+(?:(?:,|_+)?*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)
          (?:(\.)(?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?)?
          (?:(\*)[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (?:(\.)(?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?)
          (?:(\*)[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)
          (?:(\.)(?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?)?
          (?:(\*)[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (?:(\.)(?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?)
          (?:(\*)[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)
          (?:(\.)(?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?)?
          (?:(\*)[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (?:(\.)(?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?)
          (?:(\*)[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)
          (?:(\.)(?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?)?
          (?:(\*)[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (?:(\.)(?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?)
          (?:(\*)[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0x)
          (?:\h+(?:(?:,|_+)?*\h+)*)
          (?:(\.)(?:\h+(?:(?:,|_+)?*\h+)*)?)?
          (?:(\*)\h+(?:(?:,|_+)?*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0x)
          (?:\h+(?:(?:,|_+)?*\h+)*)?
          (?:(\.)(?:\h+(?:(?:,|_+)?*\h+)*)?)
          (?:(\*)\h+(?:(?:,|_+)?*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          ()
          (?:\d+(?:(?:,|_+)?*\d+)*)
          (?:(\.)(?:\d+(?:(?:,|_+)?*\d+)*)?)?
          (?:(\*)\d+(?:(?:,|_+)?*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          ()
          (?:\d+(?:(?:,|_+)?*\d+)*)?
          (?:(\.)(?:\d+(?:(?:,|_+)?*\d+)*)?)
          (?:(\*)\d+(?:(?:,|_+)?*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:(?:,|_+)?*\w+)*)
          (?:(\.)(?:\w+(?:(?:,|_+)?*\w+)*)?)?
          (?:(\*)\w+(?:(?:,|_+)?*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:(?:,|_+)?*\w+)*)?
          (?:(\.)(?:\w+(?:(?:,|_+)?*\w+)*)?)
          (?:(\*)\w+(?:(?:,|_+)?*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.sa}
          <<: *number-literal

  strings-quoted:
    patterns:
      - comment: single quoted raw string
        begin: \s*('{3,})
        contentName: string.quoted.single.sa
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.sa}
        patterns:
          - include: "#embedded-raw"
      - comment: simple single quoted raw string
        begin: \s*(')
        contentName: string.quoted.single.sa
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.sa}
        patterns:
          - match: "''"
            name: constant.character.escape.sa
          - include: "#embedded-raw"
      - comment: double quoted standard string
        begin: \s*("{3,}|")
        contentName: string.quoted.double.sa
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.sa}
        patterns:
          - include: "#string-escapes"

  strings-unquoted:
    patterns:
      - begin: |
          (?x)\s*
          (\\\|)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.literal.sa}
          2: {name: storage.modifier.chomping-indicator.sa}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.sa}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.sa
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.block.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.html.markdown#inline
          - include: $self
      - begin: |
          (?x)\s*
          (\\\>)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.folded.sa}
          2: {name: storage.modifier.chomping-indicator.sa}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.sa}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.syntax.sa
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.in.sa
            patterns:
              - include: "#string-escapes"
              - include: text.html.markdown#inline
          - include: $self
      - match: |
          (?x)
          \s*(\\)
          ((?:\\.|[^\s,:;])+?)
          (?=[\p{ps}\p{pe}\s,:;]|$)\s*
        name: string.unquoted.sa
        captures:
          1: {name: punctuation.definition.string.sa}
          2: {patterns: [{include: "#string-escapes"}]}

  string-escapes:
    patterns:
      - match: \\(?=\s*$)
        name: constant.character.escape.newline.sa
      - match: (?i)\\b(?:[01]{1,21}|{[01\s]+?})
        name: constant.character.escape.binary.sa
      - match: (?i)\\q(?:[0-3]{1,11}|{[0-3\s]+?})
        name: constant.character.escape.quaternary.sa
      - match: (?i)\\s(?:[0-5]{1,8}|{[0-5\s]+?})
        name: constant.character.escape.senary.sa
      - match: (?i)\\o(?:[0-7]{1,7}|{[0-7\s]+?})
        name: constant.character.escape.octal.sa
      - match: (?i)\\d?\d{1,7}|\\d{[\d\s]+?}
        name: constant.character.escape.decimal.sa
      - match: (?i)\\z(?:[\dab]{1,6}|{[\s\dab]+?})
        name: constant.character.escape.duodecimal.sa
      - match: (?i)\\x(?:\h{1,6}|{[\h\s]+?})
        name: constant.character.escape.hexadecimal.sa
      - match: (?i)\\u(?:\h{1,6}|{[\h\s]+?})
        name: constant.character.escape.unicode.sa
      - begin: (?i)\\j{
        end: \s*}
        name: constant.character.entity.named.sa
        patterns:
          - include: "#regexp-patterns"
      - match: (?i)\\[abceflnprtvz]
        name: constant.character.escape.sa
      - match: \\[\p{s}\p{p}]
        name: constant.character.escape.symbol.sa
      - match: \\[\p{l}\p{n}\p{z}\p{c}]
        name: constant.character.escape.illegal.sa
      - include: "#embedded"

  embedded:
    patterns:
      - match: (\#)(\d+)
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {name: constant.numeric.decimal.sa}
      - match: (%)((['"\`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"\`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.sa}
          2: {name: storage.type.format.sa}
      - match: |
          (?xi)
          #(?<!\\)# no backslash
          (\#)# prefix
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )# variable
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {patterns: [{include: "#core"}]}
      - begin: (?#?<!\\)(\#{)\s*
        end: (})
        name: entity.quasi.element.sa
        captures:
          1: {name: punctuation.quasi.element.sa}
        patterns:
          - include: $self

  embedded-raw:
    patterns:
      - match: (\#)(\d+)
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {name: constant.numeric.decimal.sa}
      - match: ([#%]){2}
        name: constant.character.escape.sa
      - match: (%)((['"\`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"\`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.sa}
          2: {name: storage.type.format.sa}
      - match: |
          (?xi)
          (?<!\#)# no dollar
          (\#)# prefix
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )# variable
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {patterns: [{include: "#core"}]}
      - begin: (?<!\#)(\#{)\s*
        end: (})
        name: entity.quasi.element.sa
        captures:
          1: {name: punctuation.quasi.element.sa}
        patterns:
          - include: $self

  symbols:
    match: |
      (?x)
      \s*
      (:)((?:\w|\\.)(?:\\.|[^\s,:;])*?)
      \b\s*
    name: meta.symbol.sa
    captures:
      1: {name: punctuation.definition.symbol.sa}
      2: {name: constant.other.symbol.sa}

  labels:
    match: |
      (?x)
      (?<=^|[\p{ps}\s,;*+-])\s*

      (?!
      \b(?:# don't match keywords
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|keyof|valof
      |len|del|to|til|thru|at|by
      |and|x?or|not|para|seq|spawn
      |def|func?|fn|macro|proc|sub
      |let|var|val|const|decl
      |class|given|law|enum|rel|lat
      |proj|prot|ext|impl|frag|inter|struct
      |module|nspace|object|record|label
      |raw|data|query|schema|style|trait|alias|type
      |if|else|elif|eless|unless|guard
      |for|each|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |yield\b\s*\bfrom|import|export|show|hide
      |from|where|join|equals|[io]nto|order
      |take|drop|fold|scan|select|use|using
      |fi|rof|done|esac|wend|yrt|disc|wout
      |open|close
      )\b
      )

      ((?:\w|\\.)(?:\\.|[^\s,:;])*?)
      (?=:\s+)
    name: meta.object-literal.key.sa
    captures:
      1: {name: constant.other.object.key.sa}
      2: {name: punctuation.separator.key-value.sa}

  regexps:
    patterns:
      - begin: (\p{alnum}*)(\`)\s*
        end: \s*(?!\\)(\`(?!\`))(\p{alnum}*)
        contentName: string.pattern.regexp.sa
        beginCaptures:
          1: {name: keyword.modifier.sa}
          2: {name: punctuation.section.regexp.begin.sa}
        endCaptures:
          1: {name: punctuation.section.regexp.end.sa}
          2: {name: keyword.other.flag.sa}
        patterns:
          - include: "#comments"
          - include: "#regexp-patterns"
          - begin: (\`)(\`)\s*\n?
            end: \s*(?=(?!\\)\`)
            contentName: string.replace.regexp.sa
            beginCaptures:
              1: {name: punctuation.section.regexp.end.sa}
              2: {name: punctuation.section.regexp.begin.sa}
            patterns:
              - include: "#back-references"
      - begin: |
          (?x)\s*
          (\\\<)\s*
          ([-+*/<=>])?\s*
          (?:(\w+)?\b\s*\b
          (
          \w+\s*
          (?:[+-]\s*
          (?:(?:\w+)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.regexp.sa}
          2: {name: storage.modifier.chomping-indicator.sa}
          3: {name: keyword.modifier.sa}
          4: {name: keyword.other.flag.sa}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.sa
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.out.sa
            patterns:
              - include: "#regexp-patterns"
          - include: $self

  back-references:
    patterns:
      - match: \$[&+-]
        name: keyword.other.back-reference.sa
      - match: \${2}
        name: constant.character.escape.sa
      - begin: (\$<)
        end: \s*(>)
        name: keyword.other.back-reference.sa
        beginCaptures:
          1: {name: keyword.other.back-reference.sa}
        endCaptures:
          1: {name: keyword.other.back-reference.sa}
        patterns:
          - include: "#variables"
          - include: "#operators"
          - include: "#numbers"
      - include: "#string-escapes"

  regexp-patterns:
    patterns:
      - include: "#embedded"
      - include: "#comments"
      - include: "#strings-quoted"
      - match: \|
        name: keyword.operator.or.sa
      - match: \&
        name: keyword.operator.match.sa
      - match: \!
        name: keyword.operator.disjunction.sa
      - match: \.
        name: constant.character.all.sa
      - match: (?i)\\[by]({\p{alpha}+})?
        name: keyword.control.anchor.sa
      - match: (?i)(\^|\\<|\\a(?:{\p{alpha}+})?)|(\$|\\>|\\z(?:{\p{alpha}+})?)
        captures:
          1: {name: keyword.control.begin.sa}
          2: {name: keyword.control.end.sa}
      - match: (\\\()(?:(\?)|(\+)|(\*))
        captures:
          1: {name: constant.character.escape.other.sa}
          2: {name: keyword.operator.quantifier.lazy.sa}
          3: {name: keyword.operator.quantifier.eager.sa}
          4: {name: keyword.operator.quantifier.greedy.sa}
      - match: \\\d+
        name: keyword.other.back-reference.sa
      - match: \{(\s*\d*\s*(?:,?\s*\d*\s*)*)\}
        name: keyword.operator.quantifier.sa
      - begin: (\\Q)
        contentName: string.quoted.single.sa
        end: (\\E)
        name: string.quoted.raw.sa
        captures:
          1: {name: keyword.control.quote.sa}
        patterns:
          - include: "#string-escapes"
      - begin: (\\q)
        contentName: string.quoted.double.sa
        end: (\\e)
        name: string.quoted.sa
        captures:
          1: {name: keyword.control.quote.sa}
        patterns:
          - include: "#embedded-raw"
      - begin: (\\k<)
        end: \s*(>)
        name: keyword.other.back-reference.sa
        beginCaptures:
          1: {name: keyword.other.back-reference.sa}
        endCaptures:
          1: {name: keyword.other.back-reference.sa}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - begin: (\\g<)
        end: \s*(>)
        name: keyword.other.subroutine.sa
        beginCaptures:
          1: {name: keyword.other.subroutine.sa}
        endCaptures:
          1: {name: keyword.other.subroutine.sa}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - include: "#regexp-groups"
      - include: "#regexp-char-set"
      - include: "#regexp-char-class"
      - match: (?i)(?:(\\M)|(\\K)|(\\G)|(\\X))
        captures:
          1: {name: keyword.control.anchor.sa}
          2: {name: keyword.control.keepout.sa}
          3: {name: keyword.control.search.sa}
          4: {name: constant.character.unicode.sa}
      - match: (?<=[^\\][*+?}])(?:(\?)|(\+)|(\*))
        captures:
          1: {name: keyword.operator.modifier.lazy.sa}
          2: {name: keyword.operator.modifier.eager.sa}
          3: {name: keyword.operator.modifier.greedy.sa}
      - match: (\?)|(\+)|(\*)
        captures:
          1: {name: keyword.operator.quantifier.lazy.sa}
          2: {name: keyword.operator.quantifier.eager.sa}
          3: {name: keyword.operator.quantifier.greedy.sa}
      - match: \\.
        name: constant.character.escape.other.sa

    repository:
      regexp-groups:
        patterns:
          - begin: \(([*+])
            end: \s*(\))
            name: constant.other.pcre.sa
            captures:
              0: {name: punctuation.section.expression.sa}
            patterns:
              - include: source.clojure
          - begin: (\()(\?#)
            contentName: comment.block.regexp.sa
            end: \s*(\))
            name: comment.block.regexp.sa
            captures:
              1: {name: punctuation.definition.comment.sa}
            patterns:
              - match: \\.
                name: comment.block.regexp.sa
          - begin: (\(\?=)
            end: \s*(\))
            name: meta.group.look-ahead.sa
            captures:
              1: {name: punctuation.definition.group.look-ahead.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<=)
            end: \s*(\))
            name: meta.group.look-behind.sa
            captures:
              1: {name: punctuation.definition.group.look-behind.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?!)
            end: \s*(\))
            name: meta.group.negative-look-ahead.sa
            captures:
              1: {name: punctuation.definition.group.negative-look-ahead.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<!)
            end: \s*(\))
            name: meta.group.negative-look-behind.sa
            captures:
              1: {name: punctuation.definition.group.negative-look-behind.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?(?:([+-]?\d+?)|(\p{upper}+(?:[+-]\p{upper}+)*)|(\p{lower}+(?:[+-]\p{lower}+)*)))\s*(:)?
            end: \s*(\))
            name: meta.group.flag.sa
            captures:
              0: {name: punctuation.definition.group.flag.sa}
              1: {name: punctuation.definition.group.flag.sa}
              2: {name: entity.name.function.method.sa}
              3: {name: keyword.control.recursion.sa}
              4: {name: keyword.other.flag.sa}
              5: {name: punctuation.separator.key-value.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?={)
            end: \s*(\))
            name: meta.group.call-out.sa
            captures:
              1: {name: punctuation.definition.group.call-out.sa}
            patterns:
              - begin: (?<=\(\?)({)
                end: \s*(\})([<*>])?(?:(\[)(.*?)(\]))?
                name: punctuation.definition.group.call-out.sa
                captures:
                  1: {name: punctuation.definition.group.call-out.sa}
                  2: {name: keyword.operator.range.sa}
                  3: {name: punctuation.definition.tag.sa}
                  4: {patterns: [{include: "#function-entities"}]}
                  5: {name: punctuation.definition.tag.sa}
                patterns:
                  - include: $self
              - include: "#regexp-patterns"
          - begin: (\(\?>)
            end: \s*(\))
            name: meta.group.atomic.sa
            captures:
              1: {name: punctuation.definition.group.atomic.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?:)
            end: \s*(\))
            name: meta.group.non-capturing.sa
            captures:
              1: {name: punctuation.definition.group.non-capturing.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?=[(|])
            end: \s*(\))
            name: meta.group.branch.sa
            captures:
              1: {name: punctuation.definition.group.branch.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?~)
            end: \s*(\))
            name: meta.group.absent.sa
            captures:
              1: {name: punctuation.definition.group.absent.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: \((\?(?:&)(?:([+-]?\d+)|([_\p{l}\p{Nl}][_\\d\p{l}\p{M}\p{N}]*)|([+-]?\d*)))(:)?
            end: \s*\)
            name: meta.group.back-reference.sa
            captures:
              0: {name: punctuation.definition.group.back-reference.sa}
              1: {name: punctuation.definition.group.back-reference.sa}
              2: {name: entity.name.function.method.sa}
              3: {name: variable.other.sa}
              4: {name: punctuation.separator.key-value.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: \(\?(?=<(?![!=]))
            end: \s*(\))
            name: meta.group.named.sa
            beginCaptures:
              0: {name: punctuation.definition.group.named.sa}
              1: {patterns: [{include: "#variables"}]}
            endCaptures:
              0: {name: punctuation.definition.group.named.sa}
            patterns:
              - begin: (?<=\(\?)(<)
                end: \s*(>)
                name: punctuation.definition.group.named.sa
                beginCaptures:
                  1: {name: punctuation.definition.group.named.sa}
                endCaptures:
                  1: {name: punctuation.definition.group.named.sa}
                patterns:
                  - include: "#variables"
                  - include: "#numbers"
              - include: "#regexp-patterns"
          - begin: \(
            end: \s*\)
            name: meta.group.sa
            captures:
              0: {name: punctuation.definition.group.sa}
            patterns:
              - include: "#regexp-patterns"

      regexp-char-class:
        patterns:
          - match: \\(?=\s*$)
            name: constant.character.escape.newline.sa
          - begin: (?i)\\p{
            end: \s*}
            name: constant.other.character-class.unicode.sa
            patterns:
              - include: "#expression-keywords"
              - include: "#variables"
              - include: "#operators"
          - begin: \\j{
            end: \s*}
            name: constant.character.entity.named.sa
            patterns:
              - include: "#regexp-patterns"
          - match: (?i)\\b(?:[01]{1,21}|{[01\s]+?})
            name: constant.character.escape.binary.sa
          - match: (?i)\\q(?:[0-3]{1,11}|{[0-3\s]+?})
            name: constant.character.escape.quaternary.sa
          - match: (?i)\\s(?:[0-5]{1,8}|{[0-5\s]+?})
            name: constant.character.escape.senary.sa
          - match: (?i)\\o(?:[0-7]{1,7}|{[0-7\s]+?})
            name: constant.character.escape.octal.sa
          - match: (?i)\\d?\d{1,7}|\\d{[\d\s]+?}
            name: constant.character.escape.decimal.sa
          - match: (?i)\\z(?:[\dab]{1,6}|{[\s\dab]+?})
            name: constant.character.escape.duodecimal.sa
          - match: (?i)\\x(?:\h{1,6}|{[\h\s]+?})
            name: constant.character.escape.hexadecimal.sa
          - match: (?i)\\u(?:\h{1,6}|{[\h\s]+?})
            name: constant.character.escape.unicode.sa
          - match: (?i:\\[cm][a-z])|\\R
            name: constant.character.control.sa
          - match: *posix-class
            name: constant.other.character-class.posix.sa
          - match: (?i:\\p(c[cfos]?|l[lmotu]?|m[cen]?|n[dlo]?|p[c-fios]?|s[ckmo]?|z[lps]))
            name: constant.other.character-class.unicode.sa
          - match: (?i)\\[ci]
            name: constant.other.character-class.xml.sa
          - match: \.|\\[dhlns-w]
            name: constant.other.character-class.sa
          - match: \\[DHLNS-W]
            name: constant.other.character-class.negated.sa
          - match: (?i)\\n{[\w\s]+}
            name: constant.character.escape.unicode.name.sa
          - match: (?i)\\[abceflnprtvz]
            name: constant.character.escape.sa
          - match: \\[\p{s}\p{p}]
            name: constant.character.escape.symbol.sa
          - match: \\\p{z}
            name: constant.character.escape.symbol.sa
          - match: \\[\p{l}\p{n}\p{z}\p{c}]
            name: constant.character.escape.illegal.sa
          - include: "#embedded"

      regexp-char-ops:
        patterns:
          - match: \--
            name: keyword.operator.optional.sa
          - match: (?<!\\?[\\\[])-(?![-\[\]])
            name: keyword.operator.range.sa
          - match: \|\|
            name: keyword.operator.union.sa
          - match: \&&
            name: keyword.operator.intersection.sa
          - match: \^\^
            name: keyword.operator.only.sa
          - match: ~~
            name: keyword.operator.maybe.sa
          - match: \.
            name: constant.other.character-class.range.sa
          - match: \\.
            name: constant.character.escape.other.sa

      regexp-char-set:
        patterns:
          - begin: (\[=)
            end: \s*(\])
            name: constant.other.character-class.posix.sa
            captures:
              1: {name: punctuation.definition.character-class.posix.sa}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\.)
            end: \s*(\])
            name: constant.other.character-class.posix.sa
            captures:
              1: {name: punctuation.definition.character-class.posix.sa}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[:)
            end: \s*(\])
            name: constant.other.character-class.posix.sa
            captures:
              1: {name: punctuation.definition.character-class.posix.sa}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\^)
            end: \s*(\])
            name: constant.other.character-class.negated.sa
            captures:
              1: {name: punctuation.definition.character-class.negated.sa}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"
          - begin: (\[)
            end: \s*(\])
            name: constant.other.character-class.sa
            captures:
              1: {name: punctuation.definition.character-class.sa}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"

  document:
    patterns:
      - include: "#document-inline-tags"
      - include: "#document-access"
      - include: "#document-as-name-path"
      - include: "#document-simple-name-path"
      - include: "#document-module"
      - include: "#document-type-name"
      - include: "#document-type-no-name"
      - match: (?<=^|[''"\`\\\s\p{ps}])@([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\b
        name: storage.type.class.sa

    repository:
      document-access:
        match: |
          (?x)
          (@acc)\b\s*\b
          (?:
          (?:
          pub|prot|pvt|pte|priv|read|a?sync|inline|lazy|eager|trans|part
          |lawful|rogue|early|late|unique|handle|over|abs|vol|stat|dyn|final
          # Function or method modifiers
          |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
          |(?:un)?(?:sign|safe|check|lock|fixed|size)
          |# Function or method modifiers
          (?:pre|in|post|suf|af|trans|inter)fix|
          (?:u|bi|ter|)nary|oper
          |# Decorators
          @(?:
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )\s*\b
          )*
          (?=\s|$)
        captures:
          1: {name: storage.type.class.sa}
          0: {name: storage.modifier.sa}
      document-as-name-path:
        begin: (@(borrows|lends)\b)\s*(?=(?![}\]]\#)\S+(?:(?:\s*\bas\b\s*(?![}\]]\#)\S+)?)?([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\3$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-name-path-scopes"
      document-inline-tags:
        begin: (\[(?:(?>[^\[\]]+)|\g<-1>)*\])?({)(?=@)
        end: (})
        name: meta.tag.inline.sa
        beginCaptures:
          1: {name: string.linktext.sa}
          2: {name: meta.brace.curly.sa}
        endCaptures:
          1: {name: meta.brace.curly.sa}
        patterns:
          - match: (@(link|tutorial))\b([^}]*)
            captures:
              1: {name: storage.type.class.sa}
              3: {name: string.sa}
      document-module:
        begin: |
          (?x)(@(
          (?:(?:im|ex)port|listen|require|use)s?
          )\b)
          \s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(\S*)([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\5$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
          - match: (?:(module)(:))?(((?![}\]]\#)\S)+)
            captures:
              1: {name: keyword.module.sa}
              2: {name: punctuation.sa}
              3: {name: string.module-name.sa}
      document-name-scopes:
        patterns:
          - match: ((?![}\]]\#)[\S&&[^\[\]"']])+
            captures:
              0: {name: variable.other.sa}
          - begin: \[
            end: \]|^
            name: variable.other.sa
            patterns:
              - include: "#document-string"
              - include: "#document-name-scopes"
      document-simple-name-path:
        begin: |
          (?x)(@(
          (?:use|call|emit|event|fire)s?|alias|name|mixes|prop
          |this|that|it|self|super
          )\b)
          \s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*\S*([\S*\s]*))
        end: ^|(?=[}\]]\#)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
          - include: "#types"
      document-string:
        match: '"(\\"|[^"])*"|''(\\''|[^''])*'''
        name: string.sa
      document-type-name:
        begin: |
          (?x)(@(
          def|func?|fn|macro|proc|sub|class|given|law|const|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct|module|nspace|object|record|raw
          |data|query|schema|style|trait|alias|type|decl|let|va[rl]
          |arg|ctor|member|method|mixin|param
          )\b)\s*
          (?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(((\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\S)+)?([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\7$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
          - include: "#document-name-scopes"
      document-type-no-name:
        begin: |
          (?x)
          (@(
          pub|prot|pvt|pte|priv|read|a?sync|inline|lazy|eager|trans|part
          |lawful|rogue|early|late|unique|handle|over|abs|vol|stat|dyn|final
          # Function or method modifiers
          |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
          |(?:un)?(?:sign|safe|check|lock|fixed|size)
          |# Function or method modifiers
          (?:pre|in|post|suf|af|trans|inter)fix|
          (?:u|bi|ter|)nary|oper
          |# Decorators
          @(?:
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )\b)
          \s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
      document-typedef-obj:
        begin: "{"
        end: "}|^"
        captures:
          0: {name: meta.brace.curly.sa}
        patterns:
          - include: "#types"
      document-typedef-scopes:
        begin: "{"
        end: "}|^"
        name: entity.name.type.instance.sa
        captures:
          0: {name: meta.brace.curly.sa}
        patterns:
          - include: "#types"

  comments:
    patterns:
      - begin: \s*((#\())
        end: (\s*(\)))
        name: comment.block.inline.sa
        captures:
          1: {name: comment.block.inline.sa}
          2: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-inline"
      - begin: \s*((#{))
        end: (\s*(}#))
        name: comment.block.documentation.sa
        captures:
          1: {name: comment.block.documentation.sa}
          2: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-document-block"
      - begin: \s*((#\[))
        end: (\s*(\]#))
        name: comment.block.sa
        captures:
          1: {name: comment.block.sa}
          2: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-block"
      - begin: ((^\s*)|\s*)((#=))
        end: \s*$
        name: comment.line.special.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.special.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#comment-special"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((##))
        end: \s*$
        name: comment.line.playground.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.playground.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.playground.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#:))
        end: \s*$
        name: comment.line.documentation.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.documentation.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.documentation.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#!))
        end: \s*$
        name: comment.line.shebang.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.shebang.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.shebang.sa}
        patterns:
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#\?))
        end: \s*$
        name: comment.line.doctype.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.doctype.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.doctype.sa}
        patterns:
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#))
        end: \s*$
        name: comment.line.number-sign.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.double-slash.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.number-sign.sa}
        patterns:
          - include: "#markdown-inline"

    repository:
      markdown-inline:
        patterns:
          - include: text.html.markdown#inline
      nested-block:
        begin: (#\[)\s*
        end: \s*(\]#)
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-block"
      nested-document-block:
        begin: (#{)\s*
        end: \s*(}#)
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-document-block"
      nested-inline:
        begin: (\()\s*
        end: \s*(\))
        name: comment.block.inline.sa
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-inline"
      nested-special:
        begin: (\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-special"

  calls:
    patterns:
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          )
          \b\s+
          (?=
          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )
          [_\p{l}\p{m}\p{n}]+|\[(?!<))
        captures:
          1: {patterns: [{include: "#function-entities"}]}
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          )
          \b
          (?=
          !(?:\.=?)?\s*|
          \s+[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*

          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )

          [_\p{l}\p{m}\p{n}]+|\[<|
          (?:[!?~]?\.=?|[?!:]:=?|->)?\s*['"\`\\\p{ps}&&[^\[{]]
          )
        captures:
          1: {patterns: [{include: "#function-entities"}]}

  function-entities:
    patterns:
      - match: |
          (?x)\b(?:
          (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
          (?:# Properties (note all properties are by default, symbols)
          (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
          ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
          ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
          ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
          )

          |
          (?:# Objects and maps
          (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
          ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
          ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
          ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
          )
          (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

          |
          (?:# Regular variables
          (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
          ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
          ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
          ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
          )
          )\b
        captures:
          1: {name: entity.name.tag.sa}
          2: {name: entity.name.tag.sa support.class.component.sa}
          3: {name: entity.name.class.builtin.sa}
          4:
            name: entity.name.function.method.sa
            patterns: [{include: "#function-names"}]
          5: {name: variable.other.global.sa}
          6: {name: variable.other.constant.object.sa}
          7: {name: variable.other.conditional.sa}
          8: {name: variable.other.object.sa}
          9: {name: entity.name.function.tagged-template.sa}
          10: {name: entity.name.type.sa}
          11: {name: entity.name.class.sa}
          12:
            name: entity.name.function.sa
            patterns: [{include: "#function-names"}]
      - include: $self

  variables:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int
      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?!
      \b(?:# don't match keywords
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|keyof|valof
      |len|del|to|til|thru|at|by
      |and|x?or|not|para|seq|spawn
      |def|func?|fn|macro|proc|sub
      |let|var|val|const|decl
      |class|given|law|enum|rel|lat
      |proj|prot|ext|impl|frag|inter|struct
      |module|nspace|object|record|label
      |raw|data|query|schema|style|trait|alias|type
      |if|else|elif|eless|unless|guard
      |for|each|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |yield\b\s*\bfrom|import|export|show|hide
      |from|where|join|equals|[io]nto|order
      |take|drop|fold|scan|select|use|using
      |fi|rof|done|esac|wend|yrt|disc|wout
      |open|close
      )\b
      )

      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )

      |
      (?:# Objects and maps
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

      |
      (?:# Regular variables
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      )
      \b\s*
    captures:
      1: {name: variable.other.index.sa}
      2: {name: variable.other.constant.property.sa}
      3: {name: variable.other.property.static.sa}
      4: {name: variable.other.property.sa}
      5: {name: variable.other.global.sa}
      6: {name: variable.other.constant.object.sa}
      7: {name: variable.other.conditional.sa}
      8: {name: variable.other.object.sa}
      9: {name: variable.other.dollar.sa}
      10: {name: variable.other.constant.sa}
      11: {name: variable.other.class.sa}
      12: {name: variable.other.readwrite.sa}

  operators:
    patterns:
      - include: "#special-operators"
      - include: "#unary-ops"
      - include: "#binary-ops"

    repository:
      binary-ops-builtin:
        patterns:
          - comment: augmented assignment += -= *= /= etc
            match: (?<=^|['"\`\\\p{ps}\s])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+(?<![!:~.<=>])=)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.assignment.augmented.sa
          - comment: "assignment : :="
            match: (?<=^|['"\`\\\p{ps}\s])(:?=)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.assignment.sa
          - comment: arithmetic + - * ** *** / // /// % %% *> <*
            match: (?<=^|['"\`\\\p{ps}\s])((?<!<)\+(?!>|\++)|(?<!<)-(?!>|-+)|\*{1,3}|/{1,3}(?!\\)|%%?|\*+>|<\*+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arithmetic.sa
          - comment: increment/decrement ++ --
            match: (?<=^|['"\`\\\p{ps}\s])((?:[+-])+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.successor.sa
          - comment: logical && || ^^ /\ / \ \\ etc.
            match: (?<=^|['"\`\\\p{ps}\s])((?:[&^]){2,}|\|\|+(?!>)|/\\|\\/|\\+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.logical.sa
          - comment: bitwise & | ^ ~
            match: (?<=^|['"\`\\\p{ps}\s])([&^]|\|(?!>)|~(?![!=<>]))(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.bitwise.sa
          - comment: shift << >> <<< >>>>
            match: (?<=^|['"\`\\\p{ps}\s])(<{2,}(?![!:=+|*])|(?<![!:=+|*])>{2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.bitwise.shift.sa
          - comment: function composition +> <+
            match: (?<=^|['"\`\\\p{ps}\s])(<\++|\++>)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.compose.sa
          - comment: pipeline |> <|
            match: (?<=^|['"\`\\\p{ps}\s])(<\|+|\|+>)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.pipeline.sa
          - comment: "class <: :> :< >: <:< >:> <:> >:< <! !> !< >! <!< >!> <!> >!<"
            match: (?<=^|['"\`\\\p{ps}\s])([<>][!:][<>]?|[!:][<>])(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.class.sa
          - comment: relational < > <= >=
            match: (?<=^|['"\`\\\p{ps}\s])([<>]=?)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.relational.sa
          - comment: regex =< <> </ /> <$ $> <$> <+> <*> </> <$> $
            match: (?<=^|['"\`\\\p{ps}\s])(<>|=<|<(?:[/*+$])+>?|(?:[/*+$])+>)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.regexp.sa
          - comment: equality == != === !==
            match: (?<=^|['"\`\\\p{ps}\s])([!=]=+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.comparison.sa
          - comment: similarity operators
            match: (?<=^|['"\`\\\p{ps}\s])([!=~]+~|~[!=~]+|[<~>]+~[<~>]*|~[<~>]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.similarity.sa
          - comment: fat arrow-like => ==> <==
            match: (?<=^|['"\`\\\p{ps}\s])([=>]+|[<=]+|[=>]+[<=]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arrow.fat.sa
          - comment: skinny arrow-like -> <- --> <--
            match: (?<=^|['"\`\\\p{ps}\s])([->]+|[<-]+|[->]+[<-]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arrow.skinny.sa
          - comment: wavy arrow-like ~> <~ ~~> <~~
            match: (?<=^|['"\`\\\p{ps}\s])([~>]+|[<~]+|[~>]+[<~]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arrow.wavy.sa
          - comment: null-coalescing ??
            match: (?<=^|['"\`\\\p{ps}\s])(\?{2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.null-coalescing.sa
          - comment: non-null coalescing !!
            match: (?<=^|['"\`\\\p{ps}\s])(!{2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.coalescing.sa
          - comment: "false coalescing ?:"
            match: (?<=^|['"\`\\\p{ps}\s])(\?+:+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.conditional.sa
          - comment: "true coalescing !:"
            match: (?<=^|['"\`\\\p{ps}\s])(!+:+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.ternary.sa
          - comment: "infix function $:"
            match: (?<=^|['"\`\\\p{ps}\s])(\$+:+|\${2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.macro.dollar.sa
          - comment: custom bitwise (leading &|^ ~)
            match: (?<=^|['"\`\\\p{ps}\s])([&|^~][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.bitwise.sa
          - comment: custom arithmetic (leading + - * / %)
            match: (?<=^|['"\`\\\p{ps}\s])([+\-*/%][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arithmetic.sa
          - comment: "custom accessor (leading : .)"
            match: (?<=^|['"\`\\\p{ps}\s])([:.][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.prototype.sa
          - comment: custom equality (leading = !)
            match: (?<=^|['"\`\\\p{ps}\s])([!=][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.comparison.sa
          - comment: custom comparison (leading < >)
            match: (?<=^|['"\`\\\p{ps}\s])([<>][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.relational.sa
          - comment: custom optional (leading ?)
            match: (?<=^|['"\`\\\p{ps}\s])(\?[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.private.sa
          - comment: custom mathematical (leading Unicode category Sm)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{sm}&&[\x{80}-\x{10ffff}]][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.math.sa
          - comment: custom currency-based (leading Unicode category Sc)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{sc}&&[^$]][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.currency.sa
          - comment: custom ASCII (leading Unicode 0x80 to 0xFF)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[\x{80}-\x{ff}]][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.ascii.sa
          - comment: other custom (leading anything not covered above)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.infix.sa

      binary-ops:
        match: (?<=^|['"\`\\\s\p{ps}])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
        captures:
          0: {patterns: [{include: "#binary-ops-builtin"}]}

      unary-ops:
        patterns:
          - &transfix-operators
            comment: transfix binary operators
            match: |
              (?x)(?<=\b|^|[\p{pe}'"\`\\\s])
              (?:([>.]\.[.<])|(\?\.=?)|(~\.=?)|(!\.=?)|((?:::|\.)=?)|(->))
              (?=\b|$|[\p{ps}'"\`\\\s])
            captures:
              1: {name: keyword.operator.range.sa}
              2: {name: punctuation.accessor.optional.sa}
              3: {name: punctuation.accessor.cascade.sa}
              4: {name: punctuation.accessor.call.sa}
              5: {name: punctuation.accessor.sa}
              6: {name: punctuation.accessor.module.sa}

          - &prefix-operators
            comment: prefix operators
            match: |
              (?x)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]])#14
              (?=[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*
              [\p{l}\p{m}\p{n}\p{ps}_,;'"\`])
            name: keyword.operator.prefix.sa
            captures:
              1: {name: keyword.operator.module.all.sa}
              2: {name: keyword.operator.increment.sa}
              3: {name: keyword.operator.decrement.sa}
              4: {name: keyword.operator.intersection.sa}
              5: {name: keyword.operator.union.sa}
              6: {name: keyword.operator.sym-diff.sa}
              7: {name: keyword.operator.logical.sa}
              8: {name: keyword.operator.private.sa}
              9: {name: keyword.operator.decorator.sa}
              10: {name: keyword.operator.bitwise.not.sa}
              11: {name: keyword.operator.existential.sa}
              12: {name: keyword.operator.assignment.sa}
              13: {name: keyword.operator.pipeline.sa}
              14: {name: keyword.operator.prefix.sa}

          - &suffix-operators
            comment: suffix operators
            match: |
              (?x)
              (?<=[\p{l}\p{m}\p{n}\p{pe}_,;'"\`]
              [\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]])#14
            name: keyword.operator.suffix.sa
            captures:
              1: {name: keyword.operator.module.all.sa}
              2: {name: keyword.operator.increment.sa}
              3: {name: keyword.operator.decrement.sa}
              4: {name: keyword.operator.intersection.sa}
              5: {name: keyword.operator.union.sa}
              6: {name: keyword.operator.sym-diff.sa}
              7: {name: punctuation.accessor.call.sa}
              8: {name: keyword.operator.private.sa}
              9: {name: keyword.operator.decorator.sa}
              10: {name: keyword.operator.bitwise.sa}
              11: {name: punctuation.accessor.optional.sa}
              12: {name: keyword.operator.assignment.sa}
              13: {name: keyword.operator.pipeline.sa}
              14: {name: keyword.operator.suffix.sa}

      pipeline-operator:
        patterns:
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*(?:(\++>)|(\|+>))(?=\s*(
              [\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*# prefix

              (?!
              \b(?:# don't match keywords
              in|of|as|is|new|infer|unset
              |typeof|nameof|sizeof|keyof|valof
              |len|del|to|til|thru|at|by
              |and|x?or|not|para|seq|spawn
              |def|func?|fn|macro|proc|sub
              |let|var|val|const|decl
              |class|given|law|enum|rel|lat
              |proj|prot|ext|impl|frag|inter|struct
              |module|nspace|object|record|label
              |raw|data|query|schema|style|trait|alias|type
              |if|else|elif|eless|unless|guard
              |for|each|while|until|repeat|do|redo
              |switch|case|fail|default|match|when|pass|fallthru
              |try|retry|throw|raise|catch|rescue|finally
              |with|ref|defer|refer|show|hide|enter|exit
              |then|begin|end|debug|check|assert
              |break|continue|halt|skip|fixed|lock
              |(?:return|give|await|yield|throw|raise)s?
              |yield\b\s*\bfrom|import|export|show|hide
              |from|where|join|equals|[io]nto|order
              |take|drop|fold|scan|select|use|using
              |fi|rof|done|esac|wend|yrt|disc|wout
              |open|close
              )\b
              )

              [_\p{l}\p{m}\p{n}]+
              (?:[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*# transfix
              [_\p{l}\p{m}\p{n}]+)*
              [\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*# suffix
              )\s*([^(]|$|;))
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.compose.sa}
              2: {name: keyword.operator.pipeline.sa}
            patterns:
              - match: |
                  (?x)\s*\b

                  (?!
                  \s*\b
                  (?:# don't match keywords
                  new|unset|len|del|to|til|thru|at|by
                  |and|x?or|not|para|seq|spawn
                  |def|func?|fn|macro|proc|sub
                  |let|var|val|const|decl
                  |class|given|law|enum|rel|lat
                  |proj|prot|ext|impl|frag|inter|struct
                  |module|nspace|object|record|label
                  |raw|data|query|schema|style|trait|alias|type
                  |if|else|elif|eless|unless|guard
                  |for|each|while|until|repeat|do|redo
                  |switch|case|fail|default|match|when|pass|fallthru
                  |try|retry|throw|raise|catch|rescue|finally
                  |with|ref|defer|refer|show|hide|enter|exit
                  |then|begin|end|debug|check|assert
                  |break|continue|halt|skip|fixed|lock
                  |(?:return|give|await|yield|throw|raise)s?
                  |yield\b\s*\bfrom|import|export|show|hide
                  |from|where|join|equals|[io]nto|order
                  |take|drop|fold|scan|select|use|using
                  |fi|rof|done|esac|wend|yrt|disc|wout
                  |open|close
                  )\b
                  )

                  (?:
                  (?:# Objects and maps
                  (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
                  ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
                  ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
                  ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
                  )
                  (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

                  |
                  (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
                  (?:# Properties (note all properties are by default, symbols)
                  (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
                  ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
                  ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
                  ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
                  )

                  |
                  (?:# Regular variables
                  (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
                  ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
                  ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
                  ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
                  )
                  )\b
                captures:
                  1: {name: variable.other.global.sa}
                  2: {name: variable.other.constant.object.sa}
                  3: {name: variable.other.conditional.sa}
                  4: {name: variable.other.object.sa}
                  5: {name: entity.name.tag.sa}
                  6: {name: entity.name.tag.sa support.class.component.sa}
                  7: {name: entity.name.class.builtin.sa}
                  8:
                    name: entity.name.function.method.sa
                    patterns: [{include: "#function-names"}]
                  9: {name: entity.name.function.tagged-template.sa}
                  10: {name: entity.name.type.sa}
                  11: {name: entity.name.class.sa}
                  12:
                    name: entity.name.function.sa
                    patterns: [{include: "#function-names"}]
              - *transfix-operators

      special-operators:
        patterns:
          - include: "#pipeline-operator"
          - begin: (?<=\s)(\?)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.conditional.sa}
            patterns:
              - begin: \s*(?=([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\!)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.ternary.sa}
            patterns:
              - begin: \s*(?=([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\$)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.macro.dollar.sa}
            patterns:
              - begin: \s*(?=([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*:)
                end: \s*(?=:\s|$)
                name: entity.name.function.sa
              - include: $self

  constant-types:
    - include: "#literals"

  custom-types:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int

      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?!
      \s*\b
      (?:# don't match keywords
      new|unset|len|del|to|til|thru|at|by
      |and|x?or|not|para|seq|spawn
      |def|func?|fn|macro|proc|sub
      |let|var|val|const|decl
      |class|given|law|enum|rel|lat
      |proj|prot|ext|impl|frag|inter|struct
      |module|nspace|object|record|label
      |raw|data|query|schema|style|trait|alias|type
      |if|else|elif|eless|unless|guard
      |for|each|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |yield\b\s*\bfrom|import|export|show|hide
      |from|where|join|equals|[io]nto|order
      |take|drop|fold|scan|select|use|using
      |fi|rof|done|esac|wend|yrt|disc|wout
      |open|close
      )\b
      )

      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )

      |
      (?:# Objects and maps
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

      |
      (?:# Regular variables
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      )\b
    captures: &custom-types
      1: {name: entity.name.tag.block.sa}
      2: {name: entity.name.tag.script.sa}
      3: {name: entity.name.tag.style.sa}
      4: {name: entity.name.tag.inline.sa}
      5: {name: entity.name.module.sa}
      6: {name: entity.name.tag.sa}
      7: {name: entity.name.namespace.sa}
      8: {name: entity.name.interface.sa}
      9: {name: entity.name.label.sa}
      10: {name: entity.name.project.sa}
      11: {name: entity.name.class.sa}
      12: {name: entity.name.type.sa}

  type-brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

    repository:
      curly-brackets: &type-curly-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.mapping.sa
              - match: (?<!\s):(?!:)
                name: punctuation.separator.key-value.sa
              - match: (?<=^|\p{ps})\s*([*+-](?:\s+[*+-])*)
                name: punctuation.definition.block.sequence.item.saga

        patterns:
          - begin: \s*(\{\|)
            end: \s*(\|\})
            captures:
              1: {name: punctuation.definition.mapping.sa}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\{)
            end: \s*(\})
            captures:
              1: {name: punctuation.definition.dictionary.sa}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      round-brackets: &type-round-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.arguments.sa
        patterns:
          - begin: \s*(\(\|)
            end: \s*(\|\))
            captures:
              1: {name: punctuation.definition.parameters.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      square-brackets: &type-square-brackets
        repository:
          punctuation:
            patterns:
              - match: (?<=\b|^|[\p{pe}'"\`\\\s])(:)(?=\b|$|[\p{ps}'"\`\\\s])
                captures:
                  1: {name: punctuation.separator.slice.sa}
              - match: ","
                name: punctuation.separator.sequence.sa
        patterns:
          - begin: \s*(\[<)
            end: \s*(>\])
            captures:
              1: {name: punctuation.definition.typeparameters.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[\|)
            end: \s*(\|\])
            captures:
              1: {name: punctuation.definition.sequence.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[)
            end: \s*(\])
            captures:
              1: {name: punctuation.definition.array.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

  type-keywords:
    patterns:
      - match: |
          (?x)\s*\b
          (ext)\b\s*
        name: storage.type.extends.sa
      - match: |
          (?x)\s*\b
          (impl)\b\s*
        name: storage.type.implements.sa
      - match: |
          (?x)\s*\b
          ((?:type|name|size|key)of|only|infer|in|of|as|is)\b\s*
        name: keyword.operator.expression.$1.sa
      - match: |
          (?x)\s*\b
          (valof)\b\s*
        name: keyword.operator.expression.valueof.sa

  type-operators:
    patterns:
      - comment: transfix binary operators
        match: |
          (?x)(?<=^|[\p{pe}_\p{l}\p{m}\p{n}'"\`])
          (?:(\?[:.])|(~[:.])|(![:.])|(::|\.)|(->))
          (?=$|[\p{ps}_\p{l}\p{m}\p{n}'"\`])
        captures:
          1: {name: punctuation.accessor.optional.sa}
          2: {name: punctuation.accessor.cascade.sa}
          3: {name: punctuation.accessor.call.sa}
          4: {name: punctuation.accessor.sa}
          5: {name: punctuation.accessor.module.sa}

      - comment: type operators
        match: |
          (?x)\s*(?:
          (\+)|
          (\-)|
          (\*)|
          (\/)|
          (\%)|
          (\!)|
          (\?)|
          (\&)|
          (\|)|
          (\^)|
          (\~)|
          (\$)|
          ([<>])
          )
          (?![\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]])
        captures:
          1: {name: keyword.operator.sum.sa}
          2: {name: keyword.operator.difference.sa}
          3: {name: keyword.operator.product.sa}
          4: {name: keyword.operator.quotient.sa}
          5: {name: keyword.operator.remainder.sa}
          6: {name: keyword.operator.only.sa}
          7: {name: keyword.operator.maybe.sa}
          8: {name: keyword.operator.intersection.sa}
          9: {name: keyword.operator.union.sa}
          10: {name: keyword.operator.sym-diff.sa}
          11: {name: keyword.operator.negation.sa}
          12: {name: keyword.operator.macro.dollar.sa}
          13: {name: keyword.operator.class.sa}

  type-annotation:
    applyEndPatternLast: 1
    begin: (:)(?=\s|$)
    end: (?=\O)|$
    beginCaptures:
      1: {name: punctuation.definition.annotation.sa}
    patterns:
      - include: "#types"

  types:
    patterns:
      - include: "#type-keywords"
      - include: "#modifier-keywords"
      - include: "#constant-types"
      - include: "#type-names"
      - include: "#custom-types"
      - include: "#type-operators"
      - include: "#type-brackets"
      - match: \s*([~=]>)\s*
        name: storage.type.function.arrow.sa

  modifier-keywords:
    match: |
      (?x)
      ((?:
      \s*(?:
      (?:# Access modifiers
      pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
      |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
      # Function or method modifiers
      |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
      |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
      |# Function or method modifiers
      (?:pre|in|post|suf|af|trans|inter)fix|
      (?:u|bi|ter|)nary|oper
      |# Decorators
      @(?:
      [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
      (?:(?:[?!~]?\.|[?!:]:|->)
      (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
      )
      )
      )
      \s*)*)
      (?=\s*\b
      (?:
      def|func?|fn|macro|proc|sub
      |let|va[rl]|const
      |class|ext
      |given|law
      |enum|rel|lat
      |proj
      |frag|struct
      |inter|schema
      |module|lat
      |nspace
      |object|record
      |raw
      |data|query
      |style
      |trait|impl
      |type|alias
      |decl
      |do|redo
      )\b
      )
    captures:
      1:
        patterns: &modifier-keywords
          - match: |
              (?x)\s*@(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )\s*
            name: entity.name.class.decorator.sa
          - match: |
              (?x)\s*
              \s*\b
              (?:
              (# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              )|
              (# Function or method modifiers
              [gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              )|
              (# Property modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              )
              )\b\s*
            captures:
              1: {name: storage.modifier.sa}
              2: {name: storage.type.accessor.sa}
              3: {name: storage.type.property.sa}

  support:
    patterns:
      - include: "#support-constants"
      - include: "#type-names"
      - include: "#support-functions"

  clause-keywords:
    comment: clause keywords
    match: |
      (?x)\s*\b(?:
      (def|func?|fn|macro|proc|sub)# function
      |(let|va[rl]|const)# variable
      |(class|ext)# class
      |(given|law)# constraint
      |(enum|rel|lat)# enumeration
      |(proj)# project
      |(frag|struct)# fragment
      |(inter|schema)# interface
      |(module|lat)# module
      |(nspace)# function
      |(object|record)# object
      |(raw)# markup
      |(data|query)# indented GraphQL
      |(style)# inline CSS
      |(trait|impl)# trait
      |(type|alias)# type alias
      |(decl)# declaration
      )\b\s*
    captures:
      1: {name: storage.type.function.sa}
      2: {name: storage.type.sa}
      3: {name: storage.type.class.sa}
      4: {name: storage.type.constraint.sa}
      5: {name: storage.type.enum.sa}
      6: {name: storage.type.project.sa}
      7: {name: storage.type.fragment.sa}
      8: {name: storage.type.interface.sa}
      9: {name: storage.type.module.sa}
      10: {name: storage.type.namespace.sa}
      11: {name: storage.type.object.sa}
      12: {name: storage.type.raw.sa}
      13: {name: storage.type.schema.sa}
      14: {name: storage.type.style.sa}
      15: {name: storage.type.trait.sa}
      16: {name: keyword.other.typedef.sa}
      17: {name: keyword.other.declare.sa}

  general-keywords:
    comment: general keywords
    match: |
      (?x)\s*\b(?:
      (if|else|elif|eless|unless|guard|fi)#1
      |(for|each|while|until|repeat|rof)#2
      |(switch|case|fail|default|fallthru|esac)#3
      |(match|when|pass|wend)#4
      |(try|retry|throw|raise|catch|rescue|finally|yrt)#5
      |(with|wout)#6
      |(ref|refer|show|hide|enter|exit)#7
      |(then)#8
      |(debug|check|assert)#9
      |(break|continue|halt|skip|return|give|label|await|yield|throw|raise|yield\b\s+\bfrom)# 10
      |((?:im|ex)port|show|hide)# 11
      |(para|seq|spawn|disc)#12
      |(do|redo|done)#13
      |(begin|end)#14
      )\b\s*
    captures:
      1: {name: keyword.control.conditional.sa}
      2: {name: keyword.control.loop.sa}
      3: {name: keyword.control.switch.sa}
      4: {name: keyword.control.match.sa}
      5: {name: keyword.control.error.sa}
      6: {name: keyword.control.with.sa}
      7: {name: keyword.control.sa}
      8: {name: keyword.control.then.sa}
      9: {name: keyword.other.$10.sa}
      10: {name: keyword.control.flow.sa}
      11: {name: keyword.control.module.sa}
      12: {name: keyword.control.thread.sa}
      13: {name: keyword.control.do.sa}
      14: {name: keyword.control.$14.sa}

  expression-keywords:
    comment: expression keywords
    match: |
      (?x)\s*\b(?:
      (in)|(of)|(as)|(is)|(new)|(infer)
      |(typeof|nameof|sizeof|keyof)
      |(valof)|(len)|(del)|(to|til|thru|at|by)|(unset)
      |(and|x?or|not)
      )\b\s*
    captures:
      1: {name: keyword.operator.expression.in.sa}
      2: {name: keyword.operator.expression.of.sa}
      3: {name: keyword.operator.expression.as.sa}
      4: {name: keyword.operator.expression.is.sa}
      5: {name: keyword.operator.expression.new.sa}
      6: {name: keyword.operator.expression.infer.sa}
      7: {name: keyword.operator.expression.$7.sa}
      8: {name: keyword.operator.expression.valueof.sa}
      9: {name: keyword.operator.expression.length.sa}
      10: {name: keyword.operator.expression.delete.sa}
      11: {name: keyword.operator.expression.range.sa}
      12: {name: keyword.operator.expression.void.sa}
      13: {name: keyword.operator.expression.logical.sa}

  keywords:
    patterns:
      - include: "#query-expression"
      - include: "#module-expression"
      - include: "#control-expression"
      - include: "#modifier-keywords"
      - include: "#clause-keywords"
      - include: "#expression-keywords"
      - include: "#general-keywords"

    repository:
      control-expression:
        applyEndPatternLast: 1
        begin: \s*\b(halt|skip|break|continue|goto|label)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.flow.sa}
        patterns:
          - match: \s*([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*
            captures:
              1: {name: constant.other.label.sa}

      module-expression:
        applyEndPatternLast: 1
        begin: \s*\b(import|export|open|close|use|using)\b\s*
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.module.sa}
        patterns:
          - include: "#modifier-keywords"
          - include: "#type-keywords"
          - match: \s*\b(from|to|as|all|any|show|hide|to|and|x?or|not)\b\s*
            name: keyword.control.module.sa
          - match: \s*\*
            name: keyword.operator.module.all.sa
          - include: "#module-string"
          - include: "#type-names"
          - include: "#custom-types"
          - include: "#types"
          - include: "#operators"
          - include: "#punctuation"
        repository:
          module-string:
            patterns:
              - comment: single quoted raw string
                begin: \s*('{3,})
                contentName: string.quoted.template.sa
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.sa}
                patterns:
                  - include: "#embedded-raw"
              - comment: simple single quoted raw string
                begin: \s*(')
                contentName: string.quoted.template.sa
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.sa}
                patterns:
                  - match: "''"
                    name: constant.character.escape.sa
                  - include: "#embedded-raw"
              - comment: double quoted standard string
                begin: \s*("{3,}|")
                contentName: string.quoted.module.sa
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.sa}
                patterns:
                  - include: "#string-escapes"

      query-expression:
        patterns:
          - begin: \s*\b(from)\b\s*
            end: \s*\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.sa}
            patterns:
              - include: $self
          - match: \s*\b((\b(fold|scan)\b)\s*(\b(left|right)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.sa
          - begin: \s*\b(group)\b\s*
            end: \s*\b(by)\b\s*
            captures:
              1: {name: keyword.query.sa}
            patterns:
              - include: $self
          - begin: \s*\b(join)\b\s*
            end: \s*\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.sa}
            patterns:
              - include: $self
          - match: \s*\b(equals?|[io]nto)\b\s*
            name: keyword.query.sa
          - match: \s*\b((\b(order)\b)\s*(\b((a|de)sc)\b)?\s*(\b(by)\b)?)\b\s*
            name: keyword.query.sa
          - match: \s*\b(select)\b\s*
            name: keyword.query.sa
          - match: \s*\b((\b(take|drop)\b)\s*(\b(left|right|init|head|tail|last)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.sa
          - match: \s*\b(where)\b\s*
            name: keyword.query.sa

  parameter-brackets:
    begin: \s*(\()
    end: \s*(\))
    captures:
      1: {name: punctuation.definition.parameters.sa}
    patterns: &function-params
      - include: "#clauses"
      - include: "#keywords"
      - match: (?i)\s*\?[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.optional.sa
      - match: (?i)\s*\*[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.spread.sa
      - match: (?i)\s*\&[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.name.sa
      - match: (?i)\s*\%[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.reference.sa
      - match: (?i)\s*\$[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.other.sa
      - match: (?i)\s*\b[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.sa
      - include: "$self"

  block-entities:
    repository:
      type-square-brackets: *type-square-brackets
      type-round-brackets: *type-round-brackets
      type-curly-brackets: *type-curly-brackets

    patterns:
      - include: "#type-keywords"
      - include: "#type-square-brackets"
      - include: "#parameter-brackets"
      - include: "#round-brackets"
      - include: "#curly-brackets"
      - include: "#type-annotation"
      - include: "#type-operators"
      - *transfix-operators
      - applyEndPatternLast: 1
        begin: \s*(:)(?:(?=::)|(?![\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]))
        end: (?=\O)|$
        beginCaptures:
          1: {name: punctuation.definition.annotation.sa}
        patterns:
          - include: "#types"

  declarations:
    patterns:
      - include: "#function"
      - include: "#raw"
      - include: "#schema"
      - include: "#style"
      - include: "#class"
      - include: "#enum"
      - include: "#interface"
      - include: "#trait"
      - include: "#fragment"
      - include: "#module"
      - include: "#namespace"
      - include: "#object"
      - include: "#constraint"
      - include: "#project"

    repository:
      class:
        applyEndPatternLast: 1
        begin: \s*\b(class|ext)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.class.sa}
          - include: "#block-entities"
      constraint:
        applyEndPatternLast: 1
        begin: \s*\b(given|law)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.constraint.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.constraint.sa}
          - include: "#block-entities"
      enum:
        applyEndPatternLast: 1
        begin: \s*\b(enum|rel)\b\s*
        end: $|(?=.)
        name: meta.enum.declaration.sa
        beginCaptures:
          1: {name: storage.type.enum.sa}
          2: {name: entity.name.enum.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.enum.sa}
          - include: "#block-entities"
      project:
        applyEndPatternLast: 1
        begin: \s*\b(proj|impl)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.project.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.project.sa}
          - include: "#block-entities"
      fragment:
        applyEndPatternLast: 1
        begin: \s*\b(frag|struct)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.fragment.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.fragment.sa}
          - include: "#block-entities"
      function:
        applyEndPatternLast: 1
        begin: \s*\b(def|func?|fn|macro|proc|sub)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.function.sa}
        patterns:
          - match: *entity-name
            captures:
              1:
                name: entity.name.function.sa
                patterns: [{include: "#function-names"}]
          - include: "#block-entities"
      interface:
        applyEndPatternLast: 1
        begin: \s*\b(inter|schema)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.interface.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.interface.sa}
          - include: "#block-entities"
      module:
        applyEndPatternLast: 1
        begin: \s*\b(module|lat)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.module.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.module.sa}
          - include: "#block-entities"
      namespace:
        applyEndPatternLast: 1
        begin: \s*\b(nspace)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.namespace.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.namespace.sa}
          - include: "#block-entities"
      object:
        applyEndPatternLast: 1
        begin: \s*\b(object|record)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.object.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.object.sa}
          - include: "#block-entities"
      raw:
        applyEndPatternLast: 1
        begin: \s*\b(raw)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.raw.sa}
        patterns:
          - match: *entity-name
            name: entity.name.raw.sa
          - include: "#block-entities"
      schema:
        applyEndPatternLast: 1
        begin: \s*\b(data|query)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.schema.sa}
        patterns:
          - match: *entity-name
            name: entity.name.schema.sa
          - include: "#block-entities"
      style:
        applyEndPatternLast: 1
        begin: \s*\b(style)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.style.sa}
        patterns:
          - match: *entity-name
            name: entity.name.style.sa
          - include: "#block-entities"
      trait:
        applyEndPatternLast: 1
        begin: \s*\b(trait|impl)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.trait.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.trait.sa}
          - include: "#block-entities"

  clauses:
    patterns:
      - include: "#variable-clause"
      - include: "#constant-clause"
      - include: "#arguments-clause"
      - include: "#for-clause"
      - include: "#if-clause"
      - include: "#switch-clause"
      - include: "#match-clause"
      - include: "#catch-clause"
      - include: "#with-clause"
      - include: "#thread-clause"
      - include: "#do-clause"
      - include: "#when-clause"
      - include: "#case-clause"
      - include: "#type-clause"
      - include: "#new-clause"
      - include: "#method-clause"
      - include: "#function-clause"

    repository:
      function-params:
        patterns: *function-params

      arguments-clause:
        patterns:
          - begin: (?<=(?:[\p{ps}]\|?|\b(?:do|redo|def|func?|fn|macro|proc|sub)\b)\s*)(\|)(?=[\w\s])
            captures:
              1: {name: punctuation.separator.arguments.sa}
            end: (?<!\|)(\|)(?!\|)
            patterns:
              - include: "#function-params"

      pattern-brackets:
        begin: \s*(\()
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.parameters.sa}
        patterns:
          - include: "#function-params"

      method-clause:
        patterns:
          - begin: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+
              (

              (?:(?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              )\s*\b)*

              )\s*
              (\|)
              (?=[\w\s])
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1:
                name: entity.name.function.method.sa
                patterns: [{include: "#function-names"}]
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.sa}
            endCaptures:
              1: {name: punctuation.separator.arguments.sa}
            patterns:
              - include: "#function-params"
          - comment: |
              Method def before function keyword
              x = def()
            match: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+

              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+

              ((?:
              \s*(?:
              (?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              def|func?|fn|macro|proc|sub
              )\b
              )
            captures:
              1:
                name: entity.name.function.method.sa
                patterns: [{include: "#function-names"}]
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}

      function-clause:
        patterns:
          - begin: |
              (?x)
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+
              (

              (?:(?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              )\s*\b)*

              )\s*
              (\|)
              (?=[\w\s])
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1:
                name: entity.name.function.sa
                patterns: [{include: "#function-names"}]
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.sa}
            endCaptures:
              1: {name: punctuation.separator.arguments.sa}
            patterns:
              - include: "#function-params"
          - comment: |
              Function def before function keyword
              x = def()
            match: |
              (?x)\s*
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+

              ((?:
              \s*(?:
              (?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              def|func?|fn|macro|proc|sub
              )\b
              )
            captures:
              1:
                {
                  name: entity.name.function.sa,
                  patterns: [{include: "#function-names"}],
                }
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}

      variable-clause:
        applyEndPatternLast: 1
        begin: \s*\b(var|let)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: storage.type.sa}
        patterns:
          - include: $self

      constant-clause:
        applyEndPatternLast: 1
        begin: \s*\b(val|const)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: storage.type.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: variable.other.constant.sa}
          - include: "#block-entities"

      new-clause:
        applyEndPatternLast: 1
        begin: \s*\b(new)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.operator.expression.$1.sa}
        patterns:
          - match: \s*([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
            name: entity.name.instance.sa
          - include: "#block-entities"

      type-clause:
        patterns:
          - applyEndPatternLast: 1
            begin: \s*\b(as|is)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.expression.$1.sa}
            patterns:
              - include: "#types"
          - begin: \s*\b(type|alias)\b\s*\b([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\b\s*(?:(:?=)|(:))?\s*
            end: ^(?=\S)|(?!\G)
            name: meta.type-alias.sa
            beginCaptures:
              1: {name: keyword.other.typedef.sa}
              2: {patterns: [{include: "#types"}]}
              3: {name: keyword.operator.assignment.sa}
              4: {name: punctuation.separator.colon.sa}
            patterns:
              - begin: ^((\p{zs})+)(?!\2)
                end: ^(?!\1|\s*$)
                name: meta.type-alias.sa
                patterns:
                  - include: "#types"
              - include: $self
          - applyEndPatternLast: 1
            begin: \s*\b(type|alias)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.other.typedef.sa}
            patterns:
              - match: \s*(:?=)\s*
                captures:
                  1: {name: keyword.operator.assignment.sa}
              - include: "#types"
          - applyEndPatternLast: 1
            begin: \s*\b(decl)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.other.declare.sa}
            patterns:
              - match: \s*(:?=)\s*
                captures:
                  1: {name: keyword.operator.assignment.sa}
              - include: "#types"
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*\b(
              (?:return|give|await|yield|throw|raise)s
              )\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.modifier.sa}
            patterns:
              - include: "#types"

      case-clause:
        begin: \s*\b(case|fail|default)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        beginCaptures:
          1: {name: keyword.control.switch.sa}
        patterns:
          - include: "#clause-content"

      catch-clause:
        begin: \s*\b(try|retry|catch|rescue|finally)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.catch.sa
        beginCaptures:
          1: {name: keyword.control.error.sa}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.error.sa
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.error.sa
          - include: "#clause-content"

      thread-clause:
        begin: \s*\b(para|seq|spawn|fixed|lock)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.thread.sa
        beginCaptures:
          1: {name: keyword.control.thread.sa}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            beginCaptures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.thread.sa
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.thread.sa
          - include: "#clause-content"

      do-clause:
        begin: \s*\b(do|redo)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.do.sa
        beginCaptures:
          1: {name: keyword.control.do.sa}
        patterns:
          - include: "#clause-content"

      for-clause:
        begin: \s*\b(for|each|while|until|repeat)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.for.sa
        beginCaptures:
          1: {name: keyword.control.loop.sa}
        patterns:
          - match: \s*\b(in|of|to|til|thru|at|by)\b
            name: keyword.control.loop.sa
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(in|of|to|til|thru|at|by)\b
                name: keyword.control.loop.sa
              - include: $self
          - include: "#clause-content"

      if-clause:
        begin: \s*\b(if|elif|else|unless|eless|guard)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.if.sa
        beginCaptures:
          1: {name: keyword.control.conditional.sa}
        patterns:
          - include: "#clause-content"

      match-clause:
        begin: \s*\b(match)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.match.sa
        beginCaptures:
          1: {name: keyword.control.match.sa}
        patterns:
          - include: "#clause-content"

      switch-clause:
        begin: \s*\b(switch)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.switch.sa
        beginCaptures:
          1: {name: keyword.control.switch.sa}
        patterns:
          - include: "#clause-content"

      when-clause:
        begin: \s*\b(when)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        beginCaptures:
          1: {name: keyword.control.match.sa}
        patterns:
          - applyEndPatternLast: 1
            begin: \s*\b(as|is)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.match.sa}
            patterns:
              - include: "#types"
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*\b((?:return|give|await|yield|throw|raise)s?)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.match.sa}
            patterns:
              - include: "#types"
          - begin: \s*\b(if|elif|else|unless|eless|guard)\b
            end: (?=[\p{pe};]|:(?=\s+|$)|(?<=\s)(?:->|\b(?:begin|then))|$)
            endCaptures:
              0: {name: punctuation.separator.colon.sa}
            beginCaptures:
              1: {name: keyword.control.match.sa}
            patterns:
              - include: $self
          - include: "#type-operators"
          - include: "#clause-content"

      with-clause:
        begin: \s*\b(with)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.with.sa
        beginCaptures:
          1: {name: keyword.control.with.sa}
        patterns:
          - begin: \s*
            end: \s*(?=[{,])
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.with.sa
              - include: $self
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.with.sa
              - include: $self
          - include: "#clause-content"

  punctuation:
    patterns:
      - include: "#line-continuation"
      - include: "#comma"
      - include: "#right-arrow"
      - include: "#semicolon"
      - include: "#double-semi"

    repository:
      line-continuation:
        match: (\\)\s*(?=#|$)
        captures:
          1: {name: punctuation.separator.continuation.line.sa}
      comma:
        match: \s*(,)
        captures:
          1: {name: punctuation.separator.comma.sa}
      right-arrow:
        match: (?:^|['"\`\\\p{ps}\s]*)(->)(?:$|['"\`\\\s\p{pe}])
        captures:
          1: {name: punctuation.definition.arrow.sa}
      double-semi:
        match: \s*(;;)
        captures:
          1: {name: punctuation.terminator.statement.sa}
      semicolon:
        match: \s*(;)(?!;)
        captures:
          1: {name: punctuation.terminator.expression.sa}

  brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

  curly-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.mapping.sa
          - match: (?<!\s):(?!:)
            name: punctuation.separator.key-value.sa
          - match: (?<=^|\p{ps})\s*([*+-](?:\s+[*+-])*)
            name: punctuation.definition.block.sequence.item.saga

    patterns:
      - begin: (\{\|)\s*
        end: \s*(\|\})
        captures:
          1: {name: punctuation.definition.mapping.sa}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self
      - begin: (\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.dictionary.sa}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self

  round-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.arguments.sa

    patterns:
      - begin: (\(\|)\s*
        end: \s*(\|\))
        captures:
          1: {name: punctuation.definition.parameters.sa}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.expression.sa}
        patterns:
          - include: "#punctuation"
          - include: $self

  square-brackets:
    repository:
      punctuation:
        patterns:
          - match: (?<=\b|^|[\p{pe}'"\`\\\s])(:)(?=\b|$|[\p{ps}'"\`\\\s])
            captures:
              1: {name: punctuation.separator.slice.sa}
          - match: ","
            name: punctuation.separator.sequence.sa

    patterns:
      - begin: (\[<)\s*
        end: \s*(>\])
        captures:
          1: {name: punctuation.definition.typeparameters.sa}
        patterns:
          - include: "#types"
          - include: $self
      - begin: (\[\|)\s*
        end: \s*(\|\])
        captures:
          1: {name: punctuation.definition.sequence.sa}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\[)\s*
        end: \s*(\])
        captures:
          1: {name: punctuation.definition.array.sa}
        patterns:
          - include: "#punctuation"
          - include: $self

  embedded-langs:
    patterns:
      - include: "#raw-haml"
      - include: "#raw-stylus"
      - include: "#raw-yaml"
      - include: "#raw-python"
      - include: "#raw-ruby"
      - include: "#raw-pug"
      - include: "#raw-markdown"
      - include: "#raw-css"
      - include: "#raw-scss"
      - include: "#raw-less"
      - include: "#raw-html"
      - include: "#raw-javascript"
      - include: "#raw-typescript"
      - include: "#raw-other"

    repository:
      raw-yaml:
        begin: \s*\b(raw)\b\s*\b((?i:yaml))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.yaml.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.yaml.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.yaml
          - include: $self
      raw-python:
        begin: \s*\b(raw)\b\s*\b((?i:py|python))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.python.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.python.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.python
          - include: $self
      raw-ruby:
        begin: \s*\b(raw)\b\s*\b((?i:rb|ruby))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.ruby.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.ruby.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.ruby
          - include: $self
      raw-css:
        begin: \s*\b(raw)\b\s*\b((?i:css))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.css.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.css.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.css
          - include: $self
      raw-javascript:
        begin: \s*\b(raw)\b\s*\b((?i:js|javascript))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.js.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.js.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.js
          - include: $self
      raw-typescript:
        begin: \s*\b(raw)\b\s*\b((?i:ts|typescript))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.ts.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.ts.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.ts
          - include: $self
      raw-html:
        begin: \s*\b(raw)\b\s*\b((?i:html))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.html.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.html.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.html
          - include: $self
      raw-scss:
        begin: \s*\b(raw)\b\s*\b((?i:s[ca]ss))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.scss.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.scss.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.css.scss
          - include: $self
      raw-less:
        begin: \s*\b(raw)\b\s*\b((?i:less))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.less.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.less.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.less
          - include: $self
      raw-pug:
        begin: \s*\b(raw)\b\s*\b((?i:pug))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.pug.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.pug.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.pug
          - include: $self
      raw-markdown:
        begin: \s*\b(raw)\b\s*\b((?i:md|mdown|markdown))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.markdown.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.markdown.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.html.markdown
          - include: $self
      raw-haml:
        begin: \s*\b(raw)\b\s*\b((?i:haml))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.haml.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.haml.sa
            patterns:
              - include: "#embedded-raw"
              - include: "#embedded-haml"
          - include: $self
      raw-stylus:
        begin: \s*\b(raw)\b\s*\b((?i:styl|stylus))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.stylus.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.stylus.sa
            patterns:
              - include: "#embedded-raw"
              - include: "#embedded-stylus"
          - include: $self
      raw-other:
        begin: \s*\b(raw)\b\s*\b([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.other.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.in.sa
            patterns:
              - include: "#embedded-raw"
          - include: $self

name: SagaScript
scopeName: source.coffee
fileTypes: [sa, coffee]
patterns: [{include: "#core"}]

information_for_contributors: |
  SagaScript is a modern functional, imperative and object-oriented programming language
  with a syntax inspired by Python, and compile(s) to JavaScript and WebAssembly.

  SagaScript is additionally inspired by Ruby, Elixir, Clojure, LiveScript, Haskell, OCaml, Go,
  Scala, Flix, Nim, Bash and YAML.

  Should you want to provide a fix or improvement, or even a new feature,
  please create a pull request against this repo - https://github.com/nxltm/sagascript
  and I will be very happy to receive them.

  Once accepted, I am happy to receive your request and feedback.

  This document is always under construction, and there's still a couple of things that
  need to be fixed. All this info would be on my Trello which I will be posting very soon.
  I will come back to fix them if I have the time.

define:
  number-literal: &number-literal
    1: {name: storage.type.numeric.sa}
    2: {name: punctuation.separator.decimal.period.sa}
    3: {name: constant.numeric.other.separator.sa}
    4: {name: constant.numeric.other.exponent.sa}
    5: {name: constant.numeric.other.density.sa}
    6: {name: storage.type.numeric.sa}

  entity-name: &entity-name |
    (?x)\s*\b

    (?!
    \b(?:# don't match keywords
    in|of|as|is|new|infer|unset
    |typeof|nameof|sizeof|keyof|valof
    |len|del|to|til|thru|at|by
    |and|x?or|not|para|seq|spawn
    |def|func?|fn|macro|proc|sub
    |let|var|val|const|decl
    |class|given|law|enum|rel|lat
    |proj|prot|ext|impl|frag|inter|struct
    |module|nspace|object|record|label
    |raw|data|query|schema|style|trait|alias|type
    |if|else|elif|eless|unless|guard
    |for|each|while|until|repeat|do|redo
    |switch|case|fail|default|match|when|pass|fallthru
    |try|retry|throw|raise|catch|rescue|finally
    |with|ref|defer|refer|show|hide|enter|exit
    |then|begin|end|debug|check|assert
    |break|continue|halt|skip|fixed|lock
    |(?:return|give|await|yield|throw|raise)s?
    |yield\b\s*\bfrom|import|export|show|hide
    |from|where|join|equals|[io]nto|order
    |take|drop|fold|scan|select|use|using
    |fi|rof|done|esac|wend|yrt|disc|wout
    |open|close
    )\b
    )

    ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
    \b

  posix-class: &posix-class |
    (?xi)
    \\o|
    \\p(?:
    # POSIX
    alpha|alnum|ascii|blank|cntrl|x?digit
    |graph|lower|print|punct|space|upper|word
    # Extended-POSIX
    |symbol|open|close|dash|link|start|final|math|money
    |number|letter|title|mark|modify
    |bin|qua|sen|oct|dec|doz|hex
    )

repository:
  core:
    patterns:
      - include: "#embedded-langs"
      - include: "#clauses"
      - include: "#declarations"
      - include: "#keywords"
      - include: "#comments"
      - include: "#brackets"
      - include: "#punctuation"
      - include: "#type-annotation"
      - include: "#operators"
      - include: "#literals"
      - include: "#calls"
      - include: "#variables"
      - include: "#illegal"

  illegal:
    patterns:
      - match: '\p{n}[\p{l}\p{m}\p{n}_.+-/\\]*?'
        name: invalid.illegal.numeric.other.sa
      - match: '[_\p{l}\p{m}\p{n}]+?'
        name: invalid.illegal.variable.other.sa
      - match: '[\p{ps}\p{pe}]+?'
        name: invalid.illegal.missing-bracket.sa
      - match: '\S+?'
        name: invalid.illegal.syntax.sa

  entities:
    patterns:
      - include: "#function-names"
      - include: "#constant-names"
      - include: "#type-names"
      - include: "#variable-names"

  class-names:
    comment: Names for built-in classes
    patterns:
      - comment:

  type-names:
    comment: Names for built-in types
    patterns:
      - comment: primitive data types
        match: |
          (?x)\s*\b(
          bool|u?int|float|nat|ratio|real|imag|complex|number
          |char|rune|string|symbol|regexp?|func|buffer|binary
          |# numeric types
          (?:c|i|f|s|u|n|[nr]at|u?int|float|imag|comp)
          (?:8|16|32|64|128)
          |(?:c|i|)(?:half|float|double|quad|octa)
          )\b
        name: support.type.builtin.primitive.sa
      - comment: built-in constant types and data structures
        match: |
          (?x)\s*\b(
          true|yes|on|false|no|off|null|nil|none|undef|void|nan|inf|infin
          |any|empty|object|record|unit|mixed
          |array|tuple|(?:mut)?(?:list|set|map)|dict|seq|gen|range
          )\b
        name: support.type.builtin.sa
      - comment: built-in primitive classes
        match: |
          (?x)\s*\b(
          Bool|U?Int|Float|Nat|Ratio|Real|Imag|Complex|Number
          |Char|Rune|String|Symbol|RegExp?|Func|Buffer|Binary
          |# numeric types
          (?:C|I|F|S|U|N|[NR]at|U?Int|Real|Imag|Comp)
          (?:8|16|32|64|128)
          |(?:C|I|)(?:Half|Float|Double|Quad|Octa)
          )\b
        name: support.type.builtin.class.sa
      - comment: built-in primitive type classes
        match: |
          (?x)\s*\b(
          True|Yes|On|False|No|Off|Null|Nil|None|Undef|Void|NaN|Inf|Infin
          |Any|Empty|Object|Record|Unit|Mixed
          |Array|Tuple|(?:Mut)?(?:List|Set|Map)|Dict|Seq|Gen|Range
          )\b
        name: support.type.class.sa
      - comment: interface classes (beginning with I)
        match: (?x)\s*\b(I((\p{lu}\p{ll}*)+))\b
        name: entity.name.interface.sa
      - comment: namespace classes (beginning with NS)
        match: (?x)\s*\b(NS((\p{lu}\p{ll}*)+))\b
        name: entity.name.namespace.sa
      - comment: error classes (ending with Error)
        match: (?x)\s*\b(((\p{lu}\p{ll}*)+)Error)\b
        name: support.class.error.sa
      # - match: \s*\b(?:callergraph|callgraph|else|endif|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|)\b
      #   name: storage.type.class.doxygen.sa
      # - match: \s*\b(?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\b
      #   name: storage.type.class.doxygen.sa
      # - match: \s*\b(?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\b
      #   name: storage.type.class.doxygen.sa
      # - match: \s*\b(?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\b
      #   name: storage.type.class.doxygen.sa
      # - match: \s*\b(?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\b
      #   name: storage.type.class.doxygen.sa
      # - match: \s*\b(?xi:(?:unsigned|signed|double|_Bool|short|float|long|void|char|bool|int))\b
      #   name: storage.type.built-in.primitive.sa
      # - match: \s*\b(?xi:(?:atomic_uint_least64_t|atomic_uint_least16_t|atomic_uint_least32_t|pthread_rwlockattr_t|atomic_uint_fast64_t|atomic_uint_fast32_t|atomic_uint_fast16_t|atomic_int_least64_t|atomic_int_least32_t|atomic_int_least16_t|atomic_uint_least8_t|atomic_uint_fast8_t|atomic_int_least8_t|atomic_int_fast16_t|pthread_mutexattr_t|atomic_int_fast32_t|atomic_int_fast64_t|atomic_int_fast8_t|pthread_condattr_t|atomic_ptrdiff_t|pthread_rwlock_t|atomic_uintptr_t|atomic_uintmax_t|atomic_intmax_t|atomic_intptr_t|atomic_char32_t|atomic_char16_t|pthread_mutex_t|pthread_cond_t|atomic_wchar_t|uint_least64_t|uint_least32_t|uint_least16_t|pthread_once_t|pthread_attr_t|int_least32_t|pthread_key_t|int_least16_t|int_least64_t|uint_least8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|atomic_ushort|atomic_ullong|atomic_size_t|int_fast16_t|int_fast64_t|uint_fast8_t|atomic_short|atomic_uchar|atomic_schar|int_least8_t|memory_order|atomic_llong|atomic_ulong|int_fast32_t|atomic_long|atomic_uint|atomic_char|int_fast8_t|suseconds_t|atomic_bool|atomic_int|_Imaginary|useconds_t|in_port_t|uintmax_t|uintmax_t|pthread_t|blksize_t|in_addr_t|uintptr_t|blkcnt_t|uint16_t|uint32_t|uint64_t|u_quad_t|_Complex|intptr_t|intmax_t|intmax_t|segsz_t|u_short|nlink_t|uint8_t|int64_t|int32_t|int16_t|fixpt_t|daddr_t|caddr_t|qaddr_t|ssize_t|clock_t|swblk_t|u_long|mode_t|int8_t|time_t|ushort|u_char|quad_t|size_t|pid_t|gid_t|uid_t|dev_t|div_t|off_t|u_int|key_t|ino_t|uint|id_t|id_t))\b
      #   name: storage.type.built-in.sa
      # - match: \s*\b(?xi:(enum|struct|union))\b
      #   name: storage.type.$1.sa
      # - match: \s*\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\b
      #   name: support.type.sys-types.c
      # - match: \s*\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      #   name: support.type.pthread.c
      # - match: \s*\b(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)\b
      #   name: support.type.stdint.c
      # - match: \s*\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      #   name: support.constant.mac-classic.sa
      # - match: \s*\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      #   name: support.type.mac-classic.sa
      # - match: \s*\b([A-Za-z0-9_]+_t)\b
      #   name: support.type.posix-reserved.sa
      # - name: support.type.other.sa
      #   match: \s*\b(string)\b
      # - name: support.type.object.sa
      #   match: \s*\b(AppendStructuredBuffer|Buffer|ByteAddressBuffer|ConstantBuffer|ConsumeStructuredBuffer|InputPatch|OutputPatch)\b
      # - name: support.type.object.rasterizerordered.sa
      #   match: \s*\b(RasterizerOrderedBuffer|RasterizerOrderedByteAddressBuffer|RasterizerOrderedStructuredBuffer|RasterizerOrderedTexture1D|RasterizerOrderedTexture1DArray|RasterizerOrderedTexture2D|RasterizerOrderedTexture2DArray|RasterizerOrderedTexture3D)\b
      # - name: support.type.object.rw.sa
      #   match: \s*\b(RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture1D|RWTexture1DArray|RWTexture2D|RWTexture2DArray|RWTexture3D)\b
      # - name: support.type.object.geometryshader.sa
      #   match: \s*\b(LineStream|PointStream|TriangleStream)\b
      # - name: support.type.sampler.legacy.sa
      #   match: \s*\b(sampler|sampler1D|sampler2D|sampler3D|samplerCUBE|sampler_state)\b
      # - name: support.type.sampler.sa
      #   match: \s*\b(SamplerState|SamplerComparisonState)\b
      # - name: support.type.texture.legacy.sa
      #   match: \s*\b(texture2D|textureCUBE)\b
      # - name: support.type.texture.sa
      #   match: \s*\b(Texture1D|Texture1DArray|Texture2D|Texture2DArray|Texture2DMS|Texture2DMSArray|Texture3D|TextureCube|TextureCubeArray)\b
      # - name: storage.type.structured.sa
      #   match: \s*\b(cbuffer|class|interface|namespace|struct|tbuffer)\b
      # - name: support.constant.property-value.fx.sa
      #   match: \s*\b(FALSE|TRUE|NULL)\b
      # - name: support.type.fx.sa
      #   match: \s*\b(BlendState|DepthStencilState|RasterizerState)\b
      # - name: storage.type.fx.technique.sa
      #   match: \s*\b(technique|Technique|technique10|technique11|pass)\b

  function-names:
    comment: Names for built-in functions (initial dump)
    patterns:
      - match: (?x)\s*\b(import|abs|all|any|ascii|bin|breakpoint|callable|chr|compile|copyright|credits|delattr|dir|divmod|enumerate|eval|exec|exit|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|license|locals|map|max|memoryview|min|next|oct|open|ord|pow|print|quit|range|reload|repr|reversed|round|setattr|sorted|sum|vars|zip)\b\s*
        name: support.function.builtin.sa
      - match: (?i)\s*\b((?:abs|add|aenter|aexit|aiter|and|anext|await|bool|call|ceil|cmp|coerce|complex|contains|copy|deepcopy|del|delattr|delete|delitem|delslice|dir|div|divmod|enter|eq|exit|float|floor|floordiv|format|ge|get|getattr|getattribute|getinitargs|getitem|getnewargs|getslice|getstate|gt|hash|hex|iadd|iand|idiv|ifloordiv|ilshift|imod|imul|index|init|instancecheck|int|invert|ior|ipow|irshift|isub|iter|itruediv|ixor|le|len|long|lshift|lt|missing|mod|mul|ne|neg|new|next|nonzero|oct|or|pos|pow|radd|rand|rdiv|rdivmod|reduce|reduce_ex|repr|reversed|rfloordiv|rlshift|rmod|rmul|ror|round|rpow|rrshift|rshift|rsub|rtruediv|rxor|set|setattr|setitem|setslice|setstate|sizeof|str|sub|subclasscheck|truediv|trunc|unicode|xor|matmul|rmatmul|imatmul|init_subclass|set_name|fspath|bytes|prepare))\b\s*
        name: support.function.magic.sa
      - match: (?i)\s*\b(alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)\b\s*
        name: support.function.shell.sa
      - match: (?i)\s*\b(headings|stylesheet_url|rgba?|hsla?|ie_hex_str|red|green|blue|alpha|opacity|hue|saturation|lightness|prefixed|prefix|_moz|_svg|_css2|_pie|_webkit|_ms|font_(?:files|url)|grid_image|image_(?:width|height|url|color)|sprites?|sprite_(?:map|map_name|file|url|position)|inline_(?:font_files|image)|opposite_position|grad_point|grad_end_position|color_stops|color_stops_in_percentages|grad_color_stops|(?:radial|linear)_(?:gradient|svg_gradient)|opacify|fade_?in|transparentize|fade_?out|lighten|darken|saturate|desaturate|grayscale|adjust_(?:hue|lightness|saturation|color)|scale_(?:lightness|saturation|color)|change_color|spin|complement|invert|mix|_compass_(?:list|space_list|slice|nth|list_size)|blank|compact|nth|first_value_of|join|length|append|nest|append_selector|headers|enumerate|range|percentage|unitless|unit|if|type_of|comparable|elements_of_type|quote|unquote|escape|e|sin|cos|tan|abs|round|ceil|floor|pi|translate(?:X|Y))\b\s*
        name: support.function.misc.sa
      - match: (?i)\s*\b(eager|hyper|substr|index|rindex|grep|map|sort|join|lines|hints|chmod|split|reduce|min|max|reverse|truncate|zip|cat|roundrobin|classify|first|sum|keys|values|pairs|defined|delete|exists|elems|end|kv|any|all|one|wrap|shape|key|value|name|pop|push|shift|splice|unshift|floor|ceiling|abs|exp|log|log10|rand|sign|sqrt|sin|cos|tan|round|strand|roots|cis|unpolar|polar|atan2|pick|chop|p5chop|chomp|p5chomp|lc|lcfirst|uc|ucfirst|capitalize|normalize|pack|unpack|quotemeta|comb|samecase|sameaccent|chars|nfd|nfc|nfkd|nfkc|printf|sprintf|caller|evalfile|run|runinstead|nothing|want|bless|chr|ord|gmtime|time|eof|localtime|gethost|getpw|chroot|getlogin|getpeername|kill|fork|wait|perl|graphs|codes|bytes|clone|print|open|read|write|readline|say|seek|close|opendir|readdir|slurp|spurt|shell|run|pos|fmt|vec|link|unlink|symlink|uniq|pair|asin|atan|sec|cosec|cotan|asec|acosec|acotan|sinh|cosh|tanh|asinh|done|acos|acosh|atanh|sech|cosech|cotanh|sech|acosech|acotanh|asech|ok|nok|plan_ok|dies_ok|lives_ok|skip|todo|pass|flunk|force_todo|use_ok|isa_ok|diag|is_deeply|isnt|like|skip_rest|unlike|cmp_ok|eval_dies_ok|nok_error|eval_lives_ok|approx|is_approx|throws_ok|version_lt|plan|EVAL|succ|pred|times|nonce|once|signature|new|connect|operator|undef|undefine|sleep|from|to|infix|postfix|prefix|circumfix|postcircumfix|minmax|lazy|count|unwrap|getc|pi|e|context|void|quasi|body|each|contains|rewinddir|subst|can|isa|flush|arity|assuming|rewind|callwith|callsame|nextwith|nextsame|attr|eval_elsewhere|none|srand|trim|trim_start|trim_end|lastcall|WHAT|WHERE|HOW|WHICH|VAR|WHO|WHENCE|ACCEPTS|REJECTS|not|true|iterator|by|re|im|invert|flip|gist|flat|tree|is_prime|throws_like|trans)\b\s*
        name: support.function.perl.sa
      - match: (?i)\s*\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\b\s*
        name: support.function.lua.sa
      - match: (?i)\s*\b(coroutine_(create|resume|running|status|wrap|yield)|string_(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table_(concat|insert|maxn|remove|sort)|math_(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io_(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os_(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package_(cpath|loaded|loadlib|path|preload|seeall)|debug_(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\b\s*
        name: support.function.library.sa
      - match: (?i)\s*\b(abbreviate|abs|acos|acosh|addNA|addTaskCallback|agrep|agrepl|alist|all|all_equal|all_equal_character|all_equal_default|all_equal_environment|all_equal_envRefClass|all_equal_factor|all_equal_formula|all_equal_language|all_equal_list|all_equal_numeric|all_equal_POSIXt|all_equal_raw|all_names|all_vars|any|anyDuplicated|anyDuplicated_array|anyDuplicated_data_frame|anyDuplicated_default|anyDuplicated_matrix|anyNA|anyNA_numeric_version|anyNA_POSIXlt|aperm|aperm_default|aperm_table|append|apply|Arg|args|array|arrayInd|as_array|as_array_default|as_call|as_character|as_character_condition|as_character_Date|as_character_default|as_character_error|as_character_factor|as_character_hexmode|as_character_numeric_version|as_character_octmode|as_character_POSIXt|as_character_srcref|as_complex|as_data_frame|as_data_frame_array|as_data_frame_AsIs|as_data_frame_character|as_data_frame_complex|as_data_frame_data_frame|as_data_frame_Date|as_data_frame_default|as_data_frame_difftime|as_data_frame_factor|as_data_frame_integer|as_data_frame_list|as_data_frame_logical|as_data_frame_matrix|as_data_frame_model_matrix|as_data_frame_noquote|as_data_frame_numeric|as_data_frame_numeric_version|as_data_frame_ordered|as_data_frame_POSIXct|as_data_frame_POSIXlt|as_data_frame_raw|as_data_frame_table|as_data_frame_ts|as_data_frame_vector|as_Date|as_Date_character|as_Date_date|as_Date_dates|as_Date_default|as_Date_factor|as_Date_numeric|as_Date_POSIXct|as_Date_POSIXlt|as_difftime|as_double|as_double_difftime|as_double_POSIXlt|as_environment|as_expression|as_expression_default|as_factor|as_function|as_function_default|as_hexmode|as_integer|as_list|as_list_data_frame|as_list_Date|as_list_default|as_list_environment|as_list_factor|as_list_function|as_list_numeric_version|as_list_POSIXct|as_logical|as_logical_factor|as_matrix|as_matrix_data_frame|as_matrix_default|as_matrix_noquote|as_matrix_POSIXlt|as_name|as_null|as_null_default|as_numeric|as_numeric_version|as_octmode|as_ordered|as_package_version|as_pairlist|as_POSIXct|as_POSIXct_date|as_POSIXct_Date|as_POSIXct_dates|as_POSIXct_default|as_POSIXct_numeric|as_POSIXct_POSIXlt|as_POSIXlt|as_POSIXlt_character|as_POSIXlt_date|as_POSIXlt_Date|as_POSIXlt_dates|as_POSIXlt_default|as_POSIXlt_factor|as_POSIXlt_numeric|as_POSIXlt_POSIXct|as_qr|as_raw|as_single|as_single_default|as_symbol|as_table|as_table_default|as_vector|as_vector_factor|asin|asinh|asNamespace|asS3|asS4|assign|atan|atan2|atanh|attach|attachNamespace|attr|attr_all_equal|attributes|autoload|autoloader|backsolve|baseenv|basename|besselI|besselJ|besselK|besselY|beta|bindingIsActive|bindingIsLocked|bindtextdomain|bitwAnd|bitwNot|bitwOr|bitwShiftL|bitwShiftR|bitwXor|body|bquote|break|browser|browserCondition|browserSetDebug|browserText|builtins|by|by_data_frame|by_default|bzfile|c|c_Date|c_difftime|c_noquote|c_numeric_version|c_POSIXct|c_POSIXlt|c_warnings|call|callCC|capabilities|casefold|cat|cbind|cbind_data_frame|ceiling|char_expand|character|charmatch|charToRaw|chartr|check_tzones|chkDots|chol|chol_default|chol2inv|choose|class|clearPushBack|close|close_connection|close_srcfile|close_srcfilealias|closeAllConnections|col|colMeans|colnames|colSums|commandArgs|comment|complex|computeRestarts|conditionCall|conditionCall_condition|conditionMessage|conditionMessage_condition|conflicts|Conj|contributors|cos|cosh|cospi|crossprod|Cstack_info|cummax|cummin|cumprod|cumsum|curlGetHeaders|cut|cut_Date|cut_default|cut_POSIXt|data_class|data_frame|data_matrix|date|debug|debuggingState|debugonce|default_stringsAsFactors|delayedAssign|deparse|det|detach|determinant|determinant_matrix|dget|diag|diff|diff_Date|diff_default|diff_difftime|diff_POSIXt|difftime|digamma|dim|dim_data_frame|dimnames|dimnames_data_frame|dir|dir_create|dir_exists|dirname|do_call|dontCheck|double|dput|dQuote|drop|droplevels|droplevels_data_frame|droplevels_factor|dump|duplicated|duplicated_array|duplicated_data_frame|duplicated_default|duplicated_matrix|duplicated_numeric_version|duplicated_POSIXlt|duplicated_warnings|dyn_load|dyn_unload|dynGet|eapply|eigen|emptyenv|enc2native|enc2utf8|encodeString|Encoding|endsWith|enquote|env_profile|environment|environmentIsLocked|environmentName|eval|eval_parent|evalq|exists|exp|expand_grid|expm1|expression|extSoftVersion|factor|factorial|fifo|file|file_access|file_append|file_choose|file_copy|file_create|file_exists|file_info|file_link|file_mode|file_mtime|file_path|file_remove|file_rename|file_show|file_size|file_symlink|Filter|Find|find_package|findInterval|findPackageEnv|findRestart|floor|flush|flush_connection|for|force|forceAndCall|formals|format|format_AsIs|format_data_frame|format_Date|format_default|format_difftime|format_factor|format_hexmode|format_info|format_libraryIQR|format_numeric_version|format_octmode|format_packageInfo|format_POSIXct|format_POSIXlt|format_pval|format_summaryDefault|formatC|formatDL|forwardsolve|function|gamma|gc|gc_time|gcinfo|gctorture|gctorture2|get|get0|getAllConnections|getCallingDLL|getCallingDLLe|getConnection|getDLLRegisteredRoutines|getDLLRegisteredRoutines_character|getDLLRegisteredRoutines_DLLInfo|getElement|geterrmessage|getExportedValue|getHook|getLoadedDLLs|getNamespace|getNamespaceExports|getNamespaceImports|getNamespaceInfo|getNamespaceName|getNamespaceUsers|getNamespaceVersion|getNativeSymbolInfo|getOption|getRversion|getSrcLines|getTaskCallbackNames|gettext|gettextf|getwd|gl|globalenv|gregexpr|grep|grepl|grepRaw|grouping|gsub|gzcon|gzfile|I|iconv|iconvlist|icuGetCollate|icuSetCollate|identical|identity|if|ifelse|Im|importIntoEnv|inherits|integer|interaction|interactive|intersect|intToBits|intToUtf8|inverse_rle|invisible|invokeRestart|invokeRestartInteractively|is_array|is_atomic|is_call|is_character|is_complex|is_data_frame|is_double|is_element|is_environment|is_expression|is_factor|is_finite|is_function|is_infinite|is_integer|is_language|is_list|is_loaded|is_logical|is_matrix|is_na|is_na_data_frame|is_na_numeric_version|is_na_POSIXlt|is_name|is_nan|is_null|is_numeric|is_numeric_version|is_numeric_Date|is_numeric_difftime|is_numeric_POSIXt|is_object|is_ordered|is_package_version|is_pairlist|is_primitive|is_qr|is_R|is_raw|is_recursive|is_single|is_symbol|is_table|is_unsorted|is_vector|isatty|isBaseNamespace|isdebugged|isIncomplete|isNamespace|isNamespaceLoaded|ISOdate|ISOdatetime|isOpen|isRestart|isS4|isSeekable|isSymmetric|isSymmetric_matrix|isTRUE|jitter|julian|julian_Date|julian_POSIXt|kappa|kappa_default|kappa_lm|kappa_qr|kronecker|l10n_info|La_library|La_version|La_svd|labels|labels_default|lapply|lazyLoad|lazyLoadDBexec|lazyLoadDBfetch|lbeta|lchoose|length|length_POSIXlt|lengths|levels|levels_default|lfactorial|lgamma|libcurlVersion|library|library_dynam|library_dynam_unload|licence|license|list|list_dirs|list_files|list2env|load|loadedNamespaces|loadingNamespaceInfo|loadNamespace|local|lockBinding|lockEnvironment|log|log10|log1p|log2|logb|logical|lower_tri|ls|make_names|make_unique|makeActiveBinding|Map|mapply|margin_table|mat_or_vec|match|match_arg|match_call|match_fun|Math_data_frame|Math_Date|Math_difftime|Math_factor|Math_POSIXt|matrix|max|max_col|mean|mean_Date|mean_default|mean_difftime|mean_POSIXct|mean_POSIXlt|mem_limits|memCompress|memDecompress|memory_profile|merge|merge_data_frame|merge_default|message|mget|min|missing|Mod|mode|months|months_Date|months_POSIXt|names|names_POSIXlt|namespaceExport|namespaceImport|namespaceImportClasses|namespaceImportFrom|namespaceImportMethods|nargs|nchar|ncol|NCOL|Negate|new_env|next|NextMethod|ngettext|nlevels|noquote|norm|normalizePath|nrow|NROW|numeric|numeric_version|nzchar|objects|oldClass|OlsonNames|on_exit|open|open_connection|open_srcfile|open_srcfilealias|open_srcfilecopy|Ops_data_frame|Ops_Date|Ops_difftime|Ops_factor|Ops_numeric_version|Ops_ordered|Ops_POSIXt|options|order|ordered|outer|package_version|packageEvent|packageHasNamespace|packageStartupMessage|packBits|pairlist|parent_env|parent_frame|parse|parseNamespaceFile|paste|paste0|path_expand|path_package|pcre_config|pipe|pmatch|pmax|pmax_int|pmin|pmin_int|polyroot|pos_to_env|Position|pretty|pretty_default|prettyNum|print|print_AsIs|print_by|print_condition|print_connection|print_data_frame|print_Date|print_default|print_difftime|print_Dlist|print_DLLInfo|print_DLLInfoList|print_DLLRegisteredRoutines|print_eigen|print_factor|print_function|print_hexmode|print_libraryIQR|print_listof|print_NativeRoutineList|print_noquote|print_numeric_version|print_octmode|print_packageInfo|print_POSIXct|print_POSIXlt|print_proc_time|print_restart|print_rle|print_simple_list|print_srcfile|print_srcref|print_summary_table|print_summaryDefault|print_table|print_warnings|prmatrix|proc_time|prod|prop_table|provideDimnames|psigamma|pushBack|pushBackLength|q|qr|qr_coef|qr_default|qr_fitted|qr_Q|qr_qty|qr_qy|qr_R|qr_resid|qr_solve|qr_X|quarters|quarters_Date|quarters_POSIXt|quit|quote|R_system_version|R_home|R_Version|range|range_default|rank|rapply|raw|rawConnection|rawConnectionValue|rawShift|rawToBits|rawToChar|rbind|rbind_data_frame|rcond|Re|read_dcf|readBin|readChar|readline|readLines|readRDS|readRenviron|Recall|Reduce|reg_finalizer|regexec|regexpr|registerS3method|registerS3methods|regmatches|remove|removeTaskCallback|rep|rep_len|rep_Date|rep_factor|rep_int|rep_numeric_version|rep_POSIXct|rep_POSIXlt|repeat|replace|replicate|require|requireNamespace|restartDescription|restartFormals|retracemem|return|returnValue|rev|rev_default|rle|rm|RNGkind|RNGversion|round|round_Date|round_POSIXt|row|row_names|row_names_data_frame|row_names_default|rowMeans|rownames|rowsum|rowsum_data_frame|rowsum_default|rowSums|sample|sample_int|sapply|save|save_image|saveRDS|scale|scale_default|scan|search|searchpaths|seek|seek_connection|seq|seq_along|seq_len|seq_Date|seq_default|seq_int|seq_POSIXt|sequence|serialize|set_seed|setdiff|setequal|setHook|setNamespaceInfo|setSessionTimeLimit|setTimeLimit|setwd|showConnections|shQuote|sign|signalCondition|signif|simpleCondition|simpleError|simpleMessage|simpleWarning|simplify2array|sin|single|sinh|sink|sink_number|sinpi|slice_index|socketConnection|socketSelect|solve|solve_default|solve_qr|sort|sort_default|sort_int|sort_list|sort_POSIXlt|source|split|split_data_frame|split_Date|split_default|split_POSIXct|sprintf|sqrt|sQuote|srcfile|srcfilealias|srcfilecopy|srcref|standardGeneric|startsWith|stderr|stdin|stdout|stop|stopifnot|storage_mode|strftime|strptime|strrep|strsplit|strtoi|strtrim|structure|strwrap|sub|subset|subset_data_frame|subset_default|subset_matrix|substitute|substr|substring|sum|summary|summary_connection|summary_data_frame|Summary_data_frame|summary_Date|Summary_Date|summary_default|Summary_difftime|summary_factor|Summary_factor|summary_matrix|Summary_numeric_version|Summary_ordered|summary_POSIXct|Summary_POSIXct|summary_POSIXlt|Summary_POSIXlt|summary_proc_time|summary_srcfile|summary_srcref|summary_table|suppressMessages|suppressPackageStartupMessages|suppressWarnings|svd|sweep|switch|sys_call|sys_calls|Sys_chmod|Sys_Date|sys_frame|sys_frames|sys_function|Sys_getenv|Sys_getlocale|Sys_getpid|Sys_glob|Sys_info|sys_load_image|Sys_localeconv|sys_nframe|sys_on_exit|sys_parent|sys_parents|Sys_readlink|sys_save_image|Sys_setenv|Sys_setFileTime|Sys_setlocale|Sys_sleep|sys_source|sys_status|Sys_time|Sys_timezone|Sys_umask|Sys_unsetenv|Sys_which|system|system_file|system_time|system2|t|t_data_frame|t_default|table|tabulate|tan|tanh|tanpi|tapply|taskCallbackManager|tcrossprod|tempdir|tempfile|testPlatformEquivalence|textConnection|textConnectionValue|tolower|topenv|toString|toString_default|toupper|trace|traceback|tracemem|tracingState|transform|transform_data_frame|transform_default|trigamma|trimws|trunc|trunc_Date|trunc_POSIXt|truncate|truncate_connection|try|tryCatch|typeof|unclass|undebug|union|unique|unique_array|unique_data_frame|unique_default|unique_matrix|unique_numeric_version|unique_POSIXlt|unique_warnings|units|units_difftime|unix_time|unlink|unlist|unloadNamespace|unlockBinding|unname|unserialize|unsplit|untrace|untracemem|unz|upper_tri|url|UseMethod|utf8ToInt|validEnc|validUTF8|vapply|vector|Vectorize|warning|warnings|weekdays|weekdays_Date|weekdays_POSIXt|which|which_max|which_min|while|with|with_default|withAutoprint|withCallingHandlers|within|within_data_frame|within_list|withRestarts|withVisible|write|write_dcf|writeBin|writeChar|writeLines|xor|xor_hexmode|xor_octmode|xpdrows_data_frame|xtfrm|xtfrm_AsIs|xtfrm_Date|xtfrm_default|xtfrm_difftime|xtfrm_factor|xtfrm_numeric_version|xtfrm_POSIXct|xtfrm_POSIXlt|xtfrm_Surv|xzfile|zapsmall)\s*\b
        name: support.function.r.sa
      - match: (?i)\s*\b(abline|arrows|assocplot|axis|Axis|axis_Date|Axis_Date|Axis_default|axis_POSIXct|Axis_POSIXt|Axis_table|axTicks|barplot|barplot_default|box|boxplot|boxplot_default|boxplot_formula|boxplot_matrix|bxp|cdplot|cdplot_default|cdplot_formula|clip|close_screen|co_intervals|contour|contour_default|coplot|curve|dotchart|erase_screen|filled_contour|fourfoldplot|frame|grconvertX|grconvertY|grid|hist|hist_Date|hist_default|hist_POSIXt|identify|identify_default|image|image_default|layout|layout_show|lcm|legend|lines|lines_default|lines_formula|lines_histogram|lines_table|locator|matlines|matplot|matpoints|mosaicplot|mosaicplot_default|mosaicplot_formula|mtext|pairs|pairs_default|pairs_formula|panel_smooth|par|persp|persp_default|pie|piechart|plot|plot_data_frame|plot_default|plot_design|plot_factor|plot_formula|plot_function|plot_histogram|plot_new|plot_raster|plot_table|plot_window|plot_xy|plotHclust|points|points_default|points_formula|points_table|polygon|polypath|rasterImage|rect|rug|screen|segments|smoothScatter|spineplot|spineplot_default|spineplot_formula|split_screen|stars|stem|strheight|stripchart|stripchart_default|stripchart_formula|strwidth|sunflowerplot|sunflowerplot_default|sunflowerplot_formula|symbols|text|text_default|text_formula|title|xinch|xspline|xyinch|yinch)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(adjustcolor|anyNA_raster|as_graphicsAnnot|as_matrix_raster|as_raster|as_raster_array|as_raster_character|as_raster_logical|as_raster_matrix|as_raster_numeric|as_raster_raster|as_raster_raw|axisTicks|bitmap|bmp|boxplot_stats|c2to3|cairo_pdf|cairo_ps|cairoVersion|check_for_XQuartz|check_gs_type|check_options|checkFont|checkFont_CIDFont|checkFont_default|checkFont_Type1Font|checkFontInUse|checkIntFormat|checkQuartzFont|checkX11Font|chromaticAdaptation|chull|CIDFont|cm|cm_colors|col2rgb|colorConverter|colorRamp|colorRampPalette|colors|colours|contourLines|convertColor|densCols|dev_capabilities|dev_capture|dev_control|dev_copy|dev_copy2eps|dev_copy2pdf|dev_cur|dev_displaylist|dev_flush|dev_hold|dev_interactive|dev_list|dev_new|dev_next|dev_off|dev_prev|dev_print|dev_set|dev_size|dev2bitmap|devAskNewPage|deviceIsInteractive|embedFonts|extendrange|getGraphicsEvent|getGraphicsEventEnv|graphics_off|gray|gray_colors|grey|grey_colors|grSoftVersion|guessEncoding|hcl|heat_colors|hsv|initPSandPDFfonts|is_na_raster|is_raster|isPDF|jpeg|make_rgb|matchEncoding|matchEncoding_CIDFont|matchEncoding_Type1Font|matchFont|n2mfrow|nclass_FD|nclass_scott|nclass_Sturges|Ops_raster|palette|pdf|pdf_options|pdfFonts|pictex|png|postscript|postscriptFonts|prettyDate|print_colorConverter|print_raster|print_recordedplot|print_RGBcolorConverter|printFont|printFont_CIDFont|printFont_Type1Font|printFonts|ps_options|quartz|quartz_options|quartz_save|quartzFont|quartzFonts|rainbow|recordGraphics|recordPalette|recordPlot|replayPlot|restoreRecordedPlot|rgb|rgb2hsv|savePlot|seqDtime|setEPS|setFonts|setGraphicsEventEnv|setGraphicsEventHandlers|setPS|setQuartzFonts|setX11Fonts|svg|terrain_colors|tiff|topo_colors|trans3d|trunc_POSIXt|Type1Font|x11|X11|X11_options|X11Font|X11FontError|X11Fonts|xfig|xy_coords|xyTable|xyz_coords)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(addNextMethod|allGenerics|allNames|Arith|as|asMethodDefinition|assignClassDef|assignMethodsMetaData|balanceMethodsList|bind_activation|cacheGenericsMetaData|cacheMetaData|cacheMethod|cacheOnAssign|callGeneric|callNextMethod|canCoerce|cbind|cbind2|checkAtAssignment|checkSlotAssignment|classesToAM|classGeneratorFunction|classLabel|classMetaName|className|coerce|Compare|completeClassDefinition|completeExtends|completeSubclasses|Complex|conformMethod|defaultDumpName|defaultPrototype|dispatchIsInternal|doPrimitiveMethod|dumpMethod|dumpMethods|el|elNamed|empty_dump|emptyMethodsList|envRefInferField|envRefSetField|evalOnLoad|evalqOnLoad|evalSource|existsFunction|existsMethod|extends|externalRefMethod|finalDefaultMethod|findClass|findFunction|findMethod|findMethods|findMethodSignatures|findUnique|fixPre1_8|formalArgs|fromNextMethod|functionBody|generic_skeleton|genericForBasic|getAccess|getAllMethods|getAllSuperClasses|getClass|getClassDef|getClasses|getClassName|getClassPackage|getDataPart|getExtends|getFunction|getGeneric|getGenericFromCall|getGenerics|getGroup|getGroupMembers|getLoadActions|getMethod|getMethods|getMethodsAndAccessors|getMethodsForDispatch|getMethodsMetaData|getPackageName|getProperties|getPrototype|getRefClass|getRefSuperClasses|getSlots|getSubclasses|getValidity|getVirtual|hasArg|hasLoadAction|hasMethod|hasMethods|implicitGeneric|inBasicFuns|inferProperties|inheritedSlotNames|inheritedSubMethodLists|initFieldArgs|initialize|initMethodDispatch|initRefFields|insertClassMethods|insertMethod|insertMethodInEmptyList|insertSource|installClassMethod|is|isBaseFun|isClass|isClassDef|isClassUnion|isGeneric|isGrammarSymbol|isGroup|isMixin|isRematched|isS3Generic|isSealedClass|isSealedMethod|isVirtualClass|isXS3Class|kronecker|languageEl|linearizeMlist|listFromMethods|listFromMlist|loadMethod|Logic|makeClassMethod|makeClassRepresentation|makeEnvRefMethods|makeExtends|makeGeneric|makeMethodsList|makePrototypeFromClassDef|makeStandardGeneric|matchDefaults|matchSignature|Math|Math2|mergeMethods|metaNameUndo|method_skeleton|MethodAddCoerce|methodSignatureMatrix|MethodsList|MethodsListSelect|methodsPackageMetaName|missingArg|mlistMetaName|multipleClasses|new|newBasic|newClassRepresentation|newEmptyObject|Ops|outerLabels|packageSlot|possibleExtends|print_MethodsList|printClassRepresentation|printPropertiesList|prohibitGeneric|promptClass|promptMethods|prototype|Quote|rbind|rbind2|reconcilePropertiesAndPrototype|refClassFields|refClassInformation|refClassMethods|refClassPrompt|refObjectClass|registerImplicitGenerics|rematchDefinition|removeClass|removeGeneric|removeMethod|removeMethods|removeMethodsObject|representation|requireMethods|resetClass|resetGeneric|S3Class|S3forS4Methods|S3Part|sealClass|seemsS4Object|selectMethod|selectSuperClasses|setAs|setCacheOnAssign|setClass|setClassUnion|setDataPart|setGeneric|setGenericImplicit|setGroupGeneric|setIs|setLoadAction|setLoadActions|setMethod|setNames|setOldClass|setPackageName|setPrimitiveMethods|setRefClass|setReplaceMethod|setValidity|show|showClass|showClassMethod|showDefault|showExtends|showExtraSlots|showMethods|showMlist|showRefClassDef|signature|SignatureMethod|sigToEnv|slot|slotNames|slotsFromS3|substituteDirect|substituteFunctionArgs|Summary|superClassDepth|superClassMethodName|tableNames|testInheritedMethods|testVirtual|traceOff|traceOn|tryNew|unRematchDefinition|useMTable|validObject|validSlotNames)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(acf|acf2AR|add_name|add1|add1_default|add1_glm|add1_lm|add1_mlm|addmargins|aggregate|aggregate_data_frame|aggregate_default|aggregate_formula|aggregate_ts|AIC|AIC_default|AIC_logLik|alias|alias_formula|alias_lm|anova|anova_glm|anova_glmlist|anova_lm|anova_lmlist|anova_loess|anova_mlm|anova_mlmlist|anova_nls|anovalist_nls|ansari_test|ansari_test_default|ansari_test_formula|aov|approx|approxfun|ar|ar_burg|ar_burg_default|ar_burg_mts|ar_mle|ar_ols|ar_yw|ar_yw_default|ar_yw_mts|arima|arima_sim|arima0|arima0_diag|ARMAacf|ARMAtoMA|as_data_frame_aovproj|as_data_frame_ftable|as_data_frame_logLik|as_dendrogram|as_dendrogram_dendrogram|as_dendrogram_hclust|as_dist|as_dist_default|as_formula|as_hclust|as_hclust_default|as_hclust_dendrogram|as_hclust_twins|as_matrix_dist|as_matrix_ftable|as_stepfun|as_stepfun_default|as_stepfun_isoreg|as_table_ftable|as_ts|as_ts_default|asOneSidedFormula|ave|bandwidth_kernel|bartlett_test|bartlett_test_default|bartlett_test_formula|BIC|BIC_default|BIC_logLik|binom_test|binomial|biplot|biplot_default|biplot_prcomp|biplot_princomp|Box_test|bw_pair_cnts|bw_bcv|bw_nrd|bw_nrd0|bw_SJ|bw_ucv|C|cancor|case_names|case_names_default|case_names_lm|cbind_ts|ccf|check_exact|chisq_test|cmdscale|coef|coef_aov|coef_Arima|coef_default|coef_listof|coef_maov|coef_nls|coefficients|complete_cases|confint|confint_default|confint_glm|confint_lm|confint_nls|constrOptim|contr_helmert|contr_poly|contr_SAS|contr_sum|contr_treatment|contrasts|convolve|cooks_distance|cooks_distance_glm|cooks_distance_lm|cophenetic|cophenetic_default|cophenetic_dendrogram|cor|cor_test|cor_test_default|cor_test_formula|cov|cov_wt|cov2cor|covratio|cpgram|cut_dendrogram|cutree|cycle|cycle_default|cycle_ts|D|dbeta|dbinom|dcauchy|dchisq|decompose|delete_response|deltat|deltat_default|dendrapply|density|density_default|deriv|deriv_default|deriv_formula|deriv3|deriv3_default|deriv3_formula|deviance|deviance_default|deviance_glm|deviance_lm|deviance_mlm|deviance_nls|dexp|df|df_kernel|df_residual|df_residual_default|df_residual_nls|dfbeta|dfbeta_lm|dfbetas|dfbetas_lm|dffits|dgamma|dgeom|dhyper|diff_ts|diffinv|diffinv_default|diffinv_ts|diffinv_vector|dist|dlnorm|dlogis|dmultinom|dnbinom|dnorm|dpois|drop_name|drop_terms|drop1|drop1_default|drop1_glm|drop1_lm|drop1_mlm|dsignrank|dt|dummy_coef|dummy_coef_aovlist|dummy_coef_lm|dunif|dweibull|dwilcox|ecdf|eff_aovlist|effects|effects_glm|effects_lm|embed|end|end_default|estVar|estVar_mlm|estVar_SSD|expand_model_frame|extractAIC|extractAIC_aov|extractAIC_coxph|extractAIC_glm|extractAIC_lm|extractAIC_negbin|extractAIC_survreg|factanal|factanal_fit_mle|factor_name|family|family_glm|family_lm|fft|filter|fisher_test|fitted|fitted_default|fitted_isoreg|fitted_kmeans|fitted_nls|fitted_smooth_spline|fitted_values|fivenum|fligner_test|fligner_test_default|fligner_test_formula|format_perc|format_dist|format_ftable|format_perc|formula|formula_character|formula_data_frame|formula_default|formula_formula|formula_glm|formula_lm|formula_nls|formula_terms|frequency|frequency_default|friedman_test|friedman_test_default|friedman_test_formula|ftable|ftable_default|ftable_formula|Gamma|gaussian|get_all_vars|getCall|getCall_default|getInitial|getInitial_default|getInitial_formula|getInitial_selfStart|glm|glm_control|glm_fit|hasTsp|hat|hatvalues|hatvalues_lm|hatvalues_smooth_spline|hclust|heatmap|HL|HoltWinters|hyman_filter|identify_hclust|influence|influence_glm|influence_lm|influence_measures|integrate|interaction_plot|inverse_gaussian|IQR|is_empty_model|is_leaf|is_mts|is_stepfun|is_ts|is_tskernel|isoreg|KalmanForecast|KalmanLike|KalmanRun|KalmanSmooth|kernapply|kernapply_default|kernapply_ts|kernapply_tskernel|kernapply_vector|kernel|kmeans|knots|knots_stepfun|kruskal_test|kruskal_test_default|kruskal_test_formula|ks_test|ksmooth|labels_dendrogram|labels_dist|labels_lm|labels_terms|lag|lag_default|lag_plot|line|lines_isoreg|lines_stepfun|lines_ts|lm|lm_fit|lm_influence|lm_wfit|loadings|loess|loess_control|loess_smooth|logLik|logLik_Arima|logLik_glm|logLik_lm|logLik_logLik|logLik_nls|loglin|lowess|ls_diag|ls_print|lsfit|mad|mahalanobis|make_link|make_tables_aovproj|make_tables_aovprojlist|makeARIMA|makepredictcall|makepredictcall_default|makepredictcall_poly|manova|mantelhaen_test|mauchly_test|mauchly_test_mlm|mauchly_test_SSD|mcnemar_test|median|median_default|medpolish|merge_dendrogram|midcache_dendrogram|model_extract|model_frame|model_frame_aovlist|model_frame_default|model_frame_glm|model_frame_lm|model_matrix|model_matrix_default|model_matrix_lm|model_offset|model_response|model_tables|model_tables_aov|model_tables_aovlist|model_weights|monthplot|monthplot_default|monthplot_stl|monthplot_StructTS|monthplot_ts|mood_test|mood_test_default|mood_test_formula|mvfft|n_knots|na_action|na_action_default|na_contiguous|na_contiguous_default|na_exclude|na_exclude_data_frame|na_exclude_default|na_fail|na_fail_default|na_omit|na_omit_data_frame|na_omit_default|na_omit_ts|na_pass|napredict|napredict_default|napredict_exclude|naprint|naprint_default|naprint_exclude|naprint_omit|naresid|naresid_default|naresid_exclude|nextn|nleaves|nlm|nlminb|nls|nls_port_fit|nls_control|nlsModel|nlsModel_plinear|NLSstAsymptotic|NLSstAsymptotic_sortedXyData|NLSstClosestX|NLSstClosestX_sortedXyData|NLSstLfAsymptote|NLSstLfAsymptote_sortedXyData|NLSstRtAsymptote|NLSstRtAsymptote_sortedXyData|nobs|nobs_default|nobs_dendrogram|nobs_glm|nobs_lm|nobs_logLik|nobs_nls|numericDeriv|offset|oneway_test|Ops_ts|optim|optimHess|optimise|optimize|order_dendrogram|p_adjust|pacf|pacf_default|pairwise_prop_test|pairwise_t_test|pairwise_table|pairwise_wilcox_test|pbeta|pbinom|pbirthday|pcauchy|pchisq|pexp|pf|pgamma|pgeom|phyper|Pillai|plclust|plnorm|plogis|plot_acf|plot_decomposed_ts|plot_dendrogram|plot_density|plot_ecdf|plot_hclust|plot_HoltWinters|plot_isoreg|plot_lm|plot_medpolish|plot_mlm|plot_ppr|plot_prcomp|plot_princomp|plot_profile_nls|plot_spec|plot_spec_coherency|plot_spec_phase|plot_stepfun|plot_stl|plot_ts|plot_tskernel|plot_TukeyHSD|plotNode|plotNodeLimit|pnbinom|pnorm|pointwise|poisson|poisson_test|poly|polym|port_get_named_v|port_msg|power|power_anova_test|power_prop_test|power_t_test|PP_test|ppoints|ppois|ppr|ppr_default|ppr_formula|prcomp|prcomp_default|prcomp_formula|predict|predict_ar|predict_Arima|predict_arima0|predict_glm|predict_HoltWinters|predict_lm|predict_loess|predict_mlm|predict_nls|predict_poly|predict_ppr|predict_prcomp|predict_princomp|predict_smooth_spline|predict_smooth_spline_fit|predict_StructTS|predLoess|preplot|princomp|princomp_default|princomp_formula|print_acf|print_anova|print_aov|print_aovlist|print_ar|print_Arima|print_arima0|print_dendrogram|print_density|print_dist|print_dummy_coef|print_dummy_coef_list|print_ecdf|print_factanal|print_family|print_formula|print_ftable|print_glm|print_hclust|print_HoltWinters|print_htest|print_infl|print_integrate|print_isoreg|print_kmeans|print_lm|print_loadings|print_loess|print_logLik|print_medpolish|print_mtable|print_nls|print_pairwise_htest|print_power_htest|print_ppr|print_prcomp|print_princomp|print_smooth_spline|print_stepfun|print_stl|print_StructTS|print_summary_aov|print_summary_aovlist|print_summary_ecdf|print_summary_glm|print_summary_lm|print_summary_loess|print_summary_manova|print_summary_nls|print_summary_ppr|print_summary_prcomp|print_summary_princomp|print_tables_aov|print_terms|print_ts|print_tskernel|print_TukeyHSD|print_tukeyline|print_tukeysmooth|print_xtabs|printCoefmat|profile|profile_nls|profiler|profiler_nls|proj|proj_aov|proj_aovlist|proj_default|proj_lm|proj_matrix|promax|prop_test|prop_trend_test|psignrank|pt|ptukey|punif|pweibull|pwilcox|qbeta|qbinom|qbirthday|qcauchy|qchisq|qexp|qf|qgamma|qgeom|qhyper|qlnorm|qlogis|qnbinom|qnorm|qpois|qqline|qqnorm|qqnorm_default|qqplot|qr_lm|qsignrank|qt|qtukey|quade_test|quade_test_default|quade_test_formula|quantile|quantile_default|quantile_ecdf|quantile_POSIXt|quasi|quasibinomial|quasipoisson|qunif|qweibull|qwilcox|r2dtable|Rank|rbeta|rbinom|rcauchy|rchisq|read_ftable|rect_hclust|reformulate|regularize_values|relevel|relevel_default|relevel_factor|relevel_ordered|reorder|reorder_default|reorder_dendrogram|replications|reshape|resid|residuals|residuals_default|residuals_glm|residuals_HoltWinters|residuals_isoreg|residuals_lm|residuals_nls|residuals_smooth_spline|residuals_tukeyline|rev_dendrogram|rexp|rf|rgamma|rgeom|rhyper|rlnorm|rlogis|rmultinom|rnbinom|rnorm|Roy|rpois|rsignrank|rstandard|rstandard_glm|rstandard_lm|rstudent|rstudent_glm|rstudent_lm|rt|runif|runmed|rweibull|rwilcox|rWishart|safe_pchisq|safe_pf|scatter_smooth|screeplot|screeplot_default|sd|se_aov|se_aovlist|se_contrast|se_contrast_aov|se_contrast_aovlist|selfStart|selfStart_default|selfStart_formula|setNames|shapiro_test|sigma|sigma_default|sigma_mlm|simpleLoess|simulate|simulate_lm|smooth|smooth_spline|smoothEnds|sortedXyData|sortedXyData_default|spec_ar|spec_pgram|spec_taper|spectrum|sphericity|spl_coef_conv|spline|splinefun|splinefunH|splinefunH0|SSasymp|SSasympOff|SSasympOrig|SSbiexp|SSD|SSD_mlm|SSfol|SSfpl|SSgompertz|SSlogis|SSmicmen|SSweibull|start|start_default|stat_anova|step|stepfun|stl|str_dendrogram|str_logLik|StructTS|summary_aov|summary_aovlist|summary_ecdf|summary_glm|summary_infl|summary_lm|summary_loess|summary_manova|summary_mlm|summary_nls|summary_ppr|summary_prcomp|summary_princomp|summary_stepfun|summary_stl|summary_tukeysmooth|supsmu|symnum|t_test|t_test_default|t_test_formula|t_ts|termplot|terms|terms_aovlist|terms_default|terms_formula|terms_terms|Thin_col|Thin_row|time|time_default|time_ts|toeplitz|Tr|ts|ts_intersect|ts_plot|ts_union|tsdiag|tsdiag_Arima|tsdiag_arima0|tsdiag_StructTS|tsp|tsSmooth|tsSmooth_StructTS|TukeyHSD|TukeyHSD_aov|uniroot|update|update_default|update_formula|var|var_test|var_test_default|var_test_formula|variable_names|variable_names_default|variable_names_lm|varimax|vcov|vcov_Arima|vcov_glm|vcov_lm|vcov_mlm|vcov_nls|vcov_summary_glm|vcov_summary_lm|weighted_mean|weighted_mean_Date|weighted_mean_default|weighted_mean_difftime|weighted_mean_POSIXct|weighted_mean_POSIXlt|weighted_residuals|weights|weights_default|weights_glm|weights_nls|wilcox_test|wilcox_test_default|wilcox_test_formula|Wilks|window|window_default|window_ts|write_ftable|xtabs)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(adist|alarm|apropos|aregexec|argNames|argsAnywhere|as_bibentry|as_bibentry_bibentry|as_bibentry_citation|as_character_person|as_character_roman|as_person|as_person_default|as_personList|as_personList_default|as_personList_person|as_relistable|as_roman|aspell|aspell_find_dictionaries|aspell_find_program|aspell_inspect_context|aspell_package|aspell_package_C_files|aspell_package_description|aspell_package_pot_files|aspell_package_R_files|aspell_package_Rd_files|aspell_package_vignettes|aspell_R_C_files|aspell_R_manuals|aspell_R_R_files|aspell_R_Rd_files|aspell_R_vignettes|aspell_write_personal_dictionary_file|assignInMyNamespace|assignInNamespace|attachedPackageCompletions|available_packages|bibentry|blank_out_ignores_in_lines|blank_out_regexp_matches|browseEnv|browseURL|browseVignettes|bug_report|bug_report_info|c_bibentry|c_person|capture_output|changedFiles|check_for_XQuartz|checkCRAN|chooseBioCmirror|chooseCRANmirror|citation|cite|citeNatbib|citEntry|citFooter|citHeader|close_socket|close_txtProgressBar|combn|compareVersion|contrib_url|correctFilenameToken|count_fields|CRAN_packages|create_post|data|data_entry|dataentry|de|de_ncols|de_restore|de_setup|debugcall|debugger|defaultUserAgent|demo|download_file|download_packages|dump_frames|edit|edit_data_frame|edit_default|edit_matrix|edit_vignette|emacs|example|expr2token|file_test|file_edit|fileCompletionPreferred|fileCompletions|fileSnapshot|filter_packages_by_depends_predicates|find|find_files_in_directories|findExactMatches|findFuzzyMatches|findGeneric|findLineNum|findMatches|fix|fixInNamespace|flush_console|fnLineNum|format_aspell|format_bibentry|format_citation|format_news_db|format_object_size|format_person|format_roman|formatOL|formatUL|functionArgs|fuzzyApropos|get_parse_data_for_message_strings|getAnywhere|getCRANmirrors|getDependencies|getFromNamespace|getIsFirstArg|getKnownS3generics|getParseData|getParseText|getRcode|getRcode_vignette|getS3method|getSrcDirectory|getSrcfile|getSrcFilename|getSrcLocation|getSrcref|getTxtProgressBar|glob2rx|globalVariables|hasName|head|head_data_frame|head_default|head_ftable|head_function|head_matrix|head_table|help|help_request|help_search|help_start|helpCompletions|history|hsearch_db|hsearch_db_concepts|hsearch_db_keywords|index_search|inFunction|install_packages|installed_packages|is_relistable|isBasePkg|isInsideQuotes|isS3method|isS3stdGeneric|keywordCompletions|limitedLabels|loadedPackageCompletions|loadhistory|localeToCharset|ls_str|lsf_str|maintainer|make_sysdata_rda|make_packages_html|make_socket|makeRegexpSafe|makeRweaveLatexCodeRunner|makeUserAgent|matchAvailableTopics|memory_limit|memory_size|menu|merge_demo_index|merge_vignette_index|methods|mirror2html|modifyList|new_packages|news|normalCompletions|nsl|object_size|offline_help_helper|old_packages|Ops_roman|package_skeleton|packageDescription|packageName|packageStatus|packageVersion|page|person|personList|pico|print_aspell|print_aspell_inspect_context|print_bibentry|print_Bibtex|print_browseVignettes|print_changedFiles|print_citation|print_fileSnapshot|print_findLineNumResult|print_getAnywhere|print_help_files_with_topic|print_hsearch|print_hsearch_db|print_Latex|print_ls_str|print_MethodsFunction|print_news_db|print_object_size|print_packageDescription|print_packageIQR|print_packageStatus|print_person|print_roman|print_sessionInfo|print_socket|print_summary_packageStatus|print_vignette|printhsearchInternal|process_events|prompt|prompt_data_frame|prompt_default|promptData|promptImport|promptPackage|rc_getOption|rc_options|rc_settings|rc_status|read_csv|read_csv2|read_delim|read_delim2|read_DIF|read_fortran|read_fwf|read_socket|read_table|readCitationFile|recover|registerNames|regquote|relist|relist_default|relist_factor|relist_list|relist_matrix|remove_packages|removeSource|rep_bibentry|rep_roman|resolvePkgType|Rprof|Rprof_memory_summary|Rprofmem|RShowDoc|RSiteSearch|rtags|rtags_file|Rtangle|RtangleFinish|RtangleRuncode|RtangleSetup|RtangleWritedoc|RweaveChunkPrefix|RweaveEvalWithOpt|RweaveLatex|RweaveLatexFinish|RweaveLatexOptions|RweaveLatexRuncode|RweaveLatexSetup|RweaveLatexWritedoc|RweaveTryStop|savehistory|select_list|sessionInfo|setBreakpoint|setIsFirstArg|setRepositories|setTxtProgressBar|shorten_to_string|simplifyRepos|sort_bibentry|specialCompletions|specialFunctionArgs|specialOpCompletionsHelper|specialOpLocs|stack|stack_data_frame|stack_default|Stangle|str|str_data_frame|str_Date|str_default|str_POSIXt|strcapture|strextract|strOptions|substr_with_tabs|summary_aspell|summary_packageStatus|summaryRprof|suppressForeignCheck|Sweave|SweaveGetSyntax|SweaveHooks|SweaveParseOptions|SweaveReadFile|SweaveSyntConv|tail|tail_data_frame|tail_default|tail_ftable|tail_function|tail_matrix|tail_table|tar|timestamp|toBibtex|toBibtex_bibentry|toBibtex_person|toLatex|toLatex_sessionInfo|topicName|txtProgressBar|type_convert|undebugcall|unique_bibentry|unlist_relistable|unstack|unstack_data_frame|unstack_default|untar|untar2|unzip|update_packages|update_packageStatus|upgrade|upgrade_packageStatus|url_show|URLdecode|URLencode|vi|View|vignette|write_csv|write_csv2|write_etags|write_socket|write_table|wsbrowser|xedit|xemacs|zip)\b\s*
        name: support.function.r.sa
      - match: (?i)\s*\b(debug|warn|info|log|error|time|timeEnd|assert)\b\s*
        name: support.function.console.sa
      - match: (?i)\s*\b(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf)\b\s*
        name: support.function.method.array.sa
      - match: (?i)\s*\b(isArray)\b\s*
        name: support.function.static.array.sa
      - match: (?i)\s*\b(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal)\b\s*
        name: support.function.static.object.sa
      - match: (?i)\s*\b(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc)\b\s*
        name: support.function.static.math.sa
      - match: (?i)\s*\b(is(Finite|Integer|NaN)|toInteger)\b\s*
        name: support.function.static.number.sa
      - match: (?x)\s*\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|require|set(Interval|Timeout)|clear(Interval|Timeout))\b\s*
        name: support.function.coffee
      - match: (?i)\s*\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\b\s*
        name: support.function.builtin.sa
      - match: (?x)\s*\b(?:sprintf|print(?:f|ln)?)\b\s*
        name: support.function.print.sa
      - match: (?x)\s*\b(?:shouldFail|fail(?:NotEquals)?|ass(?:ume|ert(?:S(?:cript|ame)|N(?:ot(?:Same|Null)|ull)|Contains|T(?:hat|oString|rue)|Inspect|Equals|False|Length|ArrayEquals)))\b\s*
        name: support.function.testing.sa
      - match: (?i:\s*\b(Lock|Unlock|SetAbort|SetComplete|BinaryRead|AddHeader|AppendToLog|BinaryWrite|Clear|End|Flush|Redirect|Write|CreateObject|HTMLEncode|MapPath|URLEncode|Abandon|Convert|Regex)\b)
        name: support.function.asp.sa
      - match: (?i:\s*\b(Application_OnEnd|Application_OnStart|OnTransactionAbort|OnTransactionCommit|Session_OnEnd|Session_OnStart)\b)
        name: support.function.event.sa
      - match: (?i:\s*\b(Array|Add|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng|Conversions|Cos|CreateObject|CSng|CStr|Date|DateAdd|DateDiff|DatePart|DateSerial|DateValue|Day|Derived|Math|Escape|Eval|Exists|Exp|Filter|FormatCurrency|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric|IsObject|Item|Items|Join|Keys|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Remove|RemoveAll|Replace|RGB|Right|Rnd|Round|ScriptEngine|ScriptEngineBuildVersion|ScriptEngineMajorVersion|ScriptEngineMinorVersion|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse|Tan|Time|Timer|TimeSerial|TimeValue|TypeName|UBound|UCase|Unescape|VarType|Weekday|WeekdayName|Year)\b)
        name: support.function.vb.sa
      - match: (?i)\s*\bdefault\b\s*
        name: support.function.default.sa
      - match: (?i)\s*\b(isurl|isstring|isnumber|iskeyword|iscolor)\b\s*
        name: support.function.type_checking.sa
      - match: (?i)\s*\b(isunit|ispixel|ispercentage|isem)\b\s*
        name: support.function.unit_checking.sa
      - match: (?i)\s*\b(subst|patsubst|strip|findstring|filter(_out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile)\b\s*
        name: support.function.makefile.sa
      - match: (?i)\s*\b(ARGV|DATA|ENV|SIG|STDERR|STDIN|STDOUT|atan2|bind|binmode|bless|caller|chdir|chmod|chomp|chop|chown|chr|chroot|close|closedir|cmp|connect|cos|crypt|dbmclose|dbmopen|defined|delete|dump|each|endgrent|endhostent|endnetent|endprotoent|endpwent|endservent|eof|eq|eval|exec|exists|exp|fcntl|fileno|flock|fork|formline|ge|getc|getgrent|getgrgid|getgrnam|gethostbyaddr|gethostbyname|gethostent|getlogin|getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|getppid|getpriority|getprotobyname|getprotobynumber|getprotoent|getpwent|getpwnam|getpwuid|getservbyname|getservbyport|getservent|getsockname|getsockopt|glob|gmtime|grep|gt|hex|import|index|int|ioctl|join|keys|kill|lc|lcfirst|le|length|link|listen|local|localtime|log|lstat|lt|m|map|mkdir|msgctl|msgget|msgrcv|msgsnd|ne|no|oct|open|opendir|ord|pack|pipe|pop|pos|print|printf|push|quotemeta|rand|read|readdir|readlink|recv|ref|rename|reset|reverse|rewinddir|rindex|rmdir|s|say|scalar|seek|seekdir|semctl|semget|semop|send|setgrent|sethostent|setnetent|setpgrp|setpriority|setprotoent|setpwent|setservent|setsockopt|shift|shmctl|shmget|shmread|shmwrite|shutdown|sin|sleep|socket|socketpair|sort|splice|split|sprintf|sqrt|srand|stat|study|substr|symlink|syscall|sysopen|sysread|system|syswrite|tell|telldir|tie|tied|time|times|tr|truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|utime|values|vec|waitpid|wantarray|warn|write|y)\b\s*
        name: support.function.perl.sa
      - match: (?i)\s*\b(abort|at_exit|autoload[?]?|binding|callcc|caller|caller_locations|chomp|chop|eval|exec|exit|exit!|fork|format|gets|global_variables|gsub|lambda|load|local_variables|open|p|print|printf|proc|putc|puts|rand|readline|readlines|select|set_trace_func|sleep|spawn|sprintf|srand|sub|syscall|system|test|trace_var|trap|untrace_var|warn)\b\s*
        name: support.function.kernel.sa
      - match: (?i)\s*\b(avg|checksum_agg|count|count_big|grouping|grouping_id|max|min|sum|stdev|stdevp|var|varp)\b\s*
        name: support.function.aggregate.sa
      - match: (?i)\s*\b(cast|convert|parse|try_cast|try_convert|try_parse)\b\s*
        name: support.function.conversion.sa
      - match: (?i)\s*\b(cursor_status)\b\s*
        name: support.function.cursor.sa
      - match: (?i)\s*\b(sysdatetime|sysdatetimeoffset|sysutcdatetime|current_time(stamp)?|getdate|getutcdate|datename|datepart|day|month|year|datefromparts|datetime2fromparts|datetimefromparts|datetimeoffsetfromparts|smalldatetimefromparts|timefromparts|datediff|dateadd|eomonth|switchoffset|todatetimeoffset|isdate)\b\s*
        name: support.function.datetime.sa
      - match: (?i)\s*\b(coalesce|nullif)\b\s*
        name: support.function.expression.sa
      - match: (?i)\s*\b(cursor_rows|connections|cpu_busy|datefirst|dbts|error|fetch_status|identity|idle|io_busy|langid|language|lock_timeout|max_connections|max_precision|nestlevel|options|packet_errors|pack_received|pack_sent|procid|remserver|rowcount|servername|servicename|spid|textsize|timeticks|total_errors|total_read|total_write|trancount|version)\b\s*
        name: support.function.globalvar.sa
      - match: (?i)\s*\b(choose|iif)\b\s*
        name: support.function.logical.sa
      - match: (?i)\s*\b(abs|acos|asin|atan|atn2|ceiling|cos|cot|degrees|exp|floor|log|log10|pi|power|radians|rand|round|sign|sin|sqrt|square|tan)\b\s*
        name: support.function.mathematical.sa
      - match: (?i)\s*\b(app_name|applock_mode|applock_test|assemblyproperty|col_length|col_name|columnproperty|database_principal_id|databasepropertyex|db_id|db_name|file_id|file_idex|file_name|filegroup_id|filegroup_name|filegroupproperty|fileproperty|fulltextcatalogproperty|fulltextserviceproperty|index_col|indexkey_property|indexproperty|object_definition|object_id|object_name|object_schema_name|objectproperty|objectpropertyex|original_db_name|parsename|schema_id|schema_name|scope_identity|serverproperty|stats_date|type_id|type_name|typeproperty)\b\s*
        name: support.function.metadata.sa
      - match: (?i)\s*\b(rank|dense_rank|ntile|row_number)\b\s*
        name: support.function.ranking.sa
      - match: (?i)\s*\b(opendatasource|openrowset|openquery|openxml)\b\s*
        name: support.function.rowset.sa
      - match: (?i)\s*\b(certencoded|certprivatekey|current_user|database_principal_id|has_perms_by_name|is_member|is_rolemember|is_srvrolemember|original_login|permissions|pwdcompare|pwdencrypt|schema_id|schema_name|session_user|suser_id|suser_sid|suser_sname|system_user|suser_name|user_id|user_name)\b\s*
        name: support.function.security.sa
      - match: (?i)\s*\b(ascii|char|charindex|concat|difference|format|left|len|lower|ltrim|nchar|nodes|patindex|quotename|replace|replicate|reverse|right|rtrim|soundex|space|str|string_agg|string_escape|string_split|stuff|substring|translate|trim|unicode|upper)\b\s*
        name: support.function.string.sa
      - match: (?i)\s*\b(binary_checksum|checksum|compress|connectionproperty|context_info|current_request_id|current_transaction_id|decompress|error_line|error_message|error_number|error_procedure|error_severity|error_state|formatmessage|get_filestream_transaction_context|getansinull|host_id|host_name|isnull|isnumeric|min_active_rowversion|newid|newsequentialid|rowcount_big|session_context|session_id|xact_state)\b\s*
        name: support.function.system.sa
      - match: (?i)\s*\b(patindex|textptr|textvalid)\b\s*
        name: support.function.textimage.sa
      - match: (?i)\s*\b(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\s*[({])\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(?:anyGenerator|autoreleasepool)\b\s*
        name: support.function.swift.sa
      - match: (?i)\s*\b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\s*\()
        name: support.function.swift.sa
      - match: (?i)\s*\b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\s*\()
        name: support.function.swift.sa
      - match: (?i)\s*\b(abs|acos|alpha|argb|asin|atan|average|blue|calc|ceil|color|contrast|convert|convert|cos|darken|data_uri|desaturate|difference|e|escape|exclusion|extract|fade|fadein|fadeout|floor|format|green|greyscale|hardlight|hsl|hsla|hsv|hsva|hsvhue|hsvsaturation|hsvvalue|hue|length|lighten|lightness|luma|max|min|mix|mod|multiply|negation|overlay|percentage|pi|pow|red|replace|round|saturate|saturation|screen|sin|softlight|spin|sqrt|tan|unit)\b\s*
        name: support.function.any_method.builtin.less
      - match: (?x)\s*\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|Before(cut|deactivate|unload|update|paste|print|editfocus|activate)|Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\b\s*
        name: support.function.event_handler.sa
      - match: (?x)\s*\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\b\s*
        name: support.function.sa
      - match: (?x)\s*\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|appendChild|appendData|before|blur|canPlayType|captureStream|caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|cloneContents|cloneNode|cloneRange|close|closest|collapse|compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|createAttributeNS|createCaption|createCDATASection|createComment|createContextualFragment|createDocument|createDocumentFragment|createDocumentType|createElement|createElementNS|createEntityReference|createEvent|createExpression|createHTMLDocument|createNodeIterator|createNSResolver|createProcessingInstruction|createRange|createShadowRoot|createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|getClientRects|getContext|getDestinationInsertionPoints|getElementById|getElementsByClassName|getElementsByName|getElementsByTagName|getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|previousSibling|probablySupportsContext|queryCommandEnabled|queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|querySelector|querySelectorAll|registerContentHandler|registerElement|registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|toDataURL|toggle|toString|values|write|writeln)\b\s*
        name: support.function.dom.sa
      - match: (?i)\s*\b(?i)(abort|abort_after_wait|absent|absolute|accent_sensitivity|acceptable_cursopt|acp|action|activation|add|address|admin|aes_128|aes_192|aes_256|affinity|after|aggregate|algorithm|all_constraints|all_errormsgs|all_indexes|all_levels|all_results|allow_connections|allow_dup_row|allow_encrypted_value_modifications|allow_page_locks|allow_row_locks|allow_snapshot_isolation|alter|altercolumn|always|anonymous|ansi_defaults|ansi_null_default|ansi_null_dflt_off|ansi_null_dflt_on|ansi_nulls|ansi_padding|ansi_warnings|appdomain|append|application|apply|arithabort|arithignore|assembly|asymmetric|asynchronous_commit|at|atan2|atomic|attach|attach_force_rebuild_log|attach_rebuild_log|audit|auth_realm|authentication|auto|auto_cleanup|auto_close|auto_create_statistics|auto_shrink|auto_update_statistics|auto_update_statistics_async|automated_backup_preference|automatic|autopilot|availability|availability_mode|backup_priority|base64|basic|batches|batchsize|before|between|bigint|binary|binding|bit|block|blocksize|bmk|break|broker|broker_instance|bucket_count|buffer|buffercount|bulk_logged|by|call|caller|card|case|catalog|catch|cert|certificate|change_retention|change_tracking|change_tracking_context|changes|char|character|character_set|check_expiration|check_policy|checkconstraints|checkindex|checkpoint|cleanup_policy|clear|clear_port|close|clustered|codepage|collection|column_encryption_key|column_master_key|columnstore|columnstore_archive|colv_80_to_100|colv_100_to_80|commit_differential_base|committed|compatibility_level|compress_all_row_groups|compression|compression_delay|concat_null_yields_null|concatenate|configuration|connect|continue|continue_after_error|contract|contract_name|control|conversation|conversation_group_id|conversation_handle|copy|copy_only|count_rows|counter|create(\s+or\s+alter)?|credential|cross|cryptographic|cryptographic_provider|cube|cursor|cursor_close_on_commit|cursor_default|data|data_compression|data_flush_interval_seconds|data_mirroring|data_purity|data_source|database|database_name|database_snapshot|datafiletype|date_correlation_optimization|date|datefirst|dateformat|date_format|datetime|datetime2|datetimeoffset|days|db_chaining|dbid|dbidexec|dbo_only|deadlock_priority|deallocate|dec|decimal|declare|decrypt|decrypt_a|decryption|default_database|default_language|default_logon_domain|default_schema|definition|delay|delayed_durability|delimitedtext|density_vector|dependent|des|description|desired_state|desx|differential|digest|disable|disable_broker|disable_def_cnst_chk|disabled|disk|distinct|distributed|distribution|drop|drop_existing|dts_buffers|dump|durability|dynamic|edition|elements|else|emergency|empty|enable|enable_broker|enabled|encoding|encrypted|encrypted_value|encryption|encryption_type|end|endpoint|endpoint_url|enhancedintegrity|entry|error_broker_conversations|errorfile|estimateonly|event|except|exec|executable|execute|exists|expand|expiredate|expiry_date|explicit|external|external_access|failover|failover_mode|failure_condition_level|fast|fast_forward|fastfirstrow|federated_service_account|fetch|field_terminator|fieldterminator|file|filelistonly|filegroup|filename|filestream|filestream_log|filestream_on|filetable|file_format|filter|first_row|fips_flagger|fire_triggers|first|firstrow|float|flush_interval_seconds|fmtonly|following|force|force_failover_allow_data_loss|force_service_allow_data_loss|forced|forceplan|formatfile|format_options|format_type|formsof|forward_only|free_cursors|free_exec_context|fullscan|fulltext|fulltextall|fulltextkey|function|generated|get|geography|geometry|global|go|goto|governor|guid|hadoop|hardening|hash|hashed|header_limit|headeronly|health_check_timeout|hidden|hierarchyid|histogram|histogram_steps|hits_cursors|hits_exec_context|hours|http|identity|identity_value|if|ifnull|ignore_constraints|ignore_dup_key|ignore_dup_row|ignore_triggers|image|immediate|implicit_transactions|include|include_null_values|index|inflectional|init|initiator|insensitive|insert|instead|int|integer|integrated|intersect|intermediate|interval_length_minutes|into|inuse_cursors|inuse_exec_context|io|is|isabout|iso_week|isolation|job_tracker_location|json|keep|keep_nulls|keep_replication|keepdefaults|keepfixed|keepidentity|keepnulls|kerberos|key|key_path|key_source|key_store_provider_name|keyset|kill|kilobytes_per_batch|labelonly|langid|language|last|lastrow|legacy_cardinality_estimation|length|level|lifetime|lineage_80_to_100|lineage_100_to_80|listener_ip|listener_port|load|loadhistory|lob_compaction|local|local_service_name|locate|location|lock_escalation|lock_timeout|lockres|login|login_type|loop|manual|mark_in_use_for_removal|masked|master|matched|max_queue_readers|max_duration|max_outstanding_io_per_volume|maxdop|maxerrors|maxlength|maxtransfersize|max_plans_per_query|max_storage_size_mb|mediadescription|medianame|mediapassword|memogroup|memory_optimized|merge|message|message_forward_size|message_forwarding|microsecond|millisecond|minutes|mirror_address|misses_cursors|misses_exec_context|mixed|modify|money|move|multi_user|must_change|name|namespace|nanosecond|native|native_compilation|nchar|ncharacter|never|new_account|new_broker|newname|next|no|no_browsetable|no_checksum|no_compression|no_infomsgs|no_triggers|no_truncate|nocount|noexec|noexpand|noformat|noinit|nolock|nonatomic|nonclustered|nondurable|none|norecompute|norecovery|noreset|norewind|noskip|not|notification|nounload|now|nowait|ntext|ntlm|numeric|numeric_roundabort|nvarchar|object|objid|oem|offline|old_account|online|operation_mode|open|openjson|optimistic|option|orc|out|outer|output|over|override|owner|ownership|pad_index|page|page_checksum|page_verify|pagecount|paglock|param|parameter_sniffing|parameter_type_expansion|parameterization|parquet|parseonly|partial|partition|partner|password|path|pause|percentage|permission_set|persisted|period|physical_only|plan_forcing_mode|policy|pool|population|ports|preceding|precision|predicate|presume_abort|primary|primary_role|print|prior|priority |priority_level|private|proc(edure)?|procedure_name|profile|provider|query_capture_mode|query_governor_cost_limit|query_optimizer_hotfixes|query_store|queue|quoted_identifier|raiserror|range|raw|rcfile|rc2|rc4|rc4_128|rdbms|read_committed_snapshot|read|read_only|read_write|readcommitted|readcommittedlock|readonly|readpast|readuncommitted|readwrite|real|rebuild|receive|recmodel_70backcomp|recompile|reconfigure|recovery|recursive|recursive_triggers|redo_queue|reject_sample_value|reject_type|reject_value|relative|remote|remote_data_archive|remote_proc_transactions|remote_service_name|remove|removed_cursors|removed_exec_context|reorganize|repeat|repeatable|repeatableread|replica|replicated|replnick_100_to_80|replnickarray_80_to_100|replnickarray_100_to_80|required|required_cursopt|resample|reset|resource|resource_manager_location|restart|restore|restricted_user|resume|retaindays|retention|return|revert|rewind|rewindonly|returns|robust|role|rollup|root|round_robin|route|row|rowdump|rowguidcol|rowlock|row_terminator|rows|rows_per_batch|rowsets_only|rowterminator|rowversion|rsa_1024|rsa_2048|rsa_3072|rsa_4096|rsa_512|safe|safety|sample|save|schema|schemabinding|scoped|scroll|scroll_locks|sddl|secexpr|secondary|secondary_only|secondary_role|secret|security|securityaudit|selective|self|send|sent|sequence|serde_method|serializable|server|service|service_broker|service_name|service_objective|session_timeout|session|sessions|seterror|setopts|sets|shard_map_manager|shard_map_name|sharded|shared_memory|show_statistics|showplan_all|showplan_text|showplan_xml|showplan_xml_with_recompile|shrinkdb|shutdown|sid|signature|simple|single_blob|single_clob|single_nclob|single_user|singleton|site|size_based_cleanup_mode|skip|smalldatetime|smallint|smallmoney|snapshot|snapshot_import|snapshotrestorephase|soap|softnuma|sort_in_tempdb|sorted_data|sorted_data_reorg|spatial|sql|sql_bigint|sql_binary|sql_bit|sql_char|sql_date|sql_decimal|sql_double|sql_float|sql_guid|sql_handle|sql_longvarbinary|sql_longvarchar|sql_numeric|sql_real|sql_smallint|sql_time|sql_timestamp|sql_tinyint|sql_tsi_day|sql_tsi_frac_second|sql_tsi_hour|sql_tsi_minute|sql_tsi_month|sql_tsi_quarter|sql_tsi_second|sql_tsi_week|sql_tsi_year|sql_type_date|sql_type_time|sql_type_timestamp|sql_varbinary|sql_varchar|sql_variant|sql_wchar|sql_wlongvarchar|ssl|ssl_port|standard|standby|start|start_date|started|stat_header|state|statement|static|statistics|statistics_incremental|statistics_norecompute|statistics_only|statman|stats_stream|status|stop|stop_on_error|stopat|stopatmark|stopbeforemark|stoplist|stopped|string_delimiter|subject|supplemental_logging|supported|suspend|symmetric|synchronous_commit|synonym|sysname|system|system_time|system_versioning|table|tableresults|tablock|tablockx|take|tape|target|target_index|target_partition|tcp|temporal_history_retention|text|textimage_on|then|thesaurus|throw|time|timeout|timestamp|tinyint|to|top|torn_page_detection|track_columns_updated|tran|transaction|transfer|triple_des|triple_des_3key|truncate|trustworthy|try|tsql|type|type_desc|type_warning|tzoffset|uid|unbounded|uncommitted|unique|uniqueidentifier|unlimited|unload|unlock|unsafe|updlock|url|use|useplan|useroptions|use_type_default|using|utcdatetime|valid_xml|validation|value|values|varbinary|varchar|verbose|verifyonly|version|view_metadata|virtual_device|visiblity|waitfor|webmethod|weekday|weight|well_formed_xml|when|while|widechar|widechar_ansi|widenative|windows|with|within|witness|without|without_array_wrapper|workload|wsdl|xact_abort|xlock|xml|xmlschema|xquery|xsinil|zone)\b\s*
        name: support.function.sql.sa
      - match: (?i)\s*\b(shift|sort|splice|unshift|pop|push|reverse)\b
        name: support.function.mutator.sa}
      - match: (?i)\s*\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b
        name: support.function.sa
      - match: (?i)\s*\b(add|append|at|average|chunk|clone|compact|concat|construct|copyWithin|count|create|difference|differenceBy|differenceWith|drop|dropRight|dropRightWhile|dropWhile|entries|every|exclude|fill|filter|find|findIndex|findLastIndex|first|flat|flatMap|flatten|flattenDeep|flattenDepth|fnFromIndex|forEach|from|fromPairs|groupBy|head|includes|indexOf|inGroups|inGroupsOf|initial|insert|intersect|intersection|intersectionBy|intersectionWith|isArray|isEmpty|isEqual|join|keys|last|lastIndexOf|least|map|max|median|min|most|none|nth|object|of|pop|pull|pullAll|pullAllBy|pullAllWith|pullAt|push|range|reduce|reduceRight|remove|removeAt|rest|reverse|sample|shift|shuffle|slice|some|sort|sortBy|sortedIndex|sortedIndexBy|sortedIndexOf|sortedLastIndex|sortedLastIndexBy|sortedLastIndexOf|sortedUniq|sortedUniqBy|splice|subtract|sum|tail|take|takeRight|takeRightWhile|takeWhile|to|toLocaleString|toSource|toString|union|unionBy|unionWith|uniq|uniqBy|unique|uniqWith|unshift|unzip|unzipWith|values|without|xor|xorBy|xorWith|zip|zipObject|zipObjectDeep|zipWith)\b
        name: support.function.method.array.sa
      - match: (?i)\s*\b(add|and|clamp|clone|compareExchange|contains|dateUnit|every|exchange|intersect|isLockFree|isValid|load|notify|or|span|store|sub|toArray|toString|union|wait|xor)\b
        name: support.function.method.atomics.sa
      - match: (?i)\s*\b(asIntN|asUintN|toLocaleString|toString|valueOf)\b
        name: support.function.method.bigint.sa
      - match: (?i)\s*\b(toSource|toString|valueOf)\b
        name: support.function.method.boolean.sa
      - match: (?i)\s*\b(contains|countBy|each|eachRight|every|filter|find|findLast|findWhere|flatMap|flatMapDeep|flatMapDepth|forEach|forEachRight|groupBy|includes|indexBy|invoke|invokeMap|keyBy|map|max|min|orderBy|partition|pluck|reduce|reduceRight|reject|sample|sampleSize|shuffle|size|some|sortBy|toArray|where)\b
        name: support.function.method.collection.sa
      - match: (?i)\s*\b(getBigInt64|getBigUint64|getFloat32|getFloat64|getInt16|getInt32|getInt8|getUint16|getUint32|getUint8|setBigInt64|setBigUint64|setFloat32|setFloat64|setInt16|setInt32|setInt8|setUint16|setUint32|setUint8)\b
        name: support.function.method.dataview.sa
      - match: (?i)\s*\b(addLocale|addUnits|advance|beginningOfISOWeek|beginningOfUnit|clone|create|daysInMonth|endOfISOWeek|endOfUnit|format|full|get|getAllLocaleCodes|getAllLocales|getDate|getDay|getFullYear|getHours|getISOWeek|getLocale|getMilliseconds|getMinutes|getMonth|getOption|getSeconds|getTime|getTimezoneOffset|getUTCDate|getUTCDay|getUTCFullYear|getUTCHours|getUTCMilliseconds|getUTCMinutes|getUTCMonth|getUTCOffset|getUTCSeconds|getUTCWeekday|getWeekday|getYear|is|isAfter|isBefore|isBetween|isDay|isFuture|isLastUnit|isLeapYear|isNextUnit|iso|isPast|isThisUnit|isUTC|isValid|long|medium|now|parse|range|relative|relativeTo|removeLocale|reset|rewind|set|setDate|setFullYear|setHours|setISOWeek|setLocale|setMilliseconds|setMinutes|setMonth|setOption|setSeconds|setTime|setUTC|setUTCDate|setUTCFullYear|setUTCHours|setUTCMilliseconds|setUTCMinutes|setUTCMonth|setUTCSeconds|setWeekday|setYear|short|toDateString|toGMTString|toISOString|toJSON|toLocaleDateString|toLocaleString|toLocaleTimeString|toSource|toString|toTimeString|toUTCString|unitsAgo|unitsFromNow|unitsSince|unitsUntil|UTC|valueOf|add|closestIndexTo|closestTo|compareAsc|compareDesc|format|formatDistance|formatDistanceStrict|formatDistanceToNow|formatDistanceToNowStrict|formatDuration|formatISO|formatISO9075|formatISODuration|formatRFC3339|formatRFC7231|formatRelative|intervalToDuration|intlFormat|isAfter|isBefore|isDate|isEqual|isExists|isFuture|isMatch|validates|isPast|isValid|lightFormat|max|min|parse|parseISO|parseJSON|set|sub|toDate|daysToWeeks|hoursToMilliseconds|hoursToMinutes|hoursToSeconds|millisecondsToHours|millisecondsToMinutes|millisecondsToSeconds|minutesToHours|minutesToMilliseconds|minutesToSeconds|monthsToQuarters|monthsToYears|quartersToMonths|quartersToYears|secondsToHours|secondsToMilliseconds|secondsToMinutes|weeksToDays|yearsToMonths|yearsToQuarters|areIntervalsOverlapping|clamp|eachDayOfInterval|eachHourOfInterval|eachMinuteOfInterval|eachMonthOfInterval|eachQuarterOfInterval|eachWeekOfInterval|eachWeekendOfInterval|eachYearOfInterval|getOverlappingDaysInIntervals|isWithinInterval|fromUnixTime|getTime|getUnixTime|addMilliseconds|differenceInMilliseconds|getMilliseconds|milliseconds|setMilliseconds|subMilliseconds|addSeconds|differenceInSeconds|endOfSecond|getSeconds|isSameSecond|isThisSecond|setSeconds|startOfSecond|subSeconds|addMinutes|differenceInMinutes|endOfMinute|getMinutes|isSameMinute|isThisMinute|roundToNearestMinutes|setMinutes|startOfMinute|subMinutes|addHours|differenceInHours|endOfHour|getHours|isSameHour|isThisHour|setHours|startOfHour|subHours|addBusinessDays|addDays|differenceInBusinessDays|differenceInCalendarDays|differenceInDays|endOfDay|endOfToday|endOfTomorrow|endOfYesterday|getDate|getDayOfYear|isSameDay|isToday|isTomorrow|isYesterday|setDate|setDayOfYear|startOfDay|startOfToday|startOfTomorrow|startOfYesterday|subBusinessDays|subDays|getDay|getISODay|isFriday|isMonday|isSaturday|isSunday|isThursday|isTuesday|isWednesday|isWeekend|nextDay|nextFriday|nextMonday|nextSaturday|nextSunday|nextThursday|nextTuesday|nextWednesday|previousDay|previousFriday|previousMonday|previousSaturday|previousSunday|previousThursday|previousTuesday|previousWednesday|setDay|setISODay|addWeeks|differenceInCalendarWeeks|differenceInWeeks|endOfWeek|getWeek|getWeekOfMonth|getWeeksInMonth|isSameWeek|isThisWeek|lastDayOfWeek|setWeek|startOfWeek|subWeeks|differenceInCalendarISOWeeks|endOfISOWeek|getISOWeek|isSameISOWeek|isThisISOWeek|lastDayOfISOWeek|setISOWeek|startOfISOWeek|addMonths|differenceInCalendarMonths|differenceInMonths|eachWeekendOfMonth|endOfMonth|getDaysInMonth|getMonth|isFirstDayOfMonth|isLastDayOfMonth|isSameMonth|isThisMonth|lastDayOfMonth|setMonth|startOfMonth|subMonths|addQuarters|differenceInCalendarQuarters|differenceInQuarters|endOfQuarter|getQuarter|isSameQuarter|isThisQuarter|lastDayOfQuarter|setQuarter|startOfQuarter|subQuarters|addYears|differenceInCalendarYears|differenceInYears|eachWeekendOfYear|endOfYear|getDaysInYear|getYear|isLeapYear|isSameYear|isThisYear|lastDayOfYear|setYear|startOfYear|subYears|addISOWeekYears|differenceInCalendarISOWeekYears|differenceInISOWeekYears|endOfISOWeekYear|getISOWeekYear|getISOWeeksInYear|isSameISOWeekYear|lastDayOfISOWeekYear|setISOWeekYear|startOfISOWeekYear|subISOWeekYears|endOfDecade|getDecade|lastDayOfDecade|startOfDecade|getWeekYear|setWeekYear|startOfWeekYear)\b
        name: support.function.method.date.sa
      - match: (?i)\s*\b(__|add|addIndex|adjust|after|all|allpass|fail|always|and|andThen|any|anypass|fail|ap|aperture|append|apply|applySpec|applyTo|ary|ascend|assoc|assocPath|before|binary|bind|bindAll|bindKey|both|call|cancel|chain|clamp|clone|comparator|complement|compose|composeK|composeP|composeWith|concat|cond|construct|constructN|contains|converge|countBy|curry|curryN|curryRight|debounce|dec|defaultTo|defer|delay|descend|difference|differenceWith|dissoc|dissocPath|divide|drop|dropLast|dropLastWhile|dropRepeats|dropRepeatsWith|dropWhile|either|empty|endsWith|eqBy|eqProps|equals|every|evolve|F|filter|find|findIndex|findLast|findLastIndex|flatten|flip|forEach|forEachObjIndexed|fromPairs|groupBy|groupWith|gt|gte|has|hasIn|hasPath|head|identical|identity|ifElse|inc|includes|indexBy|indexOf|init|innerJoin|insert|insertAll|intersection|intersperse|into|invert|invertObj|invoker|is|isEmpty|isNil|join|juxt|keys|keysIn|last|lastIndexOf|lazy|length|lens|lensIndex|lensPath|lensProp|lift|liftN|lock|lt|lte|map|mapAccum|mapAccumRight|mapObjIndexed|match|mathMod|max|maxBy|mean|median|memoize|memoizeWith|merge|mergeAll|mergeDeepLeft|mergeDeepRight|mergeDeepWith|mergeDeepWithKey|mergeLeft|mergeRight|mergeWith|mergeWithKey|min|minBy|modulo|move|multiply|nAry|negate|none|not|nth|nthArg|o|objOf|of|omit|once|or|otherwise|over|overArgs|pair|partial|partialRight|partition|path|pathEq|pathOr|paths|pathSatisfies|pick|pickAll|pickBy|pipe|pipeK|pipeP|pipeWith|pluck|prepend|product|project|prop|propEq|propIs|propOr|props|propSatisfies|range|rearg|reduce|reduceBy|reduced|reduceRight|reduceWhile|reject|remove|repeat|replace|rest|restArguments|reverse|scan|sequence|set|slice|sort|sortBy|sortWith|split|splitAt|splitEvery|splitWhen|spread|startsWith|subtract|sum|symmetricDifference|symmetricDifferenceWith|T|tail|take|takeLast|takeLastWhile|takeWhile|tap|test|throttle|thunkify|times|toLower|toPairs|toPairsIn|toSource|toString|toUpper|transduce|transpose|traverse|trim|tryCatch|type|unapply|unary|uncurryN|unfold|union|unionWith|uniq|uniqBy|uniqWith|unless|unnest|until|update|useWith|values|valuesIn|view|when|where|whereEq|without|wrap|xor|xprod|zip|zipObj|zipWith)\b
        name: support.function.method.function.sa
      - match: (?i)\s*\b(next|return|throw)\b
        name: support.function.method.generator.sa
      - match: (?i)\s*\b(chain|parse|stringify|value)\b
        name: support.function.method.json.sa
      - match: (?i)\s*\b(castArray|clone|cloneDeep|cloneDeepWith|cloneWith|conformsTo|eq|gt|gte|isArguments|isArray|isArrayBuffer|isArrayLike|isArrayLikeObject|isBoolean|isBuffer|isDate|isElement|isEmpty|isError|iSetual|iSetualWith|isFinite|isFunction|isInteger|isLength|isMap|isMatch|isMatchWith|isNaN|isNative|isNil|isNull|isNumber|isObject|isObjectLike|isPlainObject|isProxy|isRegExp|isSafeInteger|isSet|isString|isSymbol|isUndefined|isWeakMap|isWeakSet|lt|lte|toArray|toFinite|toInteger|toLength|toNumber|toPlainObject|toSafeInteger|toString)\b
        name: support.function.method.lang.sa
      - match: (?i)\s*\b(clear|delete|entries|forEach|get|has|keys|set|values)\b
        name: support.function.method.map.sa
      - match: (?i)\s*\b(abs|acos|acosh|acot|acoth|acsc|acsch|add|and|apply|arg|asec|asech|asin|asinh|atan|atan2|atanh|bellNumbers|bin|bitAnd|bitNot|bitOr|bitXor|catalan|cbrt|ceil|clone|clz32|column|combinations|combinationsWithRep|compare|compareNatural|compareText|compile|composition|concat|conj|cos|cosh|cot|coth|count|cross|csc|csch|ctranspose|cube|deepEqual|derivative|det|diag|diff|distance|divide|dot|dotDivide|dotMultiply|dotPow|eigs|equal|equalText|erf|evaluate|exp|expm|expm1|factorial|filter|fix|flatten|floor|forEach|format|fround|gamma|gcd|getMatrixDataType|hasNumericValue|help|hex|hypot|identity|im|imul|intersect|inv|isInteger|isNaN|isNegative|isNumeric|isPositive|isPrime|isZero|kldivergence|kron|larger|largerEq|lcm|leftShift|log|log10|log1p|log2|lsolve|lup|lusolve|mad|map|max|maxBy|mean|meanBy|median|min|minBy|mod|mode|multinomial|multiply|norm|not|nthRoot|nthRoots|numeric|oct|ones|or|parser|partitionSelect|permutations|pickRandom|pow|print|prod|qr|quantileSeq|random|randomInt|range|rationalize|re|reshape|resize|rightArithShift|rightLogShift|rotate|rotationMatrix|round|row|sec|sech|setCartesian|setDifference|setDistinct|setIntersect|setIsSubset|setMultiplicity|setPowerset|setSize|setSymDifference|setUnion|sign|simplify|sin|sinh|size|slu|smaller|smallerEq|sort|sqrt|sqrtm|square|squeeze|std|stirlingS2|subset|subtract|sum|sumBy|tan|tanh|to|trace|transpose|trunc|typeOf|unaryMinus|unaryPlus|unequal|usolve|variance|xgcd|xor|zeros)\b
        name: support.function.method.math.sa
      - match: (?i)\s*\b(abbr|bytes|cap|ceil|chr|clamp|dateUnit|dateUnitAfter|dateUnitAgo|dateUnitBefore|dateUnitFromNow|downto|duration|floor|format|hex|inRange|isEven|isFinite|isInteger|isMultipleOf|isNaN|isOdd|isSafeInteger|log|math|metric|ordinalize|pad|parseFloat|parseInt|random|range|round|times|toExponential|toFixed|toLocaleString|toNumber|toPrecision|toSource|toString|upto|valueOf)\b
        name: support.function.method.number.sa
      - match: (?i)\s*\b(__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__|add|addAll|allKeys|assign|assignIn|assignInWith|assignWith|at|average|clone|count|create|defaults|defaultsDeep|defineProperties|defineProperty|entries|entriesIn|every|exclude|extend|extendOwn|extendWith|filter|find|findKey|findLastKey|forEach|forIn|forInRight|forOwn|forOwnRight|freeze|fromEntries|fromQueryString|functions|functionsIn|get|getOwnPropertyDescriptor|getOwnPropertyDescriptors|getOwnPropertyNames|getOwnPropertySymbols|getPrototypeOf|has|hasIn|hasOwnProperty|intersect|invert|invertBy|invoke|is|isArguments|isArray|isArrayBuffer|isBoolean|isDataView|isDate|isElement|isEmpty|isEqual|isError|isExtensible|isFinite|isFrozen|isFunction|isMap|isMatch|isNaN|isNull|isNumber|isObject|isPrototypeOf|isRegExp|isSealed|isSet|isString|isSymbol|isType|isTypedArray|isUndefined|isWeakMap|isWeakSet|keys|keysIn|least|map|mapKeys|mapObject|mapValues|matcher|max|median|merge|mergeAll|mergeWith|min|most|none|omit|omitBy|pairs|pick|pickBy|preventExtensions|property|propertyIsEnumerable|propertyOf|reduce|reject|remove|result|seal|select|set|setPrototypeOf|setWith|size|some|subtract|sum|tap|toLocaleString|toPairs|toPairsIn|toPath|toQueryString|toSource|toString|transform|unset|update|updateWith|valueOf|values|valuesIn)\b
        name: support.function.method.object.sa
      - match: (?i)\s*\b(all|allSettled|any|catch|finally|race|reject|resolve|then)\b
        name: support.function.method.promise.sa
      - match: (?i)\s*\b(apply|construct|defineProperty|deleteProperty|get|getOwnPropertyDescriptor|getPrototypeOf|has|isExtensible|ownKeys|preventExtensions|register|set|setPrototypeOf|unregister)\b
        name: support.function.method.proxy.sa
      - match: (?i)\s*\b(address|age|altitude|ampm|android_id|animal|apple_token|areacode|avatar|bb_pin|birthday|bool|capitalize|cc|cc_type|cf|character|city|coin|color|company|coordinates|country|cpf|currency|currency_pair|date|depth|dice|dollar|domain|email|euro|exp|exp_month|exp_year|falsy|fbid|first|floating|gender|geohash|google_analytics|guid|hammertime|hash|hashtag|hidden|hour|integer|ip|ipv6|klout|last|latitude|letter|locale|longitude|millisecond|minute|mixin|month|n|name|natural|normal|pad|paragraph|phone|pick|pickone|pickset|postal|postcode|prefix|prime|profession|province|radio|rpg|second|sentence|set|shuffle|ssn|state|street|string|suffix|syllable|timestamp|timezone|tld|tv|twitter|unique|url|weekday|weighted|word|wp7_anid|wp8_anid2|year|zip)\b
        name: support.function.method.random.sa
      - match: (?i)\s*\b(addFlags|compile|escape|exec|getFlags|removeFlags|setFlags|test|toSource|toString)\b
        name: support.function.method.regexp.sa
      - match: (?i)\s*\b(at|chain|commit|next|plant|prototype|reverse|tap|thru|toJSON|value|valueOf)\b
        name: support.function.method.seq.sa
      - match: (?i)\s*\b(add|clear|delete|entries|forEach|has|values)\b
        name: support.function.method.set.sa
      - match: (?i)\s*\b(addAcronym|addHuman|addPlural|anchor|at|big|blink|bold|camelCase|camelize|capitalize|chain|charAt|charCodeAt|chars|codePointAt|codePoints|codes|compact|concat|count|countGraphemes|countSubstrings|countWhere|countWords|dasherize|deburr|decapitalize|decodeBase64|encodeBase64|endsWith|escape|escapeHtml|escapeHTML|escapeRegExp|escapeURL|first|fixed|fontcolor|fontsize|forEach|format|from|fromCharCode|fromCodePoint|graphemeAt|graphemes|hankaku|hasScript|hiragana|humanize|includes|indexOf|insert|isAlpha|isAlphaDigit|isBlank|isDigit|isEmpty|isLowerCase|isNumeric|isScript|isString|isUpperCase|italics|katakana|kebabCase|last|lastIndexOf|latinise|lines|link|localeCompare|lowerCase|lowerFirst|match|matchAll|matches|normalize|pad|padEnd|padLeft|padRight|padStart|parameterize|parseInt|pluralize|prune|range|raw|remove|removeAll|removeTags|repeat|replace|replaceAll|reverse|reverseGrapheme|search|shift|singularize|slice|slugify|small|snakeCase|spacify|splice|split|sprintf|startCase|startsWith|strike|stripBom|stripTags|sub|substr|substring|sup|swapCase|template|thru|titleCase|titleize|to|toLocaleLowerCase|toLocaleUpperCase|toLower|toLowerCase|toNumber|toSource|toString|toUpper|toUpperCase|tr|trim|trimEnd|trimLeft|trimRight|trimStart|truncate|truncateOnWord|underscore|unescape|unescapeHtml|unescapeHTML|unescapeURL|upperCase|upperFirst|value|valueOf|vprintf|words|wordWrap|zenkaku)\b
        name: support.function.method.string.sa
      - match: (?i)\s*\b(for|keyFor|toSource|toString|valueOf)\b
        name: support.function.method.symbol.sa
      - match: (?i)\s*\b(at|copyWithin|entries|every|fill|filter|find|findIndex|forEach|from|includes|indexOf|join|keys|lastIndexOf|map|of|reduce|reduceRight|reverse|set|slice|some|sort|subarray|toLocaleString|toString|values)\b
        name: support.function.method.typedarray.sa
      - match: (?i)\s*\b(attempt|bindAll|cond|conforms|constant|defaultTo|escape|flow|flowRight|identity|iteratee|matches|matchesProperty|method|methodOf|mixin|noConflict|noop|now|nthArg|over|overEvery|overSome|property|propertyOf|random|range|rangeRight|result|runInContext|stubArray|stubFalse|stubObject|stubString|stubTrue|template|times|toPath|unescape|uniqueId)\b
        name: support.function.method.util.sa
      - match: (?i)\s*\b(compile|compileStreaming|instantiate|instantiateStreaming|validate)\b
        name: support.function.method.webassembly.sa
      - match: (?i)\s*\b(on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort))\b
        name: support.function.event-handler.sa
      - match: (?i)\s*\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\b
        name: support.function.method.sa
      - match: (?i)\s*\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|appendChild|appendData|before|blur|canPlayType|captureStream|caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|cloneContents|cloneNode|cloneRange|close|closest|collapse|compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|createAttributeNS|createCaption|createCDATASection|createComment|createContextualFragment|createDocument|createDocumentFragment|createDocumentType|createElement|createElementNS|createEntityReference|createEvent|createExpression|createHTMLDocument|createNodeIterator|createNSResolver|createProcessingInstruction|createRange|createShadowRoot|createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|getClientRects|getContext|getDestinationInsertionPoints|getElementById|getElementsByClassName|getElementsByName|getElementsByTagName|getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|previousSibling|probablySupportsContext|queryCommandEnabled|queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|querySelector|querySelectorAll|registerContentHandler|registerElement|registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|toDataURL|toggle|toString|values|write|writeln)\b
        name: support.function.dom.sa
      - match: (?i)\bapc_(store|sma_info|compile_file|clear_cache|cas|cache_info|inc|dec|define_constants|delete(_file)?|exists|fetch|load_constants|add|bin_(dump|load)(file)?)\b
        name: support.function.apc.sa
      - match: (?i)\b(shuffle|sizeof|sort|next|nat(case)?sort|count|compact|current|in_array|usort|uksort|uasort|pos|prev|end|each|extract|ksort|key(_exists)?|krsort|list|asort|arsort|rsort|reset|range|array(_(shift|sum|splice|search|slice|chunk|change_key_case|count_values|column|combine|(diff|intersect)(_(u)?(key|assoc))?|u(diff|intersect)(_(u)?assoc)?|unshift|unique|pop|push|pad|product|values|keys|key_exists|filter|fill(_keys)?|flip|walk(_recursive)?|reduce|replace(_recursive)?|reverse|rand|multisort|merge(_recursive)?|map)?))\b
        name: support.function.array.sa
      - match: (?i)\b(show_source|sys_getloadavg|sleep|highlight_(file|string)|constant|connection_(aborted|status)|time_(nanosleep|sleep_until)|ignore_user_abort|die|define(d)?|usleep|uniqid|unpack|__halt_compiler|php_(check_syntax|strip_whitespace)|pack|eval|exit|get_browser)\b
        name: support.function.basic_functions.sa
      - match: (?i)\bbc(scale|sub|sqrt|comp|div|pow(mod)?|add|mod|mul)\b
        name: support.function.bcmath.sa
      - match: (?i)\bblenc_encrypt\b
        name: support.function.blenc.sa
      - match: (?i)\bbz(compress|close|open|decompress|errstr|errno|error|flush|write|read)\b
        name: support.function.bz2.sa
      - match: (?i)\b((French|Gregorian|Jewish|Julian)ToJD|cal_(to_jd|info|days_in_month|from_jd)|unixtojd|jdto(unix|jewish)|easter_(date|days)|JD(MonthName|To(Gregorian|Julian|French)|DayOfWeek))\b
        name: support.function.calendar.sa
      - match: (?i)\b(class_alias|all_user_method(_array)?|is_(a|subclass_of)|__autoload|(class|interface|method|property|trait)_exists|get_(class(_(vars|methods))?|(called|parent)_class|object_vars|declared_(classes|interfaces|traits)))\b
        name: support.function.classobj.sa
      - match: (?i)\b(com_(create_guid|print_typeinfo|event_sink|load_typelib|get_active_object|message_pump)|variant_(sub|set(_type)?|not|neg|cast|cat|cmp|int|idiv|imp|or|div|date_(from|to)_timestamp|pow|eqv|fix|and|add|abs|round|get_type|xor|mod|mul))\b
        name: support.function.com.sa
      - match: (?i)\b(isset|unset|eval|empty|list)\b
        name: support.function.construct.sa
      - match: (?i)\b(print|echo)\b
        name: support.function.construct.output.sa
      - match: (?i)\bctype_(space|cntrl|digit|upper|punct|print|lower|alnum|alpha|graph|xdigit)\b
        name: support.function.ctype.sa
      - match: (?i)\bcurl_(share_(close|init|setopt)|strerror|setopt(_array)?|copy_handle|close|init|unescape|pause|escape|errno|error|exec|version|file_create|reset|getinfo|multi_(strerror|setopt|select|close|init|info_read|(add|remove)_handle|getcontent|exec))\b
        name: support.function.curl.sa
      - match: (?i)\b(strtotime|str[fp]time|checkdate|time|timezone_name_(from_abbr|get)|idate|timezone_((location|offset|transitions|version)_get|(abbreviations|identifiers)_list|open)|date(_(sun(rise|set)|sun_info|sub|create(_(immutable_)?from_format)?|timestamp_(get|set)|timezone_(get|set)|time_set|isodate_set|interval_(create_from_date_string|format)|offset_get|diff|default_timezone_(get|set)|date_set|parse(_from_format)?|format|add|get_last_errors|modify))?|localtime|get(date|timeofday)|gm(strftime|date|mktime)|microtime|mktime)\b
        name: support.function.datetime.sa
      - match: (?i)\bdba_(sync|handlers|nextkey|close|insert|optimize|open|delete|popen|exists|key_split|firstkey|fetch|list|replace)\b
        name: support.function.dba.sa
      - match: (?i)\bdbx_(sort|connect|compare|close|escape_string|error|query|fetch_row)\b
        name: support.function.dbx.sa
      - match: (?i)\b(scandir|chdir|chroot|closedir|opendir|dir|rewinddir|readdir|getcwd)\b
        name: support.function.dir.sa
      - match: (?i)\beio_(sync(fs)?|sync_file_range|symlink|stat(vfs)?|sendfile|set_min_parallel|set_max_(idle|poll_(reqs|time)|parallel)|seek|n(threads|op|pending|reqs|ready)|chown|chmod|custom|close|cancel|truncate|init|open|dup2|unlink|utime|poll|event_loop|f(sync|stat(vfs)?|chown|chmod|truncate|datasync|utime|allocate)|write|lstat|link|rename|realpath|read(ahead|dir|link)?|rmdir|get_(event_stream|last_error)|grp(_(add|cancel|limit))?|mknod|mkdir|busy)\b
        name: support.function.eio.sa
      - match: (?i)\benchant_(dict_(store_replacement|suggest|check|is_in_session|describe|quick_check|add_to_(personal|session)|get_error)|broker_(set_ordering|init|dict_exists|describe|free(_dict)?|list_dicts|request_(pwl_)?dict|get_error))\b
        name: support.function.enchant.sa
      - match: (?i)\b(split(i)?|sql_regcase|ereg(i)?(_replace)?)\b
        name: support.function.ereg.sa
      - match: (?i)\b((restore|set)_(error_handler|exception_handler)|trigger_error|debug_(print_)?backtrace|user_error|error_(log|reporting|get_last))\b
        name: support.function.errorfunc.sa
      - match: (?i)\b(shell_exec|system|passthru|proc_(nice|close|terminate|open|get_status)|escapeshell(arg|cmd)|exec)\b
        name: support.function.exec.sa
      - match: (?i)\b(exif_(thumbnail|tagname|imagetype|read_data)|read_exif_data)\b
        name: support.function.exif.sa
      - match: (?i)\bfann_((duplicate|length|merge|shuffle|subset)_train_data|scale_(train(_data)?|(input|output)(_train_data)?)|set_(scaling_params|sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|cascade_(num_candidate_groups|candidate_(change_fraction|limit|stagnation_epochs)|output_(change_fraction|stagnation_epochs)|weight_multiplier|activation_(functions|steepnesses)|(max|min)_(cand|out)_epochs)|callback|training_algorithm|train_(error|stop)_function|(input|output)_scaling_params|error_log|quickprop_(decay|mu)|weight(_array)?|learning_(momentum|rate)|bit_fail_limit|activation_(function|steepness)(_(hidden|layer|output))?|rprop_((decrease|increase)_factor|delta_(max|min|zero)))|save(_train)?|num_(input|output)_train_data|copy|clear_scaling_params|cascadetrain_on_(file|data)|create_((sparse|shortcut|standard)(_array)?|train(_from_callback)?|from_file)|test(_data)?|train(_(on_(file|data)|epoch))?|init_weights|descale_(input|output|train)|destroy(_train)?|print_error|run|reset_(MSE|err(no|str))|read_train_from_file|randomize_weights|get_(sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|num_(input|output|layers)|network_type|MSE|connection_(array|rate)|bias_array|bit_fail(_limit)?|cascade_(num_(candidates|candidate_groups)|(candidate|output)_(change_fraction|limit|stagnation_epochs)|weight_multiplier|activation_(functions|steepnesses)(_count)?|(max|min)_(cand|out)_epochs)|total_(connections|neurons)|training_algorithm|train_(error|stop)_function|err(no|str)|quickprop_(decay|mu)|learning_(momentum|rate)|layer_array|activation_(function|steepness)|rprop_((decrease|increase)_factor|delta_(max|min|zero))))\b
        name: support.function.fann.sa
      - match: (?i)\b(symlink|stat|set_file_buffer|chown|chgrp|chmod|copy|clearstatcache|touch|tempnam|tmpfile|is_(dir|(uploaded_)?file|executable|link|readable|writ(e)?able)|disk_(free|total)_space|diskfreespace|dirname|delete|unlink|umask|pclose|popen|pathinfo|parse_ini_(file|string)|fscanf|fstat|fseek|fnmatch|fclose|ftell|ftruncate|file(size|[acm]time|type|inode|owner|perms|group)?|file_(exists|(get|put)_contents)|f(open|puts|putcsv|passthru|eof|flush|write|lock|read|gets(s)?|getc(sv)?)|lstat|lchown|lchgrp|link(info)?|rename|rewind|read(file|link)|realpath(_cache_(get|size))?|rmdir|glob|move_uploaded_file|mkdir|basename)\b
        name: support.function.file.sa
      - match: (?i)\b(finfo_(set_flags|close|open|file|buffer)|mime_content_type)\b
        name: support.function.fileinfo.sa
      - match: (?i)\bfilter_(has_var|input(_array)?|id|var(_array)?|list)\b
        name: support.function.filter.sa
      - match: (?i)\bfastcgi_finish_request\b
        name: support.function.fpm.sa
      - match: (?i)\b(call_user_(func|method)(_array)?|create_function|unregister_tick_function|forward_static_call(_array)?|function_exists|func_(num_args|get_arg(s)?)|register_(shutdown|tick)_function|get_defined_functions)\b
        name: support.function.funchand.sa
      - match: (?i)\b((n)?gettext|textdomain|d((n)?gettext|c(n)?gettext)|bind(textdomain|_textdomain_codeset))\b
        name: support.function.gettext.sa
      - match: (?i)\bgmp_(scan[01]|strval|sign|sub|setbit|sqrt(rem)?|hamdist|neg|nextprime|com|clrbit|cmp|testbit|intval|init|invert|import|or|div(exact)?|div_(q|qr|r)|jacobi|popcount|pow(m)?|perfect_square|prob_prime|export|fact|legendre|and|add|abs|root(rem)?|random(_(bits|range))?|gcd(ext)?|xor|mod|mul)\b
        name: support.function.gmp.sa
      - match: (?i)\bhash(_(hmac(_file)?|copy|init|update(_(file|stream))?|pbkdf2|equals|file|final|algos))?\b
        name: support.function.hash.sa
      - match: (?i)\b(http_(support|send_(status|stream|content_(disposition|type)|data|file|last_modified)|head|negotiate_(charset|content_type|language)|chunked_decode|cache_(etag|last_modified)|throttle|inflate|deflate|date|post_(data|fields)|put_(data|file|stream)|persistent_handles_(count|clean|ident)|parse_(cookie|headers|message|params)|redirect|request(_(method_(exists|name|(un)?register)|body_encode))?|get(_request_(headers|body(_stream)?))?|match_(etag|modified|request_header)|build_(cookie|str|url))|ob_(etag|deflate|inflate)handler)\b
        name: support.function.http.sa
      - match: (?i)\b(iconv(_(str(pos|len|rpos)|substr|(get|set)_encoding|mime_(decode(_headers)?|encode)))?|ob_iconv_handler)\b
        name: support.function.iconv.sa
      - match: (?i)\biis_((start|stop)_(service|server)|set_(script_map|server_rights|dir_security|app_settings)|(add|remove)_server|get_(script_map|service_state|server_(rights|by_(comment|path))|dir_security))\b
        name: support.function.iisfunc.sa
      - match: (?i)\b(iptc(embed|parse)|(jpeg|png)2wbmp|gd_info|getimagesize(fromstring)?|image(s[xy]|scale|(char|string)(up)?|set(style|thickness|tile|interpolation|pixel|brush)|savealpha|convolution|copy(resampled|resized|merge(gray)?)?|colors(forindex|total)|color(set|closest(alpha|hwb)?|transparent|deallocate|(allocate|exact|resolve)(alpha)?|at|match)|crop(auto)?|create(truecolor|from(string|jpeg|png|wbmp|webp|gif|gd(2(part)?)?|xpm|xbm))?|types|ttf(bbox|text)|truecolortopalette|istruecolor|interlace|2wbmp|destroy|dashedline|jpeg|_type_to_(extension|mime_type)|ps(slantfont|text|(encode|extend|free|load)font|bbox)|png|polygon|palette(copy|totruecolor)|ellipse|ft(text|bbox)|filter|fill|filltoborder|filled(arc|ellipse|polygon|rectangle)|font(height|width)|flip|webp|wbmp|line|loadfont|layereffect|antialias|affine(matrix(concat|get))?|alphablending|arc|rotate|rectangle|gif|gd(2)?|gammacorrect|grab(screen|window)|xbm))\b
        name: support.function.image.sa
      - match: (?i)\b(sys_get_temp_dir|set_(time_limit|include_path|magic_quotes_runtime)|cli_(get|set)_process_title|ini_(alter|get(_all)?|restore|set)|zend_(thread_id|version|logo_guid)|dl|php(credits|info|version)|php_(sapi_name|ini_(scanned_files|loaded_file)|uname|logo_guid)|putenv|extension_loaded|version_compare|assert(_options)?|restore_include_path|gc_(collect_cycles|disable|enable(d)?)|getopt|get_(cfg_var|current_user|defined_constants|extension_funcs|include_path|included_files|loaded_extensions|magic_quotes_(gpc|runtime)|required_files|resources)|get(env|lastmod|rusage|my(inode|[gup]id))|memory_get_(peak_)?usage|main|magic_quotes_runtime)\b
        name: support.function.info.sa
      - match: (?i)\bibase_(set_event_handler|service_(attach|detach)|server_info|num_(fields|params)|name_result|connect|commit(_ret)?|close|trans|delete_user|drop_db|db_info|pconnect|param_info|prepare|err(code|msg)|execute|query|field_info|fetch_(assoc|object|row)|free_(event_handler|query|result)|wait_event|add_user|affected_rows|rollback(_ret)?|restore|gen_id|modify_user|maintain_db|backup|blob_(cancel|close|create|import|info|open|echo|add|get))\b
        name: support.function.interbase.sa
      - match: (?i)\b(normalizer_(normalize|is_normalized)|idn_to_(unicode|utf8|ascii)|numfmt_(set_(symbol|(text_)?attribute|pattern)|create|(parse|format)(_currency)?|get_(symbol|(text_)?attribute|pattern|error_(code|message)|locale))|collator_(sort(_with_sort_keys)?|set_(attribute|strength)|compare|create|asort|get_(strength|sort_key|error_(code|message)|locale|attribute))|transliterator_(create(_(inverse|from_rules))?|transliterate|list_ids|get_error_(code|message))|intl(cal|tz)_get_error_(code|message)|intl_(is_failure|error_name|get_error_(code|message))|datefmt_(set_(calendar|lenient|pattern|timezone(_id)?)|create|is_lenient|parse|format(_object)?|localtime|get_(calendar(_object)?|time(type|zone(_id)?)|datetype|pattern|error_(code|message)|locale))|locale_(set_default|compose|canonicalize|parse|filter_matches|lookup|accept_from_http|get_(script|display_(script|name|variant|language|region)|default|primary_language|keywords|all_variants|region))|resourcebundle_(create|count|locales|get(_(error_(code|message)))?)|grapheme_(str(i?str|r?i?pos|len)|substr|extract)|msgfmt_(set_pattern|create|(format|parse)(_message)?|get_(pattern|error_(code|message)|locale)))\b
        name: support.function.intl.sa
      - match: (?i)\bjson_(decode|encode|last_error(_msg)?)\b
        name: support.function.json.sa
      - match: (?i)\bldap_(start|tls|sort|search|sasl_bind|set_(option|rebind_proc)|(first|next)_(attribute|entry|reference)|connect|control_paged_result(_response)?|count_entries|compare|close|t61_to_8859|8859_to_t61|dn2ufn|delete|unbind|parse_(reference|result)|escape|errno|err2str|error|explode_dn|bind|free_result|list|add|rename|read|get_(option|dn|entries|values(_len)?|attributes)|modify(_batch)?|mod_(add|del|replace))\b
        name: support.function.ldap.sa
      - match: (?i)\blibxml_(set_(streams_context|external_entity_loader)|clear_errors|disable_entity_loader|use_internal_errors|get_(errors|last_error))\b
        name: support.function.libxml.sa
      - match: (?i)\b(ezmlm_hash|mail)\b
        name: support.function.mail.sa
      - match: (?i)\b((a)?(cos|sin|tan)(h)?|sqrt|srand|hypot|hexdec|ceil|is_(nan|(in)?finite)|octdec|dec(hex|oct|bin)|deg2rad|pi|pow|exp(m1)?|floor|fmod|lcg_value|log(1(p|0))?|atan2|abs|round|rand|rad2deg|getrandmax|mt_(srand|rand|getrandmax)|max|min|bindec|base_convert)\b
        name: support.function.math.sa
      - match: (?i)\bmb_(str(cut|str|to(lower|upper)|istr|ipos|imwidth|pos|width|len|rchr|richr|ripos|rpos)|substitute_character|substr(_count)?|split|send_mail|http_(input|output)|check_encoding|convert_(case|encoding|kana|variables)|internal_encoding|output_handler|decode_(numericentity|mimeheader)|detect_(encoding|order)|parse_str|preferred_mime_name|encoding_aliases|encode_(numericentity|mimeheader)|ereg(i(_replace)?)?|ereg_(search(_(get(pos|regs)|init|regs|(set)?pos))?|replace(_callback)?|match)|list_encodings|language|regex_(set_options|encoding)|get_info)\b
        name: support.function.mbstring.sa
      - match: (?i)\b(mcrypt_(cfb|create_iv|cbc|ofb|decrypt|encrypt|ecb|list_(algorithms|modes)|generic(_((de)?init|end))?|enc_(self_test|is_block_(algorithm|algorithm_mode|mode)|get_(supported_key_sizes|(block|iv|key)_size|(algorithms|modes)_name))|get_(cipher_name|(block|iv|key)_size)|module_(close|self_test|is_block_(algorithm|algorithm_mode|mode)|open|get_(supported_key_sizes|algo_(block|key)_size)))|mdecrypt_generic)\b
        name: support.function.mcrypt.sa
      - match: (?i)\bmemcache_debug\b
        name: support.function.memcache.sa
      - match: (?i)\bmhash(_(count|keygen_s2k|get_(hash_name|block_size)))?\b
        name: support.function.mhash.sa
      - match: (?i)\b(log_(cmd_(insert|delete|update)|killcursor|write_batch|reply|getmore)|bson_(decode|encode))\b
        name: support.function.mongo.sa
      - match: (?i)\bmysql_(stat|set_charset|select_db|num_(fields|rows)|connect|client_encoding|close|create_db|escape_string|thread_id|tablename|insert_id|info|data_seek|drop_db|db_(name|query)|unbuffered_query|pconnect|ping|errno|error|query|field_(seek|name|type|table|flags|len)|fetch_(object|field|lengths|assoc|array|row)|free_result|list_(tables|dbs|processes|fields)|affected_rows|result|real_escape_string|get_(client|host|proto|server)_info)\b
        name: support.function.mysql.sa
      - match: (?i)\bmysqli_(ssl_set|store_result|stat|send_(query|long_data)|set_(charset|opt|local_infile_(default|handler))|stmt_(store_result|send_long_data|next_result|close|init|data_seek|prepare|execute|fetch|free_result|attr_(get|set)|result_metadata|reset|get_(result|warnings)|more_results|bind_(param|result))|select_db|slave_query|savepoint|next_result|change_user|character_set_name|connect|commit|client_encoding|close|thread_safe|init|options|(enable|disable)_(reads_from_master|rpl_parse)|dump_debug_info|debug|data_seek|use_result|ping|poll|param_count|prepare|escape_string|execute|embedded_server_(start|end)|kill|query|field_seek|free_result|autocommit|rollback|report|refresh|fetch(_(object|fields|field(_direct)?|assoc|all|array|row))?|rpl_(parse_enabled|probe|query_type)|release_savepoint|reap_async_query|real_(connect|escape_string|query)|more_results|multi_query|get_(charset|connection_stats|client_(stats|info|version)|cache_stats|warnings|links_stats|metadata)|master_query|bind_(param|result)|begin_transaction)\b
        name: support.function.mysqli.sa
      - match: (?i)\bmysqlnd_memcache_(set|get_config)\b
        name: support.function.mysqlnd-memcache.sa
      - match: (?i)\bmysqlnd_ms_(set_(user_pick_server|qos)|dump_servers|query_is_select|fabric_select_(shard|global)|get_(stats|last_(used_connection|gtid))|xa_(commit|rollback|gc|begin)|match_wild)\b
        name: support.function.mysqlnd-ms.sa
      - match: (?i)\bmysqlnd_qc_(set_(storage_handler|cache_condition|is_select|user_handlers)|clear_cache|get_(normalized_query_trace_log|core_stats|cache_info|query_trace_log|available_handlers))\b
        name: support.function.mysqlnd-qc.sa
      - match: (?i)\bmysqlnd_uh_(set_(statement|connection)_proxy|convert_to_mysqlnd)\b
        name: support.function.mysqlnd-uh.sa
      - match: (?i)\b(syslog|socket_(set_(blocking|timeout)|get_status)|set(raw)?cookie|http_response_code|openlog|headers_(list|sent)|header(_(register_callback|remove))?|checkdnsrr|closelog|inet_(ntop|pton)|ip2long|openlog|dns_(check_record|get_(record|mx))|define_syslog_variables|(p)?fsockopen|long2ip|get(servby(name|port)|host(name|by(name(l)?|addr))|protoby(name|number)|mxrr))\b
        name: support.function.network.sa
      - match: (?i)\bnsapi_(virtual|response_headers|request_headers)\b
        name: support.function.nsapi.sa
      - match: (?i)\b(oci(statementtype|setprefetch|serverversion|savelob(file)?|numcols|new(collection|cursor|descriptor)|nlogon|column(scale|size|name|type(raw)?|isnull|precision)|coll(size|trim|assign(elem)?|append|getelem|max)|commit|closelob|cancel|internaldebug|definebyname|plogon|parse|error|execute|fetch(statement|into)?|free(statement|collection|cursor|desc)|write(temporarylob|lobtofile)|loadlob|log(on|off)|rowcount|rollback|result|bindbyname)|oci_(statement_type|set_(client_(info|identifier)|prefetch|edition|action|module_name)|server_version|num_(fields|rows)|new_(connect|collection|cursor|descriptor)|connect|commit|client_version|close|cancel|internal_debug|define_by_name|pconnect|password_change|parse|error|execute|bind_(array_)?by_name|field_(scale|size|name|type(_raw)?|is_null|precision)|fetch(_(object|assoc|all|array|row))?|free_(statement|descriptor)|lob_(copy|is_equal)|rollback|result|get_implicit_resultset))\b
        name: support.function.oci8.sa
      - match: (?i)\bopcache_(compile_file|invalidate|reset|get_(status|configuration))\b
        name: support.function.opcache.sa
      - match: (?i)\bopenssl_(sign|spki_(new|export(_challenge)?|verify)|seal|csr_(sign|new|export(_to_file)?|get_(subject|public_key))|cipher_iv_length|open|dh_compute_key|digest|decrypt|public_(decrypt|encrypt)|encrypt|error_string|pkcs12_(export(_to_file)?|read)|pkcs7_(sign|decrypt|encrypt|verify)|verify|free_key|random_pseudo_bytes|pkey_(new|export(_to_file)?|free|get_(details|public|private))|private_(decrypt|encrypt)|pbkdf2|get_((cipher|md)_methods|cert_locations|(public|private)key)|x509_(check_private_key|checkpurpose|parse|export(_to_file)?|fingerprint|free|read))\b
        name: support.function.openssl.sa
      - match: (?i)\b(output_(add_rewrite_var|reset_rewrite_vars)|flush|ob_(start|clean|implicit_flush|end_(clean|flush)|flush|list_handlers|gzhandler|get_(status|contents|clean|flush|length|level)))\b
        name: support.function.output.sa
      - match: (?i)\bpassword_(hash|needs_rehash|verify|get_info)\b
        name: support.function.password.sa
      - match: (?i)\bpcntl_(strerror|signal(_dispatch)?|sig(timedwait|procmask|waitinfo)|setpriority|errno|exec|fork|w(stopsig|termsig|if(stopped|signaled|exited))|wait(pid)?|alarm|getpriority|get_last_error)\b
        name: support.function.pcntl.sa
      - match: (?i)\bpg_(socket|send_(prepare|execute|query(_params)?)|set_(client_encoding|error_verbosity)|select|host|num_(fields|rows)|consume_input|connection_(status|reset|busy)|connect(_poll)?|convert|copy_(from|to)|client_encoding|close|cancel_query|tty|transaction_status|trace|insert|options|delete|dbname|untrace|unescape_bytea|update|pconnect|ping|port|put_line|parameter_status|prepare|version|query(_params)?|escape_(string|identifier|literal|bytea)|end_copy|execute|flush|free_result|last_(notice|error|oid)|field_(size|num|name|type(_oid)?|table|is_null|prtlen)|affected_rows|result_(status|seek|error(_field)?)|fetch_(object|assoc|all(_columns)?|array|row|result)|get_(notify|pid|result)|meta_data|lo_(seek|close|create|tell|truncate|import|open|unlink|export|write|read(_all)?)|)\b
        name: support.function.pgsql.sa
      - match: (?i)\b(virtual|getallheaders|apache_((get|set)env|note|child_terminate|lookup_uri|response_headers|reset_timeout|request_headers|get_(version|modules)))\b
        name: support.function.sa_apache.sa
      - match: (?i)\bdom_import_simplexml\b
        name: support.function.sa_dom.sa
      - match: (?i)\bftp_(ssl_connect|systype|site|size|set_option|nlist|nb_(continue|f?(put|get))|ch(dir|mod)|connect|cdup|close|delete|put|pwd|pasv|exec|quit|f(put|get)|login|alloc|rename|raw(list)?|rmdir|get(_option)?|mdtm|mkdir)\b
        name: support.function.sa_ftp.sa
      - match: (?i)\bimap_((create|delete|list|rename|scan)(mailbox)?|status|sort|subscribe|set_quota|set(flag_full|acl)|search|savebody|num_(recent|msg)|check|close|clearflag_full|thread|timeout|open|header(info)?|headers|append|alerts|reopen|8bit|unsubscribe|undelete|utf7_(decode|encode)|utf8|uid|ping|errors|expunge|qprint|gc|fetch(structure|header|text|mime|body)|fetch_overview|lsub|list(scan|subscribed)|last_error|rfc822_(parse_(headers|adrlist)|write_address)|get(subscribed|acl|mailboxes)|get_quota(root)?|msgno|mime_header_decode|mail_(copy|compose|move)|mail|mailboxmsginfo|binary|body(struct)?|base64)\b
        name: support.function.sa_imap.sa
      - match: (?i)\bmssql_(select_db|num_(fields|rows)|next_result|connect|close|init|data_seek|pconnect|execute|query|field_(seek|name|type|length)|fetch_(object|field|assoc|array|row|batch)|free_(statement|result)|rows_affected|result|guid_string|get_last_message|min_(error|message)_severity|bind)\b
        name: support.function.sa_mssql.sa
      - match: (?i)\bodbc_(statistics|specialcolumns|setoption|num_(fields|rows)|next_result|connect|columns|columnprivileges|commit|cursor|close(_all)?|tables|tableprivileges|do|data_source|pconnect|primarykeys|procedures|procedurecolumns|prepare|error(msg)?|exec(ute)?|field_(scale|num|name|type|precision|len)|foreignkeys|free_result|fetch_(into|object|array|row)|longreadlen|autocommit|rollback|result(_all)?|gettypeinfo|binmode)\b
        name: support.function.sa_odbc.sa
      - match: (?i)\bpreg_(split|quote|filter|last_error|replace(_callback)?|grep|match(_all)?)\b
        name: support.function.sa_pcre.sa
      - match: (?i)\b(spl_(classes|object_hash|autoload(_(call|unregister|extensions|functions|register))?)|class_(implements|uses|parents)|iterator_(count|to_array|apply))\b
        name: support.function.sa_spl.sa
      - match: (?i)\bzip_(close|open|entry_(name|compressionmethod|compressedsize|close|open|filesize|read)|read)\b
        name: support.function.sa_zip.sa
      - match: (?i)\bposix_(strerror|set(s|e?u|[ep]?g)id|ctermid|ttyname|times|isatty|initgroups|uname|errno|kill|access|get(sid|cwd|uid|pid|ppid|pwnam|pwuid|pgid|pgrp|euid|egid|login|rlimit|gid|grnam|groups|grgid)|get_last_error|mknod|mkfifo)\b
        name: support.function.posix.sa
      - match: (?i)\bset(thread|proc)title\b
        name: support.function.proctitle.sa
      - match: (?i)\bpspell_(store_replacement|suggest|save_wordlist|new(_(config|personal))?|check|clear_session|config_(save_repl|create|ignore|(data|dict)_dir|personal|runtogether|repl|mode)|add_to_(session|personal))\b
        name: support.function.pspell.sa
      - match: (?i)\breadline(_(completion_function|clear_history|callback_(handler_(install|remove)|read_char)|info|on_new_line|write_history|list_history|add_history|redisplay|read_history))?\b
        name: support.function.readline.sa
      - match: (?i)\brecode(_(string|file))?\b
        name: support.function.recode.sa
      - match: (?i)\brrd(c_disconnect|_(create|tune|info|update|error|version|first|fetch|last(update)?|restore|graph|xport))\b
        name: support.function.rrd.sa
      - match: (?i)\b(shm_((get|has|remove|put)_var|detach|attach|remove)|sem_(acquire|release|remove|get)|ftok|msg_((get|remove|set|stat)_queue|send|queue_exists|receive))\b
        name: support.function.sem.sa
      - match: (?i)\bsession_(status|start|set_(save_handler|cookie_params)|save_path|name|commit|cache_(expire|limiter)|is_registered|id|destroy|decode|unset|unregister|encode|write_close|abort|reset|register(_shutdown)?|regenerate_id|get_cookie_params|module_name)\b
        name: support.function.session.sa
      - match: (?i)\bshmop_(size|close|open|delete|write|read)\b
        name: support.function.shmop.sa
      - match: (?i)\bsimplexml_(import_dom|load_(string|file))\b
        name: support.function.simplexml.sa
      - match: (?i)\b(snmp(walk(oid)?|realwalk|get(next)?|set)|snmp_(set_(valueretrieval|quick_print|enum_print|oid_(numeric_print|output_format))|read_mib|get_(valueretrieval|quick_print))|snmp[23]_(set|walk|real_walk|get(next)?))\b
        name: support.function.snmp.sa
      - match: (?i)\b(is_soap_fault|use_soap_error_handler)\b
        name: support.function.soap.sa
      - match: (?i)\bsocket_(shutdown|strerror|send(to|msg)?|set_((non)?block|option)|select|connect|close|clear_error|bind|create(_(pair|listen))?|cmsg_space|import_stream|write|listen|last_error|accept|recv(from|msg)?|read|get(peer|sock)name|get_option)\b
        name: support.function.sockets.sa
      - match: (?i)\bsqlite_(single_query|seek|has_(more|prev)|num_(fields|rows)|next|changes|column|current|close|create_(aggregate|function)|open|unbuffered_query|udf_(decode|encode)_binary|popen|prev|escape_string|error_string|exec|valid|key|query|field_name|factory|fetch_(string|single|column_types|object|all|array)|lib(encoding|version)|last_(insert_rowid|error)|array_query|rewind|busy_timeout)\b
        name: support.function.sqlite.sa
      - match: (?i)\bsqlsrv_(send_stream_data|server_info|has_rows|num_(fields|rows)|next_result|connect|configure|commit|client_info|close|cancel|prepare|errors|execute|query|field_metadata|fetch(_(array|object))?|free_stmt|rows_affected|rollback|get_(config|field)|begin_transaction)\b
        name: support.function.sqlsrv.sa
      - match: (?i)\bstats_(harmonic_mean|covariance|standard_deviation|skew|cdf_(noncentral_(chisquare|f)|negative_binomial|chisquare|cauchy|t|uniform|poisson|exponential|f|weibull|logistic|laplace|gamma|binomial|beta)|stat_(noncentral_t|correlation|innerproduct|independent_t|powersum|percentile|paired_t|gennch|binomial_coef)|dens_(normal|negative_binomial|chisquare|cauchy|t|pmf_(hypergeometric|poisson|binomial)|exponential|f|weibull|logistic|laplace|gamma|beta)|den_uniform|variance|kurtosis|absolute_deviation|rand_(setall|phrase_to_seeds|ranf|get_seeds|gen_(noncentral_[ft]|noncenral_chisquare|normal|chisquare|t|int|i(uniform|poisson|binomial(_negative)?)|exponential|f(uniform)?|gamma|beta)))\b
        name: support.function.stats.sa
      - match: (?i)\b(set_socket_blocking|stream_(socket_(shutdown|sendto|server|client|pair|enable_crypto|accept|recvfrom|get_name)|set_(chunk_size|timeout|(read|write)_buffer|blocking)|select|notification_callback|supports_lock|context_(set_(option|default|params)|create|get_(options|default|params))|copy_to_stream|is_local|encoding|filter_(append|prepend|register|remove)|wrapper_((un)?register|restore)|resolve_include_path|register_wrapper|get_(contents|transports|filters|wrappers|line|meta_data)|bucket_(new|prepend|append|make_writeable)))\b
        name: support.function.streamsfuncs.sa
      - match: (?i)\b(money_format|md5(_file)?|metaphone|bin2hex|sscanf|sha1(_file)?|str(str|c?spn|n(at)?(case)?cmp|chr|coll|(case)?cmp|to(upper|lower)|tok|tr|istr|pos|pbrk|len|rchr|ri?pos|rev)|str_(getcsv|ireplace|pad|repeat|replace|rot13|shuffle|split|word_count)|strip(c?slashes|os)|strip_tags|similar_text|soundex|substr(_(count|compare|replace))?|setlocale|html(specialchars(_decode)?|entities)|html_entity_decode|hex2bin|hebrev(c)?|number_format|nl2br|nl_langinfo|chop|chunk_split|chr|convert_(cyr_string|uu(decode|encode))|count_chars|crypt|crc32|trim|implode|ord|uc(first|words)|join|parse_str|print(f)?|echo|explode|v?[fs]?printf|quoted_printable_(decode|encode)|quotemeta|wordwrap|lcfirst|[lr]trim|localeconv|levenshtein|addc?slashes|get_html_translation_table)\b
        name: support.function.string.sa
      - match: (?i)\bsybase_(set_message_handler|select_db|num_(fields|rows)|connect|close|deadlock_retry_count|data_seek|unbuffered_query|pconnect|query|field_seek|fetch_(object|field|assoc|array|row)|free_result|affected_rows|result|get_last_message|min_(client|error|message|server)_severity)\b
        name: support.function.sybase.sa
      - match: (?i)\b(taint|is_tainted|untaint)\b
        name: support.function.taint.sa
      - match: (?i)\b(tidy_((get|set)opt|set_encoding|save_config|config_count|clean_repair|is_(xhtml|xml)|diagnose|(access|error|warning)_count|load_config|reset_config|(parse|repair)_(string|file)|get_(status|html(_ver)?|head|config|output|opt_doc|root|release|body))|ob_tidyhandler)\b
        name: support.function.tidy.sa
      - match: (?i)\btoken_(name|get_all)\b
        name: support.function.tokenizer.sa
      - match: (?i)\btrader_(stoch(f|r|rsi)?|stddev|sin(h)?|sum|sub|set_(compat|unstable_period)|sqrt|sar(ext)?|sma|ht_(sine|trend(line|mode)|dc(period|phase)|phasor)|natr|cci|cos(h)?|correl|cdl(shootingstar|shortline|sticksandwich|stalledpattern|spinningtop|separatinglines|hikkake(mod)?|highwave|homingpigeon|hangingman|harami(cross)?|hammer|concealbabyswall|counterattack|closingmarubozu|thrusting|tasukigap|takuri|tristar|inneck|invertedhammer|identical3crows|2crows|onneck|doji(star)?|darkcloudcover|dragonflydoji|unique3river|upsidegap2crows|3(starsinsouth|inside|outside|whitesoldiers|linestrike|blackcrows)|piercing|engulfing|evening(doji)?star|kicking(bylength)?|longline|longleggeddoji|ladderbottom|advanceblock|abandonedbaby|risefall3methods|rickshawman|gapsidesidewhite|gravestonedoji|xsidegap3methods|morning(doji)?star|mathold|matchinglow|marubozu|belthold|breakaway)|ceil|cmo|tsf|typprice|t3|tema|tan(h)?|trix|trima|trange|obv|div|dema|dx|ultosc|ppo|plus_d[im]|errno|exp|ema|var|kama|floor|wclprice|willr|wma|ln|log10|bop|beta|bbands|linearreg(_(slope|intercept|angle))?|asin|acos|atan|atr|adosc|ad|add|adx(r)?|apo|avgprice|aroon(osc)?|rsi|roc|rocp|rocr(100)?|get_(compat|unstable_period)|min(index)?|minus_d[im]|minmax(index)?|mid(point|price)|mom|mult|medprice|mfi|macd(ext|fix)?|mavp|max(index)?|ma(ma)?)\b
        name: support.function.trader.sa
      - match: (?i)\buopz_(copy|compose|implement|overload|delete|undefine|extend|function|flags|restore|rename|redefine|backup)\b
        name: support.function.uopz.sa
      - match: (?i)\b(http_build_query|(raw)?url(decode|encode)|parse_url|get_(headers|meta_tags)|base64_(decode|encode))\b
        name: support.function.url.sa
      - match: (?i)\b(strval|settype|serialize|(bool|double|float)val|debug_zval_dump|intval|import_request_variables|isset|is_(scalar|string|null|numeric|callable|int(eger)?|object|double|float|long|array|resource|real|bool)|unset|unserialize|print_r|empty|var_(dump|export)|gettype|get_(defined_vars|resource_type))\b
        name: support.function.var.sa
      - match: (?i)\bwddx_(serialize_(value|vars)|deserialize|packet_(start|end)|add_vars)\b
        name: support.function.wddx.sa
      - match: (?i)\bxhprof_(sample_)?(disable|enable)\b
        name: support.function.xhprof.sa
      - match: (?i)\b(utf8_(decode|encode)|xml_(set_((notation|(end|start)_namespace|unparsed_entity)_decl_handler|(character_data|default|element|external_entity_ref|processing_instruction)_handler|object)|parse(_into_struct)?|parser_((get|set)_option|create(_ns)?|free)|error_string|get_(current_((column|line)_number|byte_index)|error_code)))\b
        name: support.function.xml.sa
      - match: (?i)\bxmlrpc_(server_(call_method|create|destroy|add_introspection_data|register_(introspection_callback|method))|is_fault|decode(_request)?|parse_method_descriptions|encode(_request)?|(get|set)_type)\b
        name: support.function.xmlrpc.sa
      - match: (?i)\bxmlwriter_((end|start|write)_(comment|cdata|dtd(_(attlist|entity|element))?|document|pi|attribute|element)|(start|write)_(attribute|element)_ns|write_raw|set_indent(_string)?|text|output_memory|open_(memory|uri)|full_end_element|flush|)\b
        name: support.function.xmlwriter.sa
      - match: (?i)\b(zlib_(decode|encode|get_coding_type)|readgzfile|gz(seek|compress|close|tell|inflate|open|decode|deflate|uncompress|puts|passthru|encode|eof|file|write|rewind|read|getc|getss?))\b
        name: support.function.zlib.sa
      - match: (?i)\bis_int(eger)?\b
        name: support.function.alias.sa

  constant-names:
    comment: Names for constants, symbols and static properties
    patterns: []

  variable-names:
    comment: Standard Library variable names
    patterns: []

  property-names:
    comment: Standard Library property names
    patterns: []

  clause-content:
    patterns:
      - include: "#embedded-langs"
      - include: "#clauses"
      - include: "#declarations"
      - include: "#keywords"
      - include: "#comments"
      - include: "#brackets"
      - include: "#punctuation"
      - include: "#operators"
      - include: "#literals"
      - include: "#calls"
      - include: "#variables"
      - include: "#illegal"

  literals:
    patterns:
      - include: "#regexps"
      - include: "#strings-unquoted"
      - include: "#strings-quoted"
      - include: "#symbols"
      - include: "#numbers"
      - include: "#constants"

  constants:
    patterns:
      - match: |
          (?x)\s*\b(?:
          (true|yes|on)|(false|no|off)|(null|nil|none)|(undef|void)|(nan)|(inf|infin)
          )\b\s*
        captures:
          1: {name: constant.language.boolean.true.sa}
          2: {name: constant.language.boolean.false.sa}
          3: {name: constant.language.null.sa}
          4: {name: constant.language.undefined.sa}
          5: {name: constant.language.nan.sa}
          6: {name: constant.language.infinity.sa}
      - match: |
          (?x)\s*\b(?:
          (params|args)|(super|this|self)|(_|proto)|(ctor)|(targ)
          )\b\s*
        captures:
          1: {name: variable.language.arguments.sa}
          2: {name: variable.language.$2.sa}
          3: {name: variable.language.prototype.sa}
          4: {name: variable.language.constructor.sa}
          5: {name: variable.language.target.sa}

  numbers:
    patterns:
      - match: (?<=(^|\p{ps})\s*\d\w*)\.
        name: punctuation.separator.decimal.period.sa
      - match: (?<=(?:^|\p{ps})\s*|\s)\.(?=\d)
        name: punctuation.separator.decimal.period.sa
      - match: |-
          (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)
          (?:(\.)(?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?)?
          (?:(\*)\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?
          (?:(\.)(?:\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?)
          (?:(\*)\p{alnum}+(?:(?:,|_+)?*\p{alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0b)
          (?:[01]+(?:(?:,|_+)?*[01]+)*)
          (?:(\.)(?:[01]+(?:(?:,|_+)?*[01]+)*)?)?
          (?:(\*)[01]+(?:(?:,|_+)?*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0b)
          (?:[01]+(?:(?:,|_+)?*[01]+)*)?
          (?:(\.)(?:[01]+(?:(?:,|_+)?*[01]+)*)?)
          (?:(\*)[01]+(?:(?:,|_+)?*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)
          (?:(\.)(?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?)?
          (?:(\*)[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (?:(\.)(?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?)
          (?:(\*)[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)
          (?:(\.)(?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?)?
          (?:(\*)[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (?:(\.)(?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?)
          (?:(\*)[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)
          (?:(\.)(?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?)?
          (?:(\*)[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (?:(\.)(?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?)
          (?:(\*)[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)
          (?:(\.)(?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?)?
          (?:(\*)[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (?:(\.)(?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?)
          (?:(\*)[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0x)
          (?:\h+(?:(?:,|_+)?*\h+)*)
          (?:(\.)(?:\h+(?:(?:,|_+)?*\h+)*)?)?
          (?:(\*)\h+(?:(?:,|_+)?*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (0x)
          (?:\h+(?:(?:,|_+)?*\h+)*)?
          (?:(\.)(?:\h+(?:(?:,|_+)?*\h+)*)?)
          (?:(\*)\h+(?:(?:,|_+)?*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          ()
          (?:\d+(?:(?:,|_+)?*\d+)*)
          (?:(\.)(?:\d+(?:(?:,|_+)?*\d+)*)?)?
          (?:(\*)\d+(?:(?:,|_+)?*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          ()
          (?:\d+(?:(?:,|_+)?*\d+)*)?
          (?:(\.)(?:\d+(?:(?:,|_+)?*\d+)*)?)
          (?:(\*)\d+(?:(?:,|_+)?*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:(?:,|_+)?*\w+)*)
          (?:(\.)(?:\w+(?:(?:,|_+)?*\w+)*)?)?
          (?:(\*)\w+(?:(?:,|_+)?*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.sa}
          <<: *number-literal
      - match: |-
          (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:(?:,|_+)?*\w+)*)?
          (?:(\.)(?:\w+(?:(?:,|_+)?*\w+)*)?)
          (?:(\*)\w+(?:(?:,|_+)?*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.sa}
          <<: *number-literal

  strings-quoted:
    patterns:
      - comment: single quoted raw string
        begin: \s*('{3,})
        contentName: string.quoted.single.sa
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.sa}
        patterns:
          - include: "#embedded-raw"
      - comment: simple single quoted raw string
        begin: \s*(')
        contentName: string.quoted.single.sa
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.sa}
        patterns:
          - match: "''"
            name: constant.character.escape.sa
          - include: "#embedded-raw"
      - comment: double quoted standard string
        begin: \s*("{3,}|")
        contentName: string.quoted.double.sa
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.sa}
        patterns:
          - include: "#string-escapes"

  strings-unquoted:
    patterns:
      - begin: |
          (?x)\s*
          (\\\|)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.literal.sa}
          2: {name: storage.modifier.chomping-indicator.sa}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.sa}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.sa
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.block.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.html.markdown#inline
          - include: $self
      - begin: |
          (?x)\s*
          (\\\>)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.folded.sa}
          2: {name: storage.modifier.chomping-indicator.sa}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.sa}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.syntax.sa
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.in.sa
            patterns:
              - include: "#string-escapes"
              - include: text.html.markdown#inline
          - include: $self
      - match: |
          (?x)
          \s*(\\)
          ((?:\\.|[^\s,:;])+?)
          (?=[\p{ps}\p{pe}\s,:;]|$)\s*
        name: string.unquoted.sa
        captures:
          1: {name: punctuation.definition.string.sa}
          2: {patterns: [{include: "#string-escapes"}]}

  string-escapes:
    patterns:
      - match: \\(?=\s*$)
        name: constant.character.escape.newline.sa
      - match: (?i)\\b(?:[01]{1,21}|{[01\s]+?})
        name: constant.character.escape.binary.sa
      - match: (?i)\\q(?:[0-3]{1,11}|{[0-3\s]+?})
        name: constant.character.escape.quaternary.sa
      - match: (?i)\\s(?:[0-5]{1,8}|{[0-5\s]+?})
        name: constant.character.escape.senary.sa
      - match: (?i)\\o(?:[0-7]{1,7}|{[0-7\s]+?})
        name: constant.character.escape.octal.sa
      - match: (?i)\\d?\d{1,7}|\\d{[\d\s]+?}
        name: constant.character.escape.decimal.sa
      - match: (?i)\\z(?:[\dab]{1,6}|{[\s\dab]+?})
        name: constant.character.escape.duodecimal.sa
      - match: (?i)\\x(?:\h{1,6}|{[\h\s]+?})
        name: constant.character.escape.hexadecimal.sa
      - match: (?i)\\u(?:\h{1,6}|{[\h\s]+?})
        name: constant.character.escape.unicode.sa
      - begin: (?i)\\j{
        end: \s*}
        name: constant.character.entity.named.sa
        patterns:
          - include: "#regexp-patterns"
      - match: (?i)\\[abceflnprtvz]
        name: constant.character.escape.sa
      - match: \\[\p{s}\p{p}]
        name: constant.character.escape.symbol.sa
      - match: \\[\p{l}\p{n}\p{z}\p{c}]
        name: constant.character.escape.illegal.sa
      - include: "#embedded"

  embedded:
    patterns:
      - match: (\#)(\d+)
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {name: constant.numeric.decimal.sa}
      - match: (%)((['"\`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"\`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.sa}
          2: {name: storage.type.format.sa}
      - match: |
          (?xi)
          #(?<!\\)# no backslash
          (\#)# prefix
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )# variable
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {patterns: [{include: "#core"}]}
      - begin: (?#?<!\\)(\#{)\s*
        end: (})
        name: entity.quasi.element.sa
        captures:
          1: {name: punctuation.quasi.element.sa}
        patterns:
          - include: $self

  embedded-raw:
    patterns:
      - match: (\#)(\d+)
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {name: constant.numeric.decimal.sa}
      - match: ([#%]){2}
        name: constant.character.escape.sa
      - match: (%)((['"\`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"\`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.sa}
          2: {name: storage.type.format.sa}
      - match: |
          (?xi)
          (?<!\#)# no dollar
          (\#)# prefix
          (
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )# variable
        captures:
          1: {name: punctuation.quasi.element.sa}
          2: {patterns: [{include: "#core"}]}
      - begin: (?<!\#)(\#{)\s*
        end: (})
        name: entity.quasi.element.sa
        captures:
          1: {name: punctuation.quasi.element.sa}
        patterns:
          - include: $self

  symbols:
    match: |
      (?x)
      \s*
      (:)((?:\w|\\.)(?:\\.|[^\s,:;])*?)
      \b\s*
    name: meta.symbol.sa
    captures:
      1: {name: punctuation.definition.symbol.sa}
      2: {name: constant.other.symbol.sa}

  labels:
    match: |
      (?x)
      (?<=^|[\p{ps}\s,;*+-])\s*

      (?!
      \b(?:# don't match keywords
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|keyof|valof
      |len|del|to|til|thru|at|by
      |and|x?or|not|para|seq|spawn
      |def|func?|fn|macro|proc|sub
      |let|var|val|const|decl
      |class|given|law|enum|rel|lat
      |proj|prot|ext|impl|frag|inter|struct
      |module|nspace|object|record|label
      |raw|data|query|schema|style|trait|alias|type
      |if|else|elif|eless|unless|guard
      |for|each|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |yield\b\s*\bfrom|import|export|show|hide
      |from|where|join|equals|[io]nto|order
      |take|drop|fold|scan|select|use|using
      |fi|rof|done|esac|wend|yrt|disc|wout
      |open|close
      )\b
      )

      ((?:\w|\\.)(?:\\.|[^\s,:;])*?)
      (?=:\s+)
    name: meta.object-literal.key.sa
    captures:
      1: {name: constant.other.object.key.sa}
      2: {name: punctuation.separator.key-value.sa}

  regexps:
    patterns:
      - begin: (\p{alnum}*)(\`)\s*
        end: \s*(?!\\)(\`(?!\`))(\p{alnum}*)
        contentName: string.pattern.regexp.sa
        beginCaptures:
          1: {name: keyword.modifier.sa}
          2: {name: punctuation.section.regexp.begin.sa}
        endCaptures:
          1: {name: punctuation.section.regexp.end.sa}
          2: {name: keyword.other.flag.sa}
        patterns:
          - include: "#comments"
          - include: "#regexp-patterns"
          - begin: (\`)(\`)\s*\n?
            end: \s*(?=(?!\\)\`)
            contentName: string.replace.regexp.sa
            beginCaptures:
              1: {name: punctuation.section.regexp.end.sa}
              2: {name: punctuation.section.regexp.begin.sa}
            patterns:
              - include: "#back-references"
      - begin: |
          (?x)\s*
          (\\\<)\s*
          ([-+*/<=>])?\s*
          (?:(\w+)?\b\s*\b
          (
          \w+\s*
          (?:[+-]\s*
          (?:(?:\w+)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.regexp.sa}
          2: {name: storage.modifier.chomping-indicator.sa}
          3: {name: keyword.modifier.sa}
          4: {name: keyword.other.flag.sa}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.sa
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.out.sa
            patterns:
              - include: "#regexp-patterns"
          - include: $self

  back-references:
    patterns:
      - match: \$[&+-]
        name: keyword.other.back-reference.sa
      - match: \${2}
        name: constant.character.escape.sa
      - begin: (\$<)
        end: \s*(>)
        name: keyword.other.back-reference.sa
        beginCaptures:
          1: {name: keyword.other.back-reference.sa}
        endCaptures:
          1: {name: keyword.other.back-reference.sa}
        patterns:
          - include: "#variables"
          - include: "#operators"
          - include: "#numbers"
      - include: "#string-escapes"

  regexp-patterns:
    patterns:
      - include: "#embedded"
      - include: "#comments"
      - include: "#strings-quoted"
      - match: \|
        name: keyword.operator.or.sa
      - match: \&
        name: keyword.operator.match.sa
      - match: \!
        name: keyword.operator.disjunction.sa
      - match: \.
        name: constant.character.all.sa
      - match: (?i)\\[by]({\p{alpha}+})?
        name: keyword.control.anchor.sa
      - match: (?i)(\^|\\<|\\a(?:{\p{alpha}+})?)|(\$|\\>|\\z(?:{\p{alpha}+})?)
        captures:
          1: {name: keyword.control.begin.sa}
          2: {name: keyword.control.end.sa}
      - match: (\\\()(?:(\?)|(\+)|(\*))
        captures:
          1: {name: constant.character.escape.other.sa}
          2: {name: keyword.operator.quantifier.lazy.sa}
          3: {name: keyword.operator.quantifier.eager.sa}
          4: {name: keyword.operator.quantifier.greedy.sa}
      - match: \\\d+
        name: keyword.other.back-reference.sa
      - match: \{(\s*\d*\s*(?:,?\s*\d*\s*)*)\}
        name: keyword.operator.quantifier.sa
      - begin: (\\Q)
        contentName: string.quoted.single.sa
        end: (\\E)
        name: string.quoted.raw.sa
        captures:
          1: {name: keyword.control.quote.sa}
        patterns:
          - include: "#string-escapes"
      - begin: (\\q)
        contentName: string.quoted.double.sa
        end: (\\e)
        name: string.quoted.sa
        captures:
          1: {name: keyword.control.quote.sa}
        patterns:
          - include: "#embedded-raw"
      - begin: (\\k<)
        end: \s*(>)
        name: keyword.other.back-reference.sa
        beginCaptures:
          1: {name: keyword.other.back-reference.sa}
        endCaptures:
          1: {name: keyword.other.back-reference.sa}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - begin: (\\g<)
        end: \s*(>)
        name: keyword.other.subroutine.sa
        beginCaptures:
          1: {name: keyword.other.subroutine.sa}
        endCaptures:
          1: {name: keyword.other.subroutine.sa}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - include: "#regexp-groups"
      - include: "#regexp-char-set"
      - include: "#regexp-char-class"
      - match: (?i)(?:(\\M)|(\\K)|(\\G)|(\\X))
        captures:
          1: {name: keyword.control.anchor.sa}
          2: {name: keyword.control.keepout.sa}
          3: {name: keyword.control.search.sa}
          4: {name: constant.character.unicode.sa}
      - match: (?<=[*+?}])(?:(\?)|(\+)|(\*))
        captures:
          1: {name: keyword.operator.modifier.lazy.sa}
          2: {name: keyword.operator.modifier.eager.sa}
          3: {name: keyword.operator.modifier.greedy.sa}
      - match: (\?)|(\+)|(\*)
        captures:
          1: {name: keyword.operator.quantifier.lazy.sa}
          2: {name: keyword.operator.quantifier.eager.sa}
          3: {name: keyword.operator.quantifier.greedy.sa}
      - match: \\.
        name: constant.character.escape.other.sa

    repository:
      regexp-groups:
        patterns:
          - begin: \(([*+])
            end: \s*(\))
            name: constant.other.pcre.sa
            captures:
              0: {name: punctuation.section.expression.sa}
            patterns:
              - include: source.clojure
          - begin: (\()(\?#)
            contentName: comment.block.regexp.sa
            end: \s*(\))
            name: comment.block.regexp.sa
            captures:
              1: {name: punctuation.definition.comment.sa}
            patterns:
              - match: \\.
                name: comment.block.regexp.sa
          - begin: (\(\?=)
            end: \s*(\))
            name: meta.group.look-ahead.sa
            captures:
              1: {name: punctuation.definition.group.look-ahead.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<=)
            end: \s*(\))
            name: meta.group.look-behind.sa
            captures:
              1: {name: punctuation.definition.group.look-behind.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?!)
            end: \s*(\))
            name: meta.group.negative-look-ahead.sa
            captures:
              1: {name: punctuation.definition.group.negative-look-ahead.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<!)
            end: \s*(\))
            name: meta.group.negative-look-behind.sa
            captures:
              1: {name: punctuation.definition.group.negative-look-behind.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?(?:([+-]?\d+?)|(\p{upper}+(?:[+-]\p{upper}+)*)|(\p{lower}+(?:[+-]\p{lower}+)*)))\s*(:)?
            end: \s*(\))
            name: meta.group.flag.sa
            captures:
              0: {name: punctuation.definition.group.flag.sa}
              1: {name: punctuation.definition.group.flag.sa}
              2: {name: entity.name.function.method.sa}
              3: {name: keyword.control.recursion.sa}
              4: {name: keyword.other.flag.sa}
              5: {name: punctuation.separator.key-value.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?={)
            end: \s*(\))
            name: meta.group.call-out.sa
            captures:
              1: {name: punctuation.definition.group.call-out.sa}
            patterns:
              - begin: (?<=\(\?)({)
                end: \s*(\})([<*>])?(?:(\[)(.*?)(\]))?
                name: punctuation.definition.group.call-out.sa
                captures:
                  1: {name: punctuation.definition.group.call-out.sa}
                  2: {name: keyword.operator.range.sa}
                  3: {name: punctuation.definition.tag.sa}
                  4: {patterns: [{include: "#function-entities"}]}
                  5: {name: punctuation.definition.tag.sa}
                patterns:
                  - include: $self
              - include: "#regexp-patterns"
          - begin: (\(\?>)
            end: \s*(\))
            name: meta.group.atomic.sa
            captures:
              1: {name: punctuation.definition.group.atomic.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?:)
            end: \s*(\))
            name: meta.group.non-capturing.sa
            captures:
              1: {name: punctuation.definition.group.non-capturing.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?=[(|])
            end: \s*(\))
            name: meta.group.branch.sa
            captures:
              1: {name: punctuation.definition.group.branch.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?~)
            end: \s*(\))
            name: meta.group.absent.sa
            captures:
              1: {name: punctuation.definition.group.absent.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: \((\?(?:&)(?:([+-]?\d+)|([_\p{l}\p{Nl}][_\\d\p{l}\p{M}\p{N}]*)|([+-]?\d*)))(:)?
            end: \s*\)
            name: meta.group.back-reference.sa
            captures:
              0: {name: punctuation.definition.group.back-reference.sa}
              1: {name: punctuation.definition.group.back-reference.sa}
              2: {name: entity.name.function.method.sa}
              3: {name: variable.other.sa}
              4: {name: punctuation.separator.key-value.sa}
            patterns:
              - include: "#regexp-patterns"
          - begin: \(\?(?=<(?![!=]))
            end: \s*(\))
            name: meta.group.named.sa
            beginCaptures:
              0: {name: punctuation.definition.group.named.sa}
              1: {patterns: [{include: "#variables"}]}
            endCaptures:
              0: {name: punctuation.definition.group.named.sa}
            patterns:
              - begin: (?<=\(\?)(<)
                end: \s*(>)
                name: punctuation.definition.group.named.sa
                beginCaptures:
                  1: {name: punctuation.definition.group.named.sa}
                endCaptures:
                  1: {name: punctuation.definition.group.named.sa}
                patterns:
                  - include: "#variables"
                  - include: "#numbers"
              - include: "#regexp-patterns"
          - begin: \(
            end: \s*\)
            name: meta.group.sa
            captures:
              0: {name: punctuation.definition.group.sa}
            patterns:
              - include: "#regexp-patterns"

      regexp-char-class:
        patterns:
          - match: \\(?=\s*$)
            name: constant.character.escape.newline.sa
          - begin: (?i)\\p{
            end: \s*}
            name: constant.other.character-class.unicode.sa
            patterns:
              - include: "#expression-keywords"
              - include: "#variables"
              - include: "#operators"
          - begin: \\j{
            end: \s*}
            name: constant.character.entity.named.sa
            patterns:
              - include: "#regexp-patterns"
          - match: (?i)\\b(?:[01]{1,21}|{[01\s]+?})
            name: constant.character.escape.binary.sa
          - match: (?i)\\q(?:[0-3]{1,11}|{[0-3\s]+?})
            name: constant.character.escape.quaternary.sa
          - match: (?i)\\s(?:[0-5]{1,8}|{[0-5\s]+?})
            name: constant.character.escape.senary.sa
          - match: (?i)\\o(?:[0-7]{1,7}|{[0-7\s]+?})
            name: constant.character.escape.octal.sa
          - match: (?i)\\d?\d{1,7}|\\d{[\d\s]+?}
            name: constant.character.escape.decimal.sa
          - match: (?i)\\z(?:[\dab]{1,6}|{[\s\dab]+?})
            name: constant.character.escape.duodecimal.sa
          - match: (?i)\\x(?:\h{1,6}|{[\h\s]+?})
            name: constant.character.escape.hexadecimal.sa
          - match: (?i)\\u(?:\h{1,6}|{[\h\s]+?})
            name: constant.character.escape.unicode.sa
          - match: (?i:\\[cm][a-z])|\\R
            name: constant.character.control.sa
          - match: *posix-class
            name: constant.other.character-class.posix.sa
          - match: (?i:\\p(c[cfos]?|l[lmotu]?|m[cen]?|n[dlo]?|p[c-fios]?|s[ckmo]?|z[lps]))
            name: constant.other.character-class.unicode.sa
          - match: (?i)\\[ci]
            name: constant.other.character-class.xml.sa
          - match: \.|\\[dhlns-w]
            name: constant.other.character-class.sa
          - match: \\[DHLNS-W]
            name: constant.other.character-class.negated.sa
          - match: (?i)\\n{[\w\s]+}
            name: constant.character.escape.unicode.name.sa
          - match: (?i)\\[abceflnprtvz]
            name: constant.character.escape.sa
          - match: \\[\p{s}\p{p}]
            name: constant.character.escape.symbol.sa
          - match: \\\p{z}
            name: constant.character.escape.symbol.sa
          - match: \\[\p{l}\p{n}\p{z}\p{c}]
            name: constant.character.escape.illegal.sa
          - include: "#embedded"

      regexp-char-ops:
        patterns:
          - match: \--
            name: keyword.operator.optional.sa
          - match: (?<!\\?[\\\[])-(?![-\[\]])
            name: keyword.operator.range.sa
          - match: \|\|
            name: keyword.operator.union.sa
          - match: \&&
            name: keyword.operator.intersection.sa
          - match: \^\^
            name: keyword.operator.only.sa
          - match: ~~
            name: keyword.operator.maybe.sa
          - match: \.
            name: constant.other.character-class.range.sa
          - match: \\.
            name: constant.character.escape.other.sa

      regexp-char-set:
        patterns:
          - begin: (\[=)
            end: \s*(\])
            name: constant.other.character-class.posix.sa
            captures:
              1: {name: punctuation.definition.character-class.posix.sa}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\.)
            end: \s*(\])
            name: constant.other.character-class.posix.sa
            captures:
              1: {name: punctuation.definition.character-class.posix.sa}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[:)
            end: \s*(\])
            name: constant.other.character-class.posix.sa
            captures:
              1: {name: punctuation.definition.character-class.posix.sa}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\^)
            end: \s*(\])
            name: constant.other.character-class.negated.sa
            captures:
              1: {name: punctuation.definition.character-class.negated.sa}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"
          - begin: (\[)
            end: \s*(\])
            name: constant.other.character-class.sa
            captures:
              1: {name: punctuation.definition.character-class.sa}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"

  document:
    patterns:
      - include: "#document-inline-tags"
      - include: "#document-access"
      - include: "#document-as-name-path"
      - include: "#document-simple-name-path"
      - include: "#document-module"
      - include: "#document-type-name"
      - include: "#document-type-no-name"
      - match: (?<=^|[''"\`\\\s\p{ps}])@([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\b
        name: storage.type.class.sa

    repository:
      document-access:
        match: |
          (?x)
          (@acc)\b\s*\b
          (?:
          (?:
          pub|prot|pvt|pte|priv|read|a?sync|inline|lazy|eager|trans|part
          |lawful|rogue|early|late|unique|handle|over|abs|vol|stat|dyn|final
          # Function or method modifiers
          |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
          |(?:un)?(?:sign|safe|check|lock|fixed|size)
          |# Function or method modifiers
          (?:pre|in|post|suf|af|trans|inter)fix|
          (?:u|bi|ter|)nary|oper
          |# Decorators
          @(?:
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )\s*\b
          )*
          (?=\s|$)
        captures:
          1: {name: storage.type.class.sa}
          0: {name: storage.modifier.sa}
      document-as-name-path:
        begin: (@(borrows|lends)\b)\s*(?=(?![}\]]\#)\S+(?:(?:\s*\bas\b\s*(?![}\]]\#)\S+)?)?([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\3$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-name-path-scopes"
      document-inline-tags:
        begin: (\[(?:(?>[^\[\]]+)|\g<-1>)*\])?({)(?=@)
        end: (})
        name: meta.tag.inline.sa
        beginCaptures:
          1: {name: string.linktext.sa}
          2: {name: meta.brace.curly.sa}
        endCaptures:
          1: {name: meta.brace.curly.sa}
        patterns:
          - match: (@(link|tutorial))\b([^}]*)
            captures:
              1: {name: storage.type.class.sa}
              3: {name: string.sa}
      document-module:
        begin: |
          (?x)(@(
          (?:(?:im|ex)port|listen|require|use)s?
          )\b)
          \s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(\S*)([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\5$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
          - match: (?:(module)(:))?(((?![}\]]\#)\S)+)
            captures:
              1: {name: keyword.module.sa}
              2: {name: punctuation.sa}
              3: {name: string.module-name.sa}
      document-name-scopes:
        patterns:
          - match: ((?![}\]]\#)[\S&&[^\[\]"']])+
            captures:
              0: {name: variable.other.sa}
          - begin: \[
            end: \]|^
            name: variable.other.sa
            patterns:
              - include: "#document-string"
              - include: "#document-name-scopes"
      document-simple-name-path:
        begin: |
          (?x)(@(
          (?:use|call|emit|event|fire)s?|alias|name|mixes|prop
          |this|that|it|self|super
          )\b)
          \s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*\S*([\S*\s]*))
        end: ^|(?=[}\]]\#)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
          - include: "#types"
      document-string:
        match: '"(\\"|[^"])*"|''(\\''|[^''])*'''
        name: string.sa
      document-type-name:
        begin: |
          (?x)(@(
          def|func?|fn|macro|proc|sub|class|given|law|const|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct|module|nspace|object|record|raw
          |data|query|schema|style|trait|alias|type|decl|let|va[rl]
          |arg|ctor|member|method|mixin|param
          )\b)\s*
          (?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(((\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\S)+)?([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\7$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
          - include: "#document-name-scopes"
      document-type-no-name:
        begin: |
          (?x)
          (@(
          pub|prot|pvt|pte|priv|read|a?sync|inline|lazy|eager|trans|part
          |lawful|rogue|early|late|unique|handle|over|abs|vol|stat|dyn|final
          # Function or method modifiers
          |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
          |(?:un)?(?:sign|safe|check|lock|fixed|size)
          |# Function or method modifiers
          (?:pre|in|post|suf|af|trans|inter)fix|
          (?:u|bi|ter|)nary|oper
          |# Decorators
          @(?:
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
          )
          )\b)
          \s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*([\S\s]*))
        end: ^|(?=[}\]]\#)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - include: "#document-typedef-scopes"
      document-typedef-obj:
        begin: "{"
        end: "}|^"
        captures:
          0: {name: meta.brace.curly.sa}
        patterns:
          - include: "#types"
      document-typedef-scopes:
        begin: "{"
        end: "}|^"
        name: entity.name.type.instance.sa
        captures:
          0: {name: meta.brace.curly.sa}
        patterns:
          - include: "#types"

  comments:
    patterns:
      - begin: \s*((#\())
        end: (\s*(\)))
        name: comment.block.inline.sa
        captures:
          1: {name: comment.block.inline.sa}
          2: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-inline"
      - begin: \s*((#{))
        end: (\s*(}#))
        name: comment.block.documentation.sa
        captures:
          1: {name: comment.block.documentation.sa}
          2: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-document-block"
      - begin: \s*((#\[))
        end: (\s*(\]#))
        name: comment.block.sa
        captures:
          1: {name: comment.block.sa}
          2: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-block"
      - begin: ((^\s*)|\s*)((#=))
        end: \s*$
        name: comment.line.special.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.special.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#comment-special"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((##))
        end: \s*$
        name: comment.line.playground.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.playground.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.playground.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#:))
        end: \s*$
        name: comment.line.documentation.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.documentation.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.documentation.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#!))
        end: \s*$
        name: comment.line.shebang.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.shebang.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.shebang.sa}
        patterns:
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#\?))
        end: \s*$
        name: comment.line.doctype.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.doctype.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.doctype.sa}
        patterns:
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((#))
        end: \s*$
        name: comment.line.number-sign.sa
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.sa}
          3: {name: comment.line.double-slash.sa}
          4: {name: punctuation.definition.comment.sa}
        endCaptures:
          0: {name: comment.line.number-sign.sa}
        patterns:
          - include: "#markdown-inline"

    repository:
      markdown-inline:
        patterns:
          - include: text.html.markdown#inline
      nested-block:
        begin: (#\[)\s*
        end: \s*(\]#)
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-block"
      nested-document-block:
        begin: (#{)\s*
        end: \s*(}#)
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-document-block"
      nested-inline:
        begin: (\()\s*
        end: \s*(\))
        name: comment.block.inline.sa
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-inline"
      nested-special:
        begin: (\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.comment.sa}
        patterns:
          - include: "#document"
          - include: "#markdown-inline"
          - include: "#nested-special"

  calls:
    patterns:
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          )
          \b\s+
          (?=
          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )
          [_\p{l}\p{m}\p{n}]+|\[(?!<))
        captures:
          1: {patterns: [{include: "#function-entities"}]}
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )
          [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
          )
          \b
          (?=
          !(?:\.=?)?\s*|
          \s+[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*

          (?!
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|keyof|valof
          |len|del|to|til|thru|at|by
          |and|x?or|not|para|seq|spawn
          |def|func?|fn|macro|proc|sub
          |let|var|val|const|decl
          |class|given|law|enum|rel|lat
          |proj|prot|ext|impl|frag|inter|struct
          |module|nspace|object|record|label
          |raw|data|query|schema|style|trait|alias|type
          |if|else|elif|eless|unless|guard
          |for|each|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |yield\b\s*\bfrom|import|export|show|hide
          |from|where|join|equals|[io]nto|order
          |take|drop|fold|scan|select|use|using
          |fi|rof|done|esac|wend|yrt|disc|wout
          |open|close
          )\b
          )

          [_\p{l}\p{m}\p{n}]+|\[<|
          (?:[!?~]?\.=?|[?!:]:=?|->)?\s*['"\`\\\p{ps}&&[^\[{]]
          )
        captures:
          1: {patterns: [{include: "#function-entities"}]}

  function-entities:
    patterns:
      - match: |
          (?x)\b(?:
          (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
          (?:# Properties (note all properties are by default, symbols)
          (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
          ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
          ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
          ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
          )

          |
          (?:# Objects and maps
          (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
          ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
          ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
          ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
          )
          (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

          |
          (?:# Regular variables
          (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
          ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
          ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
          ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
          )
          )\b
        captures:
          1: {name: entity.name.tag.sa}
          2: {name: entity.name.tag.sa support.class.component.sa}
          3: {name: entity.name.class.builtin.sa}
          4:
            name: entity.name.function.method.sa
            patterns: [{include: "#function-names"}]
          5: {name: variable.other.global.sa}
          6: {name: variable.other.constant.object.sa}
          7: {name: variable.other.conditional.sa}
          8: {name: variable.other.object.sa}
          9: {name: entity.name.function.tagged-template.sa}
          10: {name: entity.name.type.sa}
          11: {name: entity.name.class.sa}
          12:
            name: entity.name.function.sa
            patterns: [{include: "#function-names"}]
      - include: $self

  variables:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int
      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?!
      \b(?:# don't match keywords
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|keyof|valof
      |len|del|to|til|thru|at|by
      |and|x?or|not|para|seq|spawn
      |def|func?|fn|macro|proc|sub
      |let|var|val|const|decl
      |class|given|law|enum|rel|lat
      |proj|prot|ext|impl|frag|inter|struct
      |module|nspace|object|record|label
      |raw|data|query|schema|style|trait|alias|type
      |if|else|elif|eless|unless|guard
      |for|each|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |yield\b\s*\bfrom|import|export|show|hide
      |from|where|join|equals|[io]nto|order
      |take|drop|fold|scan|select|use|using
      |fi|rof|done|esac|wend|yrt|disc|wout
      |open|close
      )\b
      )

      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )

      |
      (?:# Objects and maps
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

      |
      (?:# Regular variables
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      )
      \b\s*
    captures:
      1: {name: variable.other.index.sa}
      2: {name: variable.other.constant.property.sa}
      3: {name: variable.other.property.static.sa}
      4: {name: variable.other.property.sa}
      5: {name: variable.other.global.sa}
      6: {name: variable.other.constant.object.sa}
      7: {name: variable.other.conditional.sa}
      8: {name: variable.other.object.sa}
      9: {name: variable.other.dollar.sa}
      10: {name: variable.other.constant.sa}
      11: {name: variable.other.class.sa}
      12: {name: variable.other.readwrite.sa}

  operators:
    patterns:
      - include: "#special-operators"
      - include: "#unary-ops"
      - include: "#binary-ops"

    repository:
      binary-ops-builtin:
        patterns:
          - comment: augmented assignment += -= *= /= etc
            match: (?<=^|['"\`\\\p{ps}\s])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+(?<![!:~.<=>])=)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.assignment.augmented.sa
          - comment: "assignment : :="
            match: (?<=^|['"\`\\\p{ps}\s])(:?=)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.assignment.sa
          - comment: arithmetic + - * ** *** / // /// % %% *> <*
            match: (?<=^|['"\`\\\p{ps}\s])((?<!<)\+(?!>|\++)|(?<!<)-(?!>|-+)|\*{1,3}|/{1,3}(?!\\)|%%?|\*+>|<\*+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arithmetic.sa
          - comment: increment/decrement ++ --
            match: (?<=^|['"\`\\\p{ps}\s])((?:[+-])+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.successor.sa
          - comment: logical && || ^^ /\ / \ \\ etc.
            match: (?<=^|['"\`\\\p{ps}\s])((?:[&^]){2,}|\|\|+(?!>)|/\\|\\/|\\+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.logical.sa
          - comment: bitwise & | ^ ~
            match: (?<=^|['"\`\\\p{ps}\s])([&^]|\|(?!>)|~(?![!=<>]))(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.bitwise.sa
          - comment: shift << >> <<< >>>>
            match: (?<=^|['"\`\\\p{ps}\s])(<{2,}(?![!:=+|*])|(?<![!:=+|*])>{2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.bitwise.shift.sa
          - comment: function composition +> <+
            match: (?<=^|['"\`\\\p{ps}\s])(<\++|\++>)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.compose.sa
          - comment: pipeline |> <|
            match: (?<=^|['"\`\\\p{ps}\s])(<\|+|\|+>)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.pipeline.sa
          - comment: "class <: :> :< >: <:< >:> <:> >:< <! !> !< >! <!< >!> <!> >!<"
            match: (?<=^|['"\`\\\p{ps}\s])([<>][!:][<>]?|[!:][<>])(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.class.sa
          - comment: relational < > <= >=
            match: (?<=^|['"\`\\\p{ps}\s])([<>]=?)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.relational.sa
          - comment: regex =< <> </ /> <$ $> <$> <+> <*> </> <$> $
            match: (?<=^|['"\`\\\p{ps}\s])(<>|=<|<(?:[/*+$])+>?|(?:[/*+$])+>)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.regexp.sa
          - comment: equality == != === !==
            match: (?<=^|['"\`\\\p{ps}\s])([!=]=+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.comparison.sa
          - comment: similarity operators
            match: (?<=^|['"\`\\\p{ps}\s])([!=~]+~|~[!=~]+|[<~>]+~[<~>]*|~[<~>]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.similarity.sa
          - comment: fat arrow-like => ==> <==
            match: (?<=^|['"\`\\\p{ps}\s])([=>]+|[<=]+|[=>]+[<=]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arrow.fat.sa
          - comment: skinny arrow-like -> <- --> <--
            match: (?<=^|['"\`\\\p{ps}\s])([->]+|[<-]+|[->]+[<-]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arrow.skinny.sa
          - comment: wavy arrow-like ~> <~ ~~> <~~
            match: (?<=^|['"\`\\\p{ps}\s])([~>]+|[<~]+|[~>]+[<~]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arrow.wavy.sa
          - comment: null-coalescing ??
            match: (?<=^|['"\`\\\p{ps}\s])(\?{2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.null-coalescing.sa
          - comment: non-null coalescing !!
            match: (?<=^|['"\`\\\p{ps}\s])(!{2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.coalescing.sa
          - comment: "false coalescing ?:"
            match: (?<=^|['"\`\\\p{ps}\s])(\?+:+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.conditional.sa
          - comment: "true coalescing !:"
            match: (?<=^|['"\`\\\p{ps}\s])(!+:+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.ternary.sa
          - comment: "infix function $:"
            match: (?<=^|['"\`\\\p{ps}\s])(\$+:+|\${2,})(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.macro.dollar.sa
          - comment: custom bitwise (leading &|^ ~)
            match: (?<=^|['"\`\\\p{ps}\s])([&|^~][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.bitwise.sa
          - comment: custom arithmetic (leading + - * / %)
            match: (?<=^|['"\`\\\p{ps}\s])([+\-*/%][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.arithmetic.sa
          - comment: "custom accessor (leading : .)"
            match: (?<=^|['"\`\\\p{ps}\s])([:.][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.prototype.sa
          - comment: custom equality (leading = !)
            match: (?<=^|['"\`\\\p{ps}\s])([!=][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.comparison.sa
          - comment: custom comparison (leading < >)
            match: (?<=^|['"\`\\\p{ps}\s])([<>][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.relational.sa
          - comment: custom optional (leading ?)
            match: (?<=^|['"\`\\\p{ps}\s])(\?[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.private.sa
          - comment: custom mathematical (leading Unicode category Sm)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{sm}&&[\x{80}-\x{10ffff}]][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.math.sa
          - comment: custom currency-based (leading Unicode category Sc)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{sc}&&[^$]][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.currency.sa
          - comment: custom ASCII (leading Unicode 0x80 to 0xFF)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[\x{80}-\x{ff}]][\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.ascii.sa
          - comment: other custom (leading anything not covered above)
            match: (?<=^|['"\`\\\p{ps}\s])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
            name: keyword.operator.infix.sa

      binary-ops:
        match: (?<=^|['"\`\\\s\p{ps}])([\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]+)(?=$|['"\`\\\s\p{pe}])
        captures:
          0: {patterns: [{include: "#binary-ops-builtin"}]}

      unary-ops:
        patterns:
          - &transfix-operators
            comment: transfix binary operators
            match: |
              (?x)(?<=\b|^|[\p{pe}'"\`\\\s])
              (?:([>.]\.[.<])|(\?\.=?)|(~\.=?)|(!\.=?)|((?:::|\.)=?)|(->))
              (?=\b|$|[\p{ps}'"\`\\\s])
            captures:
              1: {name: keyword.operator.range.sa}
              2: {name: punctuation.accessor.optional.sa}
              3: {name: punctuation.accessor.cascade.sa}
              4: {name: punctuation.accessor.call.sa}
              5: {name: punctuation.accessor.sa}
              6: {name: punctuation.accessor.module.sa}

          - &prefix-operators
            comment: prefix operators
            match: |
              (?x)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]])#14
              (?=[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*
              [\p{l}\p{m}\p{n}\p{ps}_,;'"\`])
            name: keyword.operator.prefix.sa
            captures:
              1: {name: keyword.operator.module.all.sa}
              2: {name: keyword.operator.increment.sa}
              3: {name: keyword.operator.decrement.sa}
              4: {name: keyword.operator.intersection.sa}
              5: {name: keyword.operator.union.sa}
              6: {name: keyword.operator.sym-diff.sa}
              7: {name: keyword.operator.logical.sa}
              8: {name: keyword.operator.private.sa}
              9: {name: keyword.operator.decorator.sa}
              10: {name: keyword.operator.bitwise.not.sa}
              11: {name: keyword.operator.existential.sa}
              12: {name: keyword.operator.assignment.sa}
              13: {name: keyword.operator.pipeline.sa}
              14: {name: keyword.operator.prefix.sa}

          - &suffix-operators
            comment: suffix operators
            match: |
              (?x)
              (?<=[\p{l}\p{m}\p{n}\p{pe}_,;'"\`]
              [\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]])#14
            name: keyword.operator.suffix.sa
            captures:
              1: {name: keyword.operator.module.all.sa}
              2: {name: keyword.operator.increment.sa}
              3: {name: keyword.operator.decrement.sa}
              4: {name: keyword.operator.intersection.sa}
              5: {name: keyword.operator.union.sa}
              6: {name: keyword.operator.sym-diff.sa}
              7: {name: punctuation.accessor.call.sa}
              8: {name: keyword.operator.private.sa}
              9: {name: keyword.operator.decorator.sa}
              10: {name: keyword.operator.bitwise.sa}
              11: {name: punctuation.accessor.optional.sa}
              12: {name: keyword.operator.assignment.sa}
              13: {name: keyword.operator.pipeline.sa}
              14: {name: keyword.operator.suffix.sa}

      pipeline-operator:
        patterns:
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*(?:(\++>)|(\|+>))(?=\s*(
              [\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*# prefix

              (?!
              \b(?:# don't match keywords
              in|of|as|is|new|infer|unset
              |typeof|nameof|sizeof|keyof|valof
              |len|del|to|til|thru|at|by
              |and|x?or|not|para|seq|spawn
              |def|func?|fn|macro|proc|sub
              |let|var|val|const|decl
              |class|given|law|enum|rel|lat
              |proj|prot|ext|impl|frag|inter|struct
              |module|nspace|object|record|label
              |raw|data|query|schema|style|trait|alias|type
              |if|else|elif|eless|unless|guard
              |for|each|while|until|repeat|do|redo
              |switch|case|fail|default|match|when|pass|fallthru
              |try|retry|throw|raise|catch|rescue|finally
              |with|ref|defer|refer|show|hide|enter|exit
              |then|begin|end|debug|check|assert
              |break|continue|halt|skip|fixed|lock
              |(?:return|give|await|yield|throw|raise)s?
              |yield\b\s*\bfrom|import|export|show|hide
              |from|where|join|equals|[io]nto|order
              |take|drop|fold|scan|select|use|using
              |fi|rof|done|esac|wend|yrt|disc|wout
              |open|close
              )\b
              )

              [_\p{l}\p{m}\p{n}]+
              (?:[\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*# transfix
              [_\p{l}\p{m}\p{n}]+)*
              [\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]*# suffix
              )\s*([^(]|$|;))
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.compose.sa}
              2: {name: keyword.operator.pipeline.sa}
            patterns:
              - match: |
                  (?x)\s*\b

                  (?!
                  \s*\b
                  (?:# don't match keywords
                  new|unset|len|del|to|til|thru|at|by
                  |and|x?or|not|para|seq|spawn
                  |def|func?|fn|macro|proc|sub
                  |let|var|val|const|decl
                  |class|given|law|enum|rel|lat
                  |proj|prot|ext|impl|frag|inter|struct
                  |module|nspace|object|record|label
                  |raw|data|query|schema|style|trait|alias|type
                  |if|else|elif|eless|unless|guard
                  |for|each|while|until|repeat|do|redo
                  |switch|case|fail|default|match|when|pass|fallthru
                  |try|retry|throw|raise|catch|rescue|finally
                  |with|ref|defer|refer|show|hide|enter|exit
                  |then|begin|end|debug|check|assert
                  |break|continue|halt|skip|fixed|lock
                  |(?:return|give|await|yield|throw|raise)s?
                  |yield\b\s*\bfrom|import|export|show|hide
                  |from|where|join|equals|[io]nto|order
                  |take|drop|fold|scan|select|use|using
                  |fi|rof|done|esac|wend|yrt|disc|wout
                  |open|close
                  )\b
                  )

                  (?:
                  (?:# Objects and maps
                  (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
                  ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
                  ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
                  ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
                  )
                  (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

                  |
                  (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
                  (?:# Properties (note all properties are by default, symbols)
                  (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
                  ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
                  ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
                  ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
                  )

                  |
                  (?:# Regular variables
                  (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
                  ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
                  ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
                  ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
                  )
                  )\b
                captures:
                  1: {name: variable.other.global.sa}
                  2: {name: variable.other.constant.object.sa}
                  3: {name: variable.other.conditional.sa}
                  4: {name: variable.other.object.sa}
                  5: {name: entity.name.tag.sa}
                  6: {name: entity.name.tag.sa support.class.component.sa}
                  7: {name: entity.name.class.builtin.sa}
                  8:
                    name: entity.name.function.method.sa
                    patterns: [{include: "#function-names"}]
                  9: {name: entity.name.function.tagged-template.sa}
                  10: {name: entity.name.type.sa}
                  11: {name: entity.name.class.sa}
                  12:
                    name: entity.name.function.sa
                    patterns: [{include: "#function-names"}]
              - *transfix-operators

      special-operators:
        patterns:
          - include: "#pipeline-operator"
          - begin: (?<=\s)(\?)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.conditional.sa}
            patterns:
              - begin: \s*(?=([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\!)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.ternary.sa}
            patterns:
              - begin: \s*(?=([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\$)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.macro.dollar.sa}
            patterns:
              - begin: \s*(?=([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*:)
                end: \s*(?=:\s|$)
                name: entity.name.function.sa
              - include: $self

  constant-types:
    - include: "#literals"

  custom-types:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int

      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?!
      \s*\b
      (?:# don't match keywords
      new|unset|len|del|to|til|thru|at|by
      |and|x?or|not|para|seq|spawn
      |def|func?|fn|macro|proc|sub
      |let|var|val|const|decl
      |class|given|law|enum|rel|lat
      |proj|prot|ext|impl|frag|inter|struct
      |module|nspace|object|record|label
      |raw|data|query|schema|style|trait|alias|type
      |if|else|elif|eless|unless|guard
      |for|each|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |yield\b\s*\bfrom|import|export|show|hide
      |from|where|join|equals|[io]nto|order
      |take|drop|fold|scan|select|use|using
      |fi|rof|done|esac|wend|yrt|disc|wout
      |open|close
      )\b
      )

      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )

      |
      (?:# Objects and maps
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

      |
      (?:# Regular variables
      (_+[\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*(?!_+)|[\p{l}\p{nl}][\p{l}\p{m}\p{n}]*_+)|
      ([\p{lu}\p{lt}\p{lo}\p{nl}][_\p{lu}\p{lt}\p{lo}\p{nl}\p{n}\p{m}]*)|
      ((?:[_\p{lu}\p{lt}\p{lo}\p{nl}]+[_\p{ll}\p{m}\p{n}]*)+)|
      ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
      )
      )\b
    captures: &custom-types
      1: {name: entity.name.tag.block.sa}
      2: {name: entity.name.tag.script.sa}
      3: {name: entity.name.tag.style.sa}
      4: {name: entity.name.tag.inline.sa}
      5: {name: entity.name.module.sa}
      6: {name: entity.name.tag.sa}
      7: {name: entity.name.namespace.sa}
      8: {name: entity.name.interface.sa}
      9: {name: entity.name.label.sa}
      10: {name: entity.name.project.sa}
      11: {name: entity.name.class.sa}
      12: {name: entity.name.type.sa}

  type-brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

    repository:
      curly-brackets: &type-curly-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.mapping.sa
              - match: (?<!\s):(?!:)
                name: punctuation.separator.key-value.sa
              - match: (?<=^|\p{ps})\s*([*+-](?:\s+[*+-])*)
                name: punctuation.definition.block.sequence.item.saga

        patterns:
          - begin: \s*(\{\|)
            end: \s*(\|\})
            captures:
              1: {name: punctuation.definition.mapping.sa}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\{)
            end: \s*(\})
            captures:
              1: {name: punctuation.definition.dictionary.sa}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      round-brackets: &type-round-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.arguments.sa
        patterns:
          - begin: \s*(\(\|)
            end: \s*(\|\))
            captures:
              1: {name: punctuation.definition.parameters.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      square-brackets: &type-square-brackets
        repository:
          punctuation:
            patterns:
              - match: (?<=\b|^|[\p{pe}'"\`\\\s])(:)(?=\b|$|[\p{ps}'"\`\\\s])
                captures:
                  1: {name: punctuation.separator.slice.sa}
              - match: ","
                name: punctuation.separator.sequence.sa
        patterns:
          - begin: \s*(\[<)
            end: \s*(>\])
            captures:
              1: {name: punctuation.definition.typeparameters.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[\|)
            end: \s*(\|\])
            captures:
              1: {name: punctuation.definition.sequence.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[)
            end: \s*(\])
            captures:
              1: {name: punctuation.definition.array.sa}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

  type-keywords:
    patterns:
      - match: |
          (?x)\s*\b
          (ext)\b\s*
        name: storage.type.extends.sa
      - match: |
          (?x)\s*\b
          (impl)\b\s*
        name: storage.type.implements.sa
      - match: |
          (?x)\s*\b
          ((?:type|name|size|key)of|only|infer|in|of|as|is)\b\s*
        name: keyword.operator.expression.$1.sa
      - match: |
          (?x)\s*\b
          (valof)\b\s*
        name: keyword.operator.expression.valueof.sa

  type-operators:
    patterns:
      - comment: transfix binary operators
        match: |
          (?x)(?<=^|[\p{pe}_\p{l}\p{m}\p{n}'"\`])
          (?:(\?[:.])|(~[:.])|(![:.])|(::|\.)|(->))
          (?=$|[\p{ps}_\p{l}\p{m}\p{n}'"\`])
        captures:
          1: {name: punctuation.accessor.optional.sa}
          2: {name: punctuation.accessor.cascade.sa}
          3: {name: punctuation.accessor.call.sa}
          4: {name: punctuation.accessor.sa}
          5: {name: punctuation.accessor.module.sa}

      - comment: type operators
        match: |
          (?x)\s*(?:
          (\+)|
          (\-)|
          (\*)|
          (\/)|
          (\%)|
          (\!)|
          (\?)|
          (\&)|
          (\|)|
          (\^)|
          (\~)|
          (\$)|
          ([<>])
          )
          (?![\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]])
        captures:
          1: {name: keyword.operator.sum.sa}
          2: {name: keyword.operator.difference.sa}
          3: {name: keyword.operator.product.sa}
          4: {name: keyword.operator.quotient.sa}
          5: {name: keyword.operator.remainder.sa}
          6: {name: keyword.operator.only.sa}
          7: {name: keyword.operator.maybe.sa}
          8: {name: keyword.operator.intersection.sa}
          9: {name: keyword.operator.union.sa}
          10: {name: keyword.operator.sym-diff.sa}
          11: {name: keyword.operator.negation.sa}
          12: {name: keyword.operator.macro.dollar.sa}
          13: {name: keyword.operator.class.sa}

  type-annotation:
    applyEndPatternLast: 1
    begin: (:)(?=\s|$)
    end: (?=\O)|$
    beginCaptures:
      1: {name: punctuation.definition.annotation.sa}
    patterns:
      - include: "#types"

  types:
    patterns:
      - include: "#type-keywords"
      - include: "#modifier-keywords"
      - include: "#constant-types"
      - include: "#type-names"
      - include: "#custom-types"
      - include: "#type-operators"
      - include: "#type-brackets"

      - match: \s*([~=]>)\s*
        name: storage.type.function.arrow.sa

      - match: (?!^)\s*\b((?>WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|strings|SIMD.Uint8x16|SIMD.Uint32x4|SIMD.Uint16x8|SIMD.Int8x16|SIMD.Int32x4|SIMD.Int16x8|SIMD.Float64x2|SIMD.Float32x4|SIMD.Bool8x16|SIMD.Bool64x2|SIMD.Bool32x4|SIMD.Bool16x8|SIMD|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|numbers|NaN|Math|Map|JSON|Intl.NumberFormat|Intl.DateTimeFormat|Intl.Collator|Intl|InternalError|Int8Array|Int32Array|Int16Array|Infinity|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array))\b
        captures:
          1: {name: support.type.builtin.class.sa}
      - match: \s*\b((SIMD)((\.)(Uint8x16|Uint32x4|Uint16x8|Int8x16|Int32x4|Int16x8|Float64x2|Float32x4|Bool8x16|Bool64x2|Bool32x4|Bool16x8))?)\b
        captures:
          2: {name: support.type.builtin.class.sa}
          4: {name: keyword.operator.accessor.sa}
          5: {name: support.type.builtin.class.sa}
      - match: \s*\b((Intl)((\.)(NumberFormat|DateTimeFormat|Collator))?)\b
        captures:
          2: {name: support.type.builtin.class.sa}
          4: {name: keyword.operator.accessor.sa}
          5: {name: support.type.builtin.class.sa}

  modifier-keywords:
    match: |
      (?x)
      ((?:
      \s*(?:
      (?:# Access modifiers
      pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
      |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
      # Function or method modifiers
      |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
      |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
      |# Function or method modifiers
      (?:pre|in|post|suf|af|trans|inter)fix|
      (?:u|bi|ter|)nary|oper
      |# Decorators
      @(?:
      [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
      (?:(?:[?!~]?\.|[?!:]:|->)
      (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
      )
      )
      )
      \s*)*)
      (?=\s*\b
      (?:
      def|func?|fn|macro|proc|sub
      |let|va[rl]|const
      |class|ext
      |given|law
      |enum|rel|lat
      |proj
      |frag|struct
      |inter|schema
      |module|lat
      |nspace
      |object|record
      |raw
      |data|query
      |style
      |trait|impl
      |type|alias
      |decl
      |do|redo
      )\b
      )
    captures:
      1:
        patterns: &modifier-keywords
          - match: |
              (?x)\s*@(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )\s*
            name: entity.name.class.decorator.sa
          - match: |
              (?x)\s*
              \s*\b
              (?:
              (# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              )|
              (# Function or method modifiers
              [gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              )|
              (# Property modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              )
              )\b\s*
            captures:
              1: {name: storage.modifier.sa}
              2: {name: storage.type.accessor.sa}
              3: {name: storage.type.property.sa}

  support:
    patterns:
      - include: "#support-constants"
      - include: "#type-names"
      - include: "#support-functions"

  clause-keywords:
    comment: clause keywords
    match: |
      (?x)\s*\b(?:
      (def|func?|fn|macro|proc|sub)# function
      |(let|va[rl]|const)# variable
      |(class|ext)# class
      |(given|law)# constraint
      |(enum|rel|lat)# enumeration
      |(proj)# project
      |(frag|struct)# fragment
      |(inter|schema)# interface
      |(module|lat)# module
      |(nspace)# function
      |(object|record)# object
      |(raw)# markup
      |(data|query)# indented GraphQL
      |(style)# inline CSS
      |(trait|impl)# trait
      |(type|alias)# type alias
      |(decl)# declaration
      )\b\s*
    captures:
      1: {name: storage.type.function.sa}
      2: {name: storage.type.sa}
      3: {name: storage.type.class.sa}
      4: {name: storage.type.constraint.sa}
      5: {name: storage.type.enum.sa}
      6: {name: storage.type.project.sa}
      7: {name: storage.type.fragment.sa}
      8: {name: storage.type.interface.sa}
      9: {name: storage.type.module.sa}
      10: {name: storage.type.namespace.sa}
      11: {name: storage.type.object.sa}
      12: {name: storage.type.raw.sa}
      13: {name: storage.type.schema.sa}
      14: {name: storage.type.style.sa}
      15: {name: storage.type.trait.sa}
      16: {name: keyword.other.typedef.sa}
      17: {name: keyword.other.declare.sa}

  general-keywords:
    comment: general keywords
    match: |
      (?x)\s*\b(?:
      (if|else|elif|eless|unless|guard|fi)#1
      |(for|each|while|until|repeat|rof)#2
      |(switch|case|fail|default|fallthru|esac)#3
      |(match|when|pass|wend)#4
      |(try|retry|throw|raise|catch|rescue|finally|yrt)#5
      |(with|wout)#6
      |(ref|refer|show|hide|enter|exit)#7
      |(then)#8
      |(debug|check|assert)#9
      |(break|continue|halt|skip|return|give|label|await|yield|throw|raise|yield\b\s+\bfrom)# 10
      |((?:im|ex)port|show|hide)# 11
      |(para|seq|spawn|disc)#12
      |(do|redo|done)#13
      |(begin|end)#14
      )\b\s*
    captures:
      1: {name: keyword.control.conditional.sa}
      2: {name: keyword.control.loop.sa}
      3: {name: keyword.control.switch.sa}
      4: {name: keyword.control.match.sa}
      5: {name: keyword.control.error.sa}
      6: {name: keyword.control.with.sa}
      7: {name: keyword.control.sa}
      8: {name: keyword.control.then.sa}
      9: {name: keyword.other.$10.sa}
      10: {name: keyword.control.flow.sa}
      11: {name: keyword.control.module.sa}
      12: {name: keyword.control.thread.sa}
      13: {name: keyword.control.do.sa}
      14: {name: keyword.control.$14.sa}

  expression-keywords:
    comment: expression keywords
    match: |
      (?x)\s*\b(?:
      (in)|(of)|(as)|(is)|(new)|(infer)
      |(typeof|nameof|sizeof|keyof)
      |(valof)|(len)|(del)|(to|til|thru|at|by)|(unset)
      |(and|x?or|not)
      )\b\s*
    captures:
      1: {name: keyword.operator.expression.in.sa}
      2: {name: keyword.operator.expression.of.sa}
      3: {name: keyword.operator.expression.as.sa}
      4: {name: keyword.operator.expression.is.sa}
      5: {name: keyword.operator.expression.new.sa}
      6: {name: keyword.operator.expression.infer.sa}
      7: {name: keyword.operator.expression.$7.sa}
      8: {name: keyword.operator.expression.valueof.sa}
      9: {name: keyword.operator.expression.length.sa}
      10: {name: keyword.operator.expression.delete.sa}
      11: {name: keyword.operator.expression.range.sa}
      12: {name: keyword.operator.expression.void.sa}
      13: {name: keyword.operator.expression.logical.sa}

  keywords:
    patterns:
      - include: "#query-expression"
      - include: "#module-expression"
      - include: "#control-expression"
      - include: "#modifier-keywords"
      - include: "#clause-keywords"
      - include: "#expression-keywords"
      - include: "#general-keywords"

    repository:
      control-expression:
        applyEndPatternLast: 1
        begin: \s*\b(halt|skip|break|continue|goto|label)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.flow.sa}
        patterns:
          - match: \s*([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s*
            captures:
              1: {name: constant.other.label.sa}

      module-expression:
        applyEndPatternLast: 1
        begin: \s*\b(import|export|open|close|use|using)\b\s*
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.module.sa}
        patterns:
          - include: "#modifier-keywords"
          - include: "#type-keywords"
          - match: \s*\b(from|to|as|all|any|show|hide|to|and|x?or|not)\b\s*
            name: keyword.control.module.sa
          - match: \s*\*
            name: keyword.operator.module.all.sa
          - include: "#module-string"
          - include: "#type-names"
          - include: "#custom-types"
          - include: "#types"
          - include: "#operators"
          - include: "#punctuation"
        repository:
          module-string:
            patterns:
              - comment: single quoted raw string
                begin: \s*('{3,})
                contentName: string.quoted.template.sa
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.sa}
                patterns:
                  - include: "#embedded-raw"
              - comment: simple single quoted raw string
                begin: \s*(')
                contentName: string.quoted.template.sa
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.sa}
                patterns:
                  - match: "''"
                    name: constant.character.escape.sa
                  - include: "#embedded-raw"
              - comment: double quoted standard string
                begin: \s*("{3,}|")
                contentName: string.quoted.module.sa
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.sa}
                patterns:
                  - include: "#string-escapes"

      query-expression:
        patterns:
          - begin: \s*\b(from)\b\s*
            end: \s*\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.sa}
            patterns:
              - include: $self
          - match: \s*\b((\b(fold|scan)\b)\s*(\b(left|right)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.sa
          - begin: \s*\b(group)\b\s*
            end: \s*\b(by)\b\s*
            captures:
              1: {name: keyword.query.sa}
            patterns:
              - include: $self
          - begin: \s*\b(join)\b\s*
            end: \s*\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.sa}
            patterns:
              - include: $self
          - match: \s*\b(equals?|[io]nto)\b\s*
            name: keyword.query.sa
          - match: \s*\b((\b(order)\b)\s*(\b((a|de)sc)\b)?\s*(\b(by)\b)?)\b\s*
            name: keyword.query.sa
          - match: \s*\b(select)\b\s*
            name: keyword.query.sa
          - match: \s*\b((\b(take|drop)\b)\s*(\b(left|right|init|head|tail|last)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.sa
          - match: \s*\b(where)\b\s*
            name: keyword.query.sa

  parameter-brackets:
    begin: \s*(\()
    end: \s*(\))
    captures:
      1: {name: punctuation.definition.parameters.sa}
    patterns: &function-params
      - include: "#clauses"
      - include: "#keywords"
      - match: (?i)\s*\?[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.optional.sa
      - match: (?i)\s*\*[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.spread.sa
      - match: (?i)\s*\&[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.name.sa
      - match: (?i)\s*\%[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.reference.sa
      - match: (?i)\s*\$[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.other.sa
      - match: (?i)\s*\b[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*\b\s*
        name: variable.parameter.sa
      - include: "$self"

  block-entities:
    repository:
      type-square-brackets: *type-square-brackets
      type-round-brackets: *type-round-brackets
      type-curly-brackets: *type-curly-brackets

    patterns:
      - include: "#type-keywords"
      - include: "#type-square-brackets"
      - include: "#parameter-brackets"
      - include: "#round-brackets"
      - include: "#curly-brackets"
      - include: "#type-annotation"
      - include: "#type-operators"
      - *transfix-operators
      - applyEndPatternLast: 1
        begin: \s*(:)(?:(?=::)|(?![\p{s}\p{po}\p{pd}\p{pi}\p{pf}\p{pc}&&[^_,;'"\`\\\#]]))
        end: (?=\O)|$
        beginCaptures:
          1: {name: punctuation.definition.annotation.sa}
        patterns:
          - include: "#types"

  declarations:
    patterns:
      - include: "#function"
      - include: "#raw"
      - include: "#schema"
      - include: "#style"
      - include: "#class"
      - include: "#enum"
      - include: "#interface"
      - include: "#trait"
      - include: "#fragment"
      - include: "#module"
      - include: "#namespace"
      - include: "#object"
      - include: "#constraint"
      - include: "#project"

    repository:
      class:
        applyEndPatternLast: 1
        begin: \s*\b(class|ext)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.class.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.class.sa}
          - include: "#block-entities"
      constraint:
        applyEndPatternLast: 1
        begin: \s*\b(given|law)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.constraint.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.constraint.sa}
          - include: "#block-entities"
      enum:
        applyEndPatternLast: 1
        begin: \s*\b(enum|rel)\b\s*
        end: $|(?=.)
        name: meta.enum.declaration.sa
        beginCaptures:
          1: {name: storage.type.enum.sa}
          2: {name: entity.name.enum.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.enum.sa}
          - include: "#block-entities"
      project:
        applyEndPatternLast: 1
        begin: \s*\b(proj|impl)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.project.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.project.sa}
          - include: "#block-entities"
      fragment:
        applyEndPatternLast: 1
        begin: \s*\b(frag|struct)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.fragment.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.fragment.sa}
          - include: "#block-entities"
      function:
        applyEndPatternLast: 1
        begin: \s*\b(def|func?|fn|macro|proc|sub)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.function.sa}
        patterns:
          - match: *entity-name
            captures:
              1:
                name: entity.name.function.sa
                patterns: [{include: "#function-names"}]
          - include: "#block-entities"
      interface:
        applyEndPatternLast: 1
        begin: \s*\b(inter|schema)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.interface.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.interface.sa}
          - include: "#block-entities"
      module:
        applyEndPatternLast: 1
        begin: \s*\b(module|lat)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.module.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.module.sa}
          - include: "#block-entities"
      namespace:
        applyEndPatternLast: 1
        begin: \s*\b(nspace)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.namespace.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.namespace.sa}
          - include: "#block-entities"
      object:
        applyEndPatternLast: 1
        begin: \s*\b(object|record)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.object.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.object.sa}
          - include: "#block-entities"
      raw:
        applyEndPatternLast: 1
        begin: \s*\b(raw)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.raw.sa}
        patterns:
          - match: *entity-name
            name: entity.name.raw.sa
          - include: "#block-entities"
      schema:
        applyEndPatternLast: 1
        begin: \s*\b(data|query)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.schema.sa}
        patterns:
          - match: *entity-name
            name: entity.name.schema.sa
          - include: "#block-entities"
      style:
        applyEndPatternLast: 1
        begin: \s*\b(style)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.style.sa}
        patterns:
          - match: *entity-name
            name: entity.name.style.sa
          - include: "#block-entities"
      trait:
        applyEndPatternLast: 1
        begin: \s*\b(trait|impl)\b\s*
        end: $|(?=.)
        beginCaptures:
          1: {name: storage.type.trait.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: entity.name.trait.sa}
          - include: "#block-entities"

  clauses:
    patterns:
      - include: "#variable-clause"
      - include: "#constant-clause"
      - include: "#arguments-clause"
      - include: "#for-clause"
      - include: "#if-clause"
      - include: "#switch-clause"
      - include: "#match-clause"
      - include: "#catch-clause"
      - include: "#with-clause"
      - include: "#thread-clause"
      - include: "#do-clause"
      - include: "#when-clause"
      - include: "#case-clause"
      - include: "#type-clause"
      - include: "#new-clause"
      - include: "#method-clause"
      - include: "#function-clause"

    repository:
      function-params:
        patterns: *function-params

      arguments-clause:
        patterns:
          - begin: (?<=(?:[\p{ps}]\|?|\b(?:do|redo|def|func?|fn|macro|proc|sub)\b)\s*)(\|)(?=[\w\s])
            captures:
              1: {name: punctuation.separator.arguments.sa}
            end: (?<!\|)(\|)(?!\|)
            patterns:
              - include: "#function-params"

      pattern-brackets:
        begin: \s*(\()
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.parameters.sa}
        patterns:
          - include: "#function-params"

      method-clause:
        patterns:
          - begin: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+
              (

              (?:(?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              )\s*\b)*

              )\s*
              (\|)
              (?=[\w\s])
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1:
                name: entity.name.function.method.sa
                patterns: [{include: "#function-names"}]
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.sa}
            endCaptures:
              1: {name: punctuation.separator.arguments.sa}
            patterns:
              - include: "#function-params"
          - comment: |
              Method def before function keyword
              x = def()
            match: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+

              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+

              ((?:
              \s*(?:
              (?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              def|func?|fn|macro|proc|sub
              )\b
              )
            captures:
              1:
                name: entity.name.function.method.sa
                patterns: [{include: "#function-names"}]
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}

      function-clause:
        patterns:
          - begin: |
              (?x)
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+
              (

              (?:(?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              )\s*\b)*

              )\s*
              (\|)
              (?=[\w\s])
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1:
                name: entity.name.function.sa
                patterns: [{include: "#function-names"}]
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.sa}
            endCaptures:
              1: {name: punctuation.separator.arguments.sa}
            patterns:
              - include: "#function-params"
          - comment: |
              Function def before function keyword
              x = def()
            match: |
              (?x)\s*
              ([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\s+
              (:?=)\s+

              ((?:
              \s*(?:
              (?:# Access modifiers
              pub|prot|priv|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|final
              # Function or method modifiers
              |[gs]et|ref|rec|gen|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|inter)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              def|func?|fn|macro|proc|sub
              )\b
              )
            captures:
              1:
                {
                  name: entity.name.function.sa,
                  patterns: [{include: "#function-names"}],
                }
              2: {name: keyword.operator.assignment.sa}
              3: {patterns: *modifier-keywords}

      variable-clause:
        applyEndPatternLast: 1
        begin: \s*\b(var|let)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: storage.type.sa}
        patterns:
          - include: $self

      constant-clause:
        applyEndPatternLast: 1
        begin: \s*\b(val|const)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: storage.type.sa}
        patterns:
          - match: *entity-name
            captures:
              1: {name: variable.other.constant.sa}
          - include: "#block-entities"

      new-clause:
        applyEndPatternLast: 1
        begin: \s*\b(new)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.operator.expression.$1.sa}
        patterns:
          - match: \s*([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)
            name: entity.name.instance.sa
          - include: "#block-entities"

      type-clause:
        patterns:
          - applyEndPatternLast: 1
            begin: \s*\b(as|is)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.expression.$1.sa}
            patterns:
              - include: "#types"
          - begin: \s*\b(type|alias)\b\s*\b([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\b\s*(?:(:?=)|(:))?\s*
            end: ^(?=\S)|(?!\G)
            name: meta.type-alias.sa
            beginCaptures:
              1: {name: keyword.other.typedef.sa}
              2: {patterns: [{include: "#types"}]}
              3: {name: keyword.operator.assignment.sa}
              4: {name: punctuation.separator.colon.sa}
            patterns:
              - begin: ^((\p{zs})+)(?!\2)
                end: ^(?!\1|\s*$)
                name: meta.type-alias.sa
                patterns:
                  - include: "#types"
              - include: $self
          - applyEndPatternLast: 1
            begin: \s*\b(type|alias)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.other.typedef.sa}
            patterns:
              - match: \s*(:?=)\s*
                captures:
                  1: {name: keyword.operator.assignment.sa}
              - include: "#types"
          - applyEndPatternLast: 1
            begin: \s*\b(decl)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.other.declare.sa}
            patterns:
              - match: \s*(:?=)\s*
                captures:
                  1: {name: keyword.operator.assignment.sa}
              - include: "#types"
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*\b(
              (?:return|give|await|yield|throw|raise)s
              )\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.modifier.sa}
            patterns:
              - include: "#types"

      case-clause:
        begin: \s*\b(case|fail|default)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        beginCaptures:
          1: {name: keyword.control.switch.sa}
        patterns:
          - include: "#clause-content"

      catch-clause:
        begin: \s*\b(try|retry|catch|rescue|finally)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.catch.sa
        beginCaptures:
          1: {name: keyword.control.error.sa}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.error.sa
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.error.sa
          - include: "#clause-content"

      thread-clause:
        begin: \s*\b(para|seq|spawn|fixed|lock)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.thread.sa
        beginCaptures:
          1: {name: keyword.control.thread.sa}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            beginCaptures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.thread.sa
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.thread.sa
          - include: "#clause-content"

      do-clause:
        begin: \s*\b(do|redo)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.do.sa
        beginCaptures:
          1: {name: keyword.control.do.sa}
        patterns:
          - include: "#clause-content"

      for-clause:
        begin: \s*\b(for|each|while|until|repeat)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.for.sa
        beginCaptures:
          1: {name: keyword.control.loop.sa}
        patterns:
          - match: \s*\b(in|of|to|til|thru|at|by)\b
            name: keyword.control.loop.sa
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(in|of|to|til|thru|at|by)\b
                name: keyword.control.loop.sa
              - include: $self
          - include: "#clause-content"

      if-clause:
        begin: \s*\b(if|elif|else|unless|eless|guard)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.if.sa
        beginCaptures:
          1: {name: keyword.control.conditional.sa}
        patterns:
          - include: "#clause-content"

      match-clause:
        begin: \s*\b(match)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.match.sa
        beginCaptures:
          1: {name: keyword.control.match.sa}
        patterns:
          - include: "#clause-content"

      switch-clause:
        begin: \s*\b(switch)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.switch.sa
        beginCaptures:
          1: {name: keyword.control.switch.sa}
        patterns:
          - include: "#clause-content"

      when-clause:
        begin: \s*\b(when)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        beginCaptures:
          1: {name: keyword.control.match.sa}
        patterns:
          - applyEndPatternLast: 1
            begin: \s*\b(as|is)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.match.sa}
            patterns:
              - include: "#types"
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*\b((?:return|give|await|yield|throw|raise)s?)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.match.sa}
            patterns:
              - include: "#types"
          - begin: \s*\b(if|elif|else|unless|eless|guard)\b
            end: (?=[\p{pe};]|:(?=\s+|$)|(?<=\s)(?:->|\b(?:begin|then))|$)
            endCaptures:
              0: {name: punctuation.separator.colon.sa}
            beginCaptures:
              1: {name: keyword.control.match.sa}
            patterns:
              - include: $self
          - include: "#type-operators"
          - include: "#clause-content"

      with-clause:
        begin: \s*\b(with)\b
        end: (?<=^|\s*)(:)(?=\s|$)|(?=[\p{pe};]|(?<=\s)(?:->|\b(?:begin|then))|$)
        endCaptures:
          0: {name: punctuation.separator.colon.sa}
        name: meta.with.sa
        beginCaptures:
          1: {name: keyword.control.with.sa}
        patterns:
          - begin: \s*
            end: \s*(?=[{,])
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.with.sa
              - include: $self
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: meta.brace.round.sa}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.with.sa
              - include: $self
          - include: "#clause-content"

  punctuation:
    patterns:
      - include: "#line-continuation"
      - include: "#comma"
      - include: "#right-arrow"
      - include: "#semicolon"
      - include: "#double-semi"

    repository:
      line-continuation:
        match: (\\)\s*(?=#|$)
        captures:
          1: {name: punctuation.separator.continuation.line.sa}
      comma:
        match: \s*(,)
        captures:
          1: {name: punctuation.separator.comma.sa}
      right-arrow:
        match: (?:^|['"\`\\\p{ps}\s]*)(->)(?:$|['"\`\\\s\p{pe}])
        captures:
          1: {name: punctuation.definition.arrow.sa}
      double-semi:
        match: \s*(;;)
        captures:
          1: {name: punctuation.terminator.statement.sa}
      semicolon:
        match: \s*(;)(?!;)
        captures:
          1: {name: punctuation.terminator.expression.sa}

  brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

  curly-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.mapping.sa
          - match: (?<!\s):(?!:)
            name: punctuation.separator.key-value.sa
          - match: (?<=^|\p{ps})\s*([*+-](?:\s+[*+-])*)
            name: punctuation.definition.block.sequence.item.saga

    patterns:
      - begin: (\{\|)\s*
        end: \s*(\|\})
        captures:
          1: {name: punctuation.definition.mapping.sa}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self
      - begin: (\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.dictionary.sa}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self

  round-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.arguments.sa

    patterns:
      - begin: (\(\|)\s*
        end: \s*(\|\))
        captures:
          1: {name: punctuation.definition.parameters.sa}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.expression.sa}
        patterns:
          - include: "#punctuation"
          - include: $self

  square-brackets:
    repository:
      punctuation:
        patterns:
          - match: (?<=\b|^|[\p{pe}'"\`\\\s])(:)(?=\b|$|[\p{ps}'"\`\\\s])
            captures:
              1: {name: punctuation.separator.slice.sa}
          - match: ","
            name: punctuation.separator.sequence.sa

    patterns:
      - begin: (\[<)\s*
        end: \s*(>\])
        captures:
          1: {name: punctuation.definition.typeparameters.sa}
        patterns:
          - include: "#types"
          - include: $self
      - begin: (\[\|)\s*
        end: \s*(\|\])
        captures:
          1: {name: punctuation.definition.sequence.sa}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\[)\s*
        end: \s*(\])
        captures:
          1: {name: punctuation.definition.array.sa}
        patterns:
          - include: "#punctuation"
          - include: $self

  embedded-langs:
    patterns:
      - include: "#raw-haml"
      - include: "#raw-stylus"
      - include: "#raw-yaml"
      - include: "#raw-python"
      - include: "#raw-ruby"
      - include: "#raw-pug"
      - include: "#raw-markdown"
      - include: "#raw-css"
      - include: "#raw-scss"
      - include: "#raw-less"
      - include: "#raw-html"
      - include: "#raw-javascript"
      - include: "#raw-typescript"
      - include: "#raw-other"

    repository:
      raw-yaml:
        begin: \s*\b(raw)\b\s*\b((?i:yaml))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.yaml.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.yaml.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.yaml
          - include: $self
      raw-python:
        begin: \s*\b(raw)\b\s*\b((?i:py|python))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.python.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.python.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.python
          - include: $self
      raw-ruby:
        begin: \s*\b(raw)\b\s*\b((?i:rb|ruby))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.ruby.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.ruby.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.ruby
          - include: $self
      raw-css:
        begin: \s*\b(raw)\b\s*\b((?i:css))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.css.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.css.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.css
          - include: $self
      raw-javascript:
        begin: \s*\b(raw)\b\s*\b((?i:js|javascript))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.js.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.js.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.js
          - include: $self
      raw-typescript:
        begin: \s*\b(raw)\b\s*\b((?i:ts|typescript))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.ts.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.ts.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.ts
          - include: $self
      raw-html:
        begin: \s*\b(raw)\b\s*\b((?i:html))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.html.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.html.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.html
          - include: $self
      raw-scss:
        begin: \s*\b(raw)\b\s*\b((?i:s[ca]ss))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.scss.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.scss.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.css.scss
          - include: $self
      raw-less:
        begin: \s*\b(raw)\b\s*\b((?i:less))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.less.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.less.sa
            patterns:
              - include: "#embedded-raw"
              - include: source.less
          - include: $self
      raw-pug:
        begin: \s*\b(raw)\b\s*\b((?i:pug))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.pug.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.pug.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.pug
          - include: $self
      raw-markdown:
        begin: \s*\b(raw)\b\s*\b((?i:md|mdown|markdown))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.markdown.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.markdown.sa
            patterns:
              - include: "#embedded-raw"
              - include: text.html.markdown
          - include: $self
      raw-haml:
        begin: \s*\b(raw)\b\s*\b((?i:haml))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.haml.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.haml.sa
            patterns:
              - include: "#embedded-raw"
              - include: "#embedded-haml"
          - include: $self
      raw-stylus:
        begin: \s*\b(raw)\b\s*\b((?i:styl|stylus))\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.stylus.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: meta.embedded.stylus.sa
            patterns:
              - include: "#embedded-raw"
              - include: "#embedded-stylus"
          - include: $self
      raw-other:
        begin: \s*\b(raw)\b\s*\b([_\p{l}\p{nl}][_\p{l}\p{m}\p{n}]*)\b\s*(?:(:?=)|(:))?\s*
        end: ^(?=\S)|(?!\G)
        name: meta.embedded.other.sa
        beginCaptures:
          1: {name: storage.type.raw.sa}
          2: {name: entity.name.raw.sa}
          3: {name: keyword.operator.assignment.sa}
          4: {name: punctuation.separator.colon.sa}
        patterns:
          - begin: ^((\p{zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.in.sa
            patterns:
              - include: "#embedded-raw"
          - include: $self

name: Isogram
scopeName: source.coffee
fileTypes: [ig, coffee]
patterns: [{include: "#core"}]

information_for_contributors: |
  Isogram is a modern functional, imperative and object-oriented programming language
  with a syntax inspired by Python, and compile(s) to JavaScript and WebAssembly.

  Isogram is additionally inspired by Ruby, Elixir, Clojure, LiveScript, Haskell, OCaml, Go,
  Scala, Flix, Nim, Bash and YAML.

  Should you want to provide a fix or improvement, or even a new feature,
  please create a pull request against this repo: https://github.com/nxltm/isogram
  and I will be very happy to receive them.

  Once accepted, I am happy to receive your request and feedback.

  This document is always under construction, and there's still a couple of things that
  need to be fixed. All this info would be on my Trello which I will be posting very soon.
  I will come back to fix them if I have the time.

comment: |
  To-Do:

  - Add function labels
  - Add keywords for types from SQL
  - Add JSX syntax and more
  - Add grammars for Unicode character entities
    - HTML5, AGL and LaTeX
    - Locale and Unicode script codes
    - Transformation rules

  - Add standard library functions, types, classes, in this order
    - PHP (naming conventions use camelCase only)
    - JavaScript/TypeScript
    - Java/Scala/Flix/Kotlin
    - Swift/C(++) + Objective-C(++)
    - C#/F#/.NET
    - Elixir
    - Perl, Rust, Crystal, Ruby
    - Python
    - Haskell, Elm, PureScript etc

  Done:
  - Standardized modifier and declaration keywords
  - Syntax changed

define:
  number-literal: &number-literal
    1: {name: storage.type.numeric.iso}
    2: {name: punctuation.separator.decimal.period.iso}
    3: {name: constant.numeric.other.separator.iso}
    4: {name: constant.numeric.other.exponent.iso}
    5: {name: constant.numeric.other.density.iso}
    6: {name: storage.type.numeric.iso}

  entity-name: &entity-name |
    (?x)\s*\b
    ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
    \b

  posix-class: &posix-class |
    (?xi)
    \\o|
    \\p(?:
    # POSIX
    alpha|alnum|ascii|blank|cntrl|x?digit
    |graph|lower|print|punct|space|upper|word
    # Extended-POSIX
    |symbol|open|close|dash|link|start|final|math|money
    |number|letter|title|mark|modify
    |bin|qua|sen|oct|dec|doz|hex
    )

repository:
  core:
    patterns:
      - comment: The following are placeholders.
          Will redo embedded HTML and CSS syntax later.
      - include: "#jsx"
      - include: "#clauses"
      - include: "#declarations"
      - include: "#keywords"
      - include: "#comments"
      - include: "#brackets"
      - include: "#punctuation"
      - include: "#type-annotation"
      - include: "#operators"
      - include: "#literals"
      - include: "#support"
      - include: "#calls"
      - include: "#variables"
      - include: "#illegal"

  illegal:
    patterns:
      - match: '\p{N}[\p{L}\p{M}\p{N}_.+-/\\]*?'
        name: invalid.illegal.numeric.other.iso
      - match: '[_\p{L}\p{M}\p{N}]+?'
        name: invalid.illegal.variable.other.iso
      - match: '[({\[)}\]]+?'
        name: invalid.illegal.missing-bracket.iso
      - match: '\S+?'
        name: invalid.illegal.syntax.iso

  illegal-keywords:
    match: |
      \s*\b(
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|pairof|keyof|valueof
      |length|delete|to|til|thru|at|by
      |n?and|x?n?or|not|parallel|series|spawn|discard
      |func?|function|proc|process|macro
      |let|var|val|const|declare
      |class|given|constraint|enum|relation|lattice
      |project|attribute|protocol|member|extend|fragment|interface|struct
      |module|package|namespace|object|record|label
      |raw|data|query|schema|style|trait|friend|alias|type
      |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
      |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |import|export|show|hide|open|close
      |from|where|join|equals?|[io]nto|order
      |take|drop|fold|scan|select|group|use|using
      )\b\s*
    name: invalid.illegal.keyword.iso

  entities:
    patterns:
      - include: "#function-names"
      - include: "#constant-names"
      - include: "#type-names"
      - include: "#variable-names"

  class-names:
    comment: Names for built-in classes
    patterns:
      - comment:

  type-names:
    comment: Names for built-in types
    patterns:
      - comment: Primitive data types
        match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(
          bool|u?int|float|natural|ratio|real|imag|complex|number
          |char|rune|string|symbol|regexp?|function|buffer|binary
          |# numeric types
          ([cifsun]|natural|ratio|u?int|real|imag|complex)
          (8|16|32|64|128)
          |[ci](half|float|double|decimal|octuple)
          )\b
        name: support.type.builtin.primitive.iso
      - comment: Constant/algebraic types
        match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(
          true|false|null|void|nan|infin
          |any|empty|object|record|unit|mixed
          |just|some|none|never|(im)?pure|channel
          )\b
        name: support.type.builtin.iso
      - comment: Data structures
        match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(
          array|tuple|(?:mut)?(?:list|set|map)|dict|function
          |process|sequence|generator|range|stack|heap|queue|tree|trie
          )\b
        name: support.type.primitive.iso
      - comment: Primitive classes
        match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(
          Bool|U?Int|Float|Natural|Ratio|Real|Imag|Complex|Number
          |Char|Rune|String|Symbol|RegExp?|Function|Buffer|Binary
          |# Numeric Types
          ([CIFSUN]|Natural|Ratio|U?Int|Real|Imag|Complex)
          (8|16|32|64|128)
          |[CI](Half|Float|Double|Decimal|Octuple)
          )\b
        name: support.class.builtin.primitive.iso
      - comment: Constant/algebraic classes
        match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(
          True|False|Null|Void|NaN|Infin
          |Any|Empty|Object|Record|Unit|Mixed
          |Just|Some|None|Never|(Im)?pure|Channel
          )\b
        name: support.class.builtin.iso
      - comment: Data structure classes
        match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(
          Array|Tuple|(Mut)?(List|Set|Map)|Dict|Function
          |Process|Sequence|Generator|Range|Stack|Heap|Queue|Tree|Trie
          )\b
        name: support.class.primitive.iso

      - comment: Interface classes | IEnumerable, etc
        match: \s*\bI((\p{Lu}[\w&&\P{Lu}]*)+)\b
        name: entity.name.interface.iso
      - comment: Namespace classes | NSString, etc
        match: \s*\bNS((\p{Lu}[\w&&\P{Lu}]*)+)\b
        name: entity.name.namespace.iso
      - comment: Error classes | BaseError, etc
        match: \s*\b((\p{Lu}[\w&&\P{Lu}]*)+)?(Error|Exception)\b
        name: support.class.error.iso
      - comment: Trait classes | Serializable, Loggable etc
        match: \s*\b((\p{Lu}[\w&&\P{Lu}]*)+)able\b
        name: support.class.trait.iso

  function-names:
    comment: Names for built-in functions (initial dump)
    patterns:
      - comment: isName functions
        match: (?x)\s*\bis(\p{Lu}[\w&&\P{Lu}]*)+\b\s*
        name: support.function.predicate

  constant-names:
    comment: Names for constants, symbols and static properties
    patterns: []

  variable-names:
    comment: Standard Library variable names
    patterns: []

  property-names:
    comment: Standard Library property names
    patterns: []

  literals:
    patterns:
      - include: "#regexps"
      - include: "#strings-unquoted"
      - include: "#strings-quoted"
      - include: "#symbols"
      - include: "#numbers"
      - include: "#constants"

  constants:
    patterns:
      - match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(?:
          (true)|(false)|(null)|(void)|(nan)|(infin)
          )\b\s*
        captures:
          1: {name: constant.language.boolean.true.iso}
          2: {name: constant.language.boolean.false.iso}
          3: {name: constant.language.null.iso}
          4: {name: constant.language.undefined.iso}
          5: {name: constant.language.nan.iso}
          6: {name: constant.language.infinity.iso}
      - match: |
          (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(?:
          (_|params)|(super|this|self|proto|prototype|constructor|target)
          )\b\s*
        captures:
          1: {name: variable.language.arguments.iso}
          2: {name: variable.language.$2.iso}

  numbers:
    patterns:
      - match: (?<=(^|[({\[])\s*\d\w*)\.
        name: punctuation.separator.decimal.period.iso
      - match: (?<=(?:^|[({\[])\s*|\s)\.(?=\d)
        name: punctuation.separator.decimal.period.iso
      - match: |-
          (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{Alnum}+(?:(?:,|_+)?*\p{Alnum}+)*)
          (?:(\.)(?:\p{Alnum}+(?:(?:,|_+)?*\p{Alnum}+)*)?)?
          (?:(\*)\p{Alnum}+(?:(?:,|_+)?*\p{Alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{Alnum}+(?:(?:,|_+)?*\p{Alnum}+)*)?
          (?:(\.)(?:\p{Alnum}+(?:(?:,|_+)?*\p{Alnum}+)*)?)
          (?:(\*)\p{Alnum}+(?:(?:,|_+)?*\p{Alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0b)
          (?:[01]+(?:(?:,|_+)?*[01]+)*)
          (?:(\.)(?:[01]+(?:(?:,|_+)?*[01]+)*)?)?
          (?:(\*)[01]+(?:(?:,|_+)?*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0b)
          (?:[01]+(?:(?:,|_+)?*[01]+)*)?
          (?:(\.)(?:[01]+(?:(?:,|_+)?*[01]+)*)?)
          (?:(\*)[01]+(?:(?:,|_+)?*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)
          (?:(\.)(?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?)?
          (?:(\*)[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (?:(\.)(?:[0-3]+(?:(?:,|_+)?*[0-3]+)*)?)
          (?:(\*)[0-3]+(?:(?:,|_+)?*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)
          (?:(\.)(?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?)?
          (?:(\*)[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (?:(\.)(?:[0-5]+(?:(?:,|_+)?*[0-5]+)*)?)
          (?:(\*)[0-5]+(?:(?:,|_+)?*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)
          (?:(\.)(?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?)?
          (?:(\*)[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (?:(\.)(?:[0-7]+(?:(?:,|_+)?*[0-7]+)*)?)
          (?:(\*)[0-7]+(?:(?:,|_+)?*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)
          (?:(\.)(?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?)?
          (?:(\*)[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (?:(\.)(?:[\dab]+(?:(?:,|_+)?*[\dab]+)*)?)
          (?:(\*)[\dab]+(?:(?:,|_+)?*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0x)
          (?:\h+(?:(?:,|_+)?*\h+)*)
          (?:(\.)(?:\h+(?:(?:,|_+)?*\h+)*)?)?
          (?:(\*)\h+(?:(?:,|_+)?*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (0x)
          (?:\h+(?:(?:,|_+)?*\h+)*)?
          (?:(\.)(?:\h+(?:(?:,|_+)?*\h+)*)?)
          (?:(\*)\h+(?:(?:,|_+)?*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          ()
          (?:\d+(?:(?:,|_+)?*\d+)*)
          (?:(\.)(?:\d+(?:(?:,|_+)?*\d+)*)?)?
          (?:(\*)\d+(?:(?:,|_+)?*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          ()
          (?:\d+(?:(?:,|_+)?*\d+)*)?
          (?:(\.)(?:\d+(?:(?:,|_+)?*\d+)*)?)
          (?:(\*)\d+(?:(?:,|_+)?*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:(?:,|_+)?*\w+)*)
          (?:(\.)(?:\w+(?:(?:,|_+)?*\w+)*)?)?
          (?:(\*)\w+(?:(?:,|_+)?*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}
      - match: |-
          (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:(?:,|_+)?*\w+)*)?
          (?:(\.)(?:\w+(?:(?:,|_+)?*\w+)*)?)
          (?:(\*)\w+(?:(?:,|_+)?*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.iso}
          1: {name: storage.type.numeric.iso}
          2: {name: punctuation.separator.decimal.period.iso}
          3: {name: constant.numeric.other.separator.iso}
          4: {name: constant.numeric.other.exponent.iso}
          5: {name: constant.numeric.other.density.iso}
          6: {name: storage.type.numeric.iso}

  strings-quoted:
    patterns:
      - comment: single quoted raw string
        begin: \s*('{3,})
        contentName: string.quoted.single.iso
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.iso}
        patterns:
          - include: "#embedded-raw"
      - comment: simple single quoted raw string
        begin: \s*(')
        contentName: string.quoted.single.iso
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.iso}
        patterns:
          - match: "''"
            name: constant.character.escape.iso
          - include: "#embedded-raw"
      - comment: double quoted standard string
        begin: \s*("{3,}|")
        contentName: string.quoted.double.iso
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.iso}
        patterns:
          - include: "#string-escapes"

  strings-unquoted:
    patterns:
      - begin: |
          (?x)\s*
          (\\\|)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.literal.iso}
          2: {name: storage.modifier.chomping-indicator.iso}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.iso}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.iso
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{Zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.block.iso
            patterns:
              - include: "#embedded-raw"
              - include: text.html.markdown#inline
          - include: $self
      - begin: |
          (?x)\s*
          (\\\>)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.folded.iso}
          2: {name: storage.modifier.chomping-indicator.iso}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.iso}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.syntax.iso
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{Zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.in.iso
            patterns:
              - include: "#string-escapes"
              - include: text.html.markdown#inline
          - include: $self
      - match: |
          (?x)
          \s*(\\)
          ((?:\\.|[^\s.,:;])+?)
          (?=[({\[)}\]\s.,:;]|$)\s*
        name: string.unquoted.iso
        captures:
          1: {name: punctuation.definition.string.iso}
          2: {patterns: [{include: "#string-escapes"}]}

  string-escapes:
    patterns:
      - match: \\(?=\s*$)
        name: constant.character.escape.newline.iso
      - match: (?i)\\b(?:[01]{1,21}|{[01\s]+?})
        name: constant.character.escape.binary.iso
      - match: (?i)\\q(?:[0-3]{1,11}|{[0-3\s]+?})
        name: constant.character.escape.quaternary.iso
      - match: (?i)\\s(?:[0-5]{1,8}|{[0-5\s]+?})
        name: constant.character.escape.senary.iso
      - match: (?i)\\o(?:[0-7]{1,7}|{[0-7\s]+?})
        name: constant.character.escape.octal.iso
      - match: (?i)\\d?\d{1,7}|\\d{[\d\s]+?}
        name: constant.character.escape.decimal.iso
      - match: (?i)\\z(?:[\dab]{1,6}|{[\s\dab]+?})
        name: constant.character.escape.duodecimal.iso
      - match: (?i)\\x(?:\h{1,6}|{[\h\s]+?})
        name: constant.character.escape.hexadecimal.iso
      - match: (?i)\\u(?:\h{1,6}|{[\h\s]+?})
        name: constant.character.escape.unicode.iso
      - begin: (?i)\\j{
        end: \s*}
        name: constant.character.entity.named.iso
        patterns:
          - include: "#regexp-patterns"
      - match: (?i)\\[abceflnprtvz]
        name: constant.character.escape.iso
      - match: \\[\p{S}\p{P}]
        name: constant.character.escape.symbol.iso
      - match: \\[\p{L}\p{N}\p{Z}\p{c}]
        name: constant.character.escape.illegal.iso
      - include: "#embedded"

  embedded:
    patterns:
      - match: (\$)(\d+)
        captures:
          1: {name: punctuation.section.embedded.iso}
          2: {name: constant.numeric.decimal.iso}
      - match: (%)((['"`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.iso}
          2: {name: storage.type.format.iso}
      - match: |
          (?xi)
          (?#?<!\\)# discard escape prefix
          (\$)# prefix
          (
          [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
          )# variable
        captures:
          1: {name: punctuation.section.embedded.iso}
          2: {patterns: [{include: $self}]}
      - begin: (?#?<!\\)(\${)\s*
        end: (})
        name: entity.quasi.element.iso
        captures:
          1: {name: punctuation.section.embedded.iso}
        patterns:
          - include: $self

  embedded-raw:
    patterns:
      - match: (\$)(\d+)
        captures:
          1: {name: punctuation.section.embedded.iso}
          2: {name: constant.numeric.decimal.iso}
      - match: ([$%]){2}
        name: constant.character.escape.iso
      - match: (%)((['"`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.iso}
          2: {name: storage.type.format.iso}
      - match: |
          (?xi)
          (?<!\$)# discard escape prefix
          (\$)# prefix
          (
          [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
          (?:(?:[?!~]?\.|[?!:]:|->)
          (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
          )# variable
        captures:
          1: {name: punctuation.section.embedded.iso}
          2: {patterns: [{include: $self}]}
      - begin: (?<!\$)(\${)\s*
        end: (})
        name: entity.quasi.element.iso
        captures:
          1: {name: punctuation.section.embedded.iso}
        patterns:
          - include: $self

  symbols:
    match: |
      (?x)
      \s*
      (:)((?:\\.|[^\s.,:;])+?)
      (?=[({\[)}\]\s.,:;]|$)\s*
    name: meta.symbol.iso
    captures:
      1: {name: punctuation.definition.symbol.iso}
      2: {name: constant.other.symbol.iso}

  labels:
    match: |
      (?x)
      (?<=^|[({\[\s,;*+-])\s*

      (?!(?<!(?<!\.)\.|[?!:]:|->)
      \b(?:# don't match keywords
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|pairof|keyof|valueof
      |length|delete|to|til|thru|at|by
      |n?and|x?n?or|not|parallel|series|spawn|discard
      |func?|function|proc|process|macro
      |let|var|val|const|declare
      |class|given|constraint|enum|relation|lattice
      |project|attribute|protocol|member|extend|fragment|interface|struct
      |module|package|namespace|object|record|label
      |raw|data|query|schema|style|trait|friend|alias|type
      |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
      |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |import|export|show|hide|open|close
      |from|where|join|equals?|[io]nto|order
      |take|drop|fold|scan|select|group|use|using
      )\b
      )

      ((?:\w|\\.)(?:\\.|[^\s,:;])*?)
      (?=:\s+)
    name: meta.object-literal.key.iso
    captures:
      1: {name: constant.other.object.key.iso}
      2: {name: punctuation.separator.key-value.iso}

  regexps:
    patterns:
      - begin: (\p{Alnum}*)(`)\s*
        end: \s*(?!\\)(`(?!`))(\p{Alnum}*)
        contentName: string.pattern.regexp.iso
        beginCaptures:
          1: {name: keyword.modifier.iso}
          2: {name: punctuation.section.regexp.begin.iso}
        endCaptures:
          1: {name: punctuation.section.regexp.end.iso}
          2: {name: keyword.other.flag.iso}
        patterns:
          - include: "#comments"
          - include: "#regexp-patterns"
          - begin: (`)(`)\s*\n?
            end: \s*(?=(?!\\)`)
            contentName: string.replace.regexp.iso
            beginCaptures:
              1: {name: punctuation.section.regexp.end.iso}
              2: {name: punctuation.section.regexp.begin.iso}
            patterns:
              - include: "#back-references"
      - begin: |
          (?x)\s*
          (\\\<)\s*
          ([-+*/<=>])?\s*
          (?:(\w+)?\b\s*\b
          (
          \w+\s*
          (?:[+-]\s*
          (?:(?:\w+)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.regexp.iso}
          2: {name: storage.modifier.chomping-indicator.iso}
          3: {name: keyword.modifier.iso}
          4: {name: keyword.other.flag.iso}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.iso
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{Zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.out.iso
            patterns:
              - include: "#regexp-patterns"
          - include: $self

  back-references:
    patterns:
      - match: \$[&+-]
        name: keyword.other.back-reference.iso
      - match: \${2}
        name: constant.character.escape.iso
      - begin: (\$<)
        end: \s*(>)
        name: keyword.other.back-reference.iso
        beginCaptures:
          1: {name: keyword.other.back-reference.iso}
        endCaptures:
          1: {name: keyword.other.back-reference.iso}
        patterns:
          - include: "#variables"
          - include: "#operators"
          - include: "#numbers"
      - include: "#string-escapes"

  regexp-patterns:
    patterns:
      - include: "#embedded"
      - include: "#comments"
      - include: "#strings-quoted"
      - match: \|
        name: keyword.operator.or.iso
      - match: \&
        name: keyword.operator.match.iso
      - match: \!
        name: keyword.operator.disjunction.iso
      - match: \.
        name: constant.character.all.iso
      - match: (?i)\\[by]({\p{Alpha}+})?
        name: keyword.control.anchor.iso
      - match: (?i)(\^|\\<|\\a(?:{\p{Alpha}+})?)|(\$|\\>|\\z(?:{\p{Alpha}+})?)
        captures:
          1: {name: keyword.control.begin.iso}
          2: {name: keyword.control.end.iso}
      - match: (\\\()(?:(\?)|(\+)|(\*))
        captures:
          1: {name: constant.character.escape.other.iso}
          2: {name: keyword.operator.quantifier.lazy.iso}
          3: {name: keyword.operator.quantifier.eager.iso}
          4: {name: keyword.operator.quantifier.greedy.iso}
      - match: \\\d+
        name: keyword.other.back-reference.iso
      - match: \{(\s*\d*\s*(?:,?\s*\d*\s*)*)\}
        name: keyword.operator.quantifier.iso
      - begin: (\\Q)
        contentName: string.quoted.single.iso
        end: (\\E)
        name: string.quoted.raw.iso
        captures:
          1: {name: punctuation.definition.string.iso}
        patterns:
          - include: "#string-escapes"
      - begin: (\\q)
        contentName: string.quoted.double.iso
        end: (\\e)
        name: string.quoted.iso
        captures:
          1: {name: punctuation.definition.string.iso}
        patterns:
          - include: "#embedded-raw"
      - begin: (\\k<)
        end: \s*(>)
        name: keyword.other.back-reference.iso
        beginCaptures:
          1: {name: keyword.other.back-reference.iso}
        endCaptures:
          1: {name: keyword.other.back-reference.iso}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - begin: (\\g<)
        end: \s*(>)
        name: keyword.other.subroutine.iso
        beginCaptures:
          1: {name: keyword.other.subroutine.iso}
        endCaptures:
          1: {name: keyword.other.subroutine.iso}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - include: "#regexp-groups"
      - include: "#regexp-char-set"
      - include: "#regexp-char-class"
      - match: (?i)(?:(\\M)|(\\K)|(\\G)|(\\X))
        captures:
          1: {name: keyword.control.anchor.iso}
          2: {name: keyword.control.keepout.iso}
          3: {name: keyword.control.search.iso}
          4: {name: constant.character.unicode.iso}
      - match: (?<=[^\\][*+?}])(?:(\?)|(\+)|(\*))
        captures:
          1: {name: keyword.operator.modifier.lazy.iso}
          2: {name: keyword.operator.modifier.eager.iso}
          3: {name: keyword.operator.modifier.greedy.iso}
      - match: (\?)|(\+)|(\*)
        captures:
          1: {name: keyword.operator.quantifier.lazy.iso}
          2: {name: keyword.operator.quantifier.eager.iso}
          3: {name: keyword.operator.quantifier.greedy.iso}
      - match: \\.
        name: constant.character.escape.other.iso

    repository:
      regexp-groups:
        patterns:
          - begin: \(([*+])
            end: \s*(\))
            name: constant.other.pcre.iso
            captures:
              0: {name: punctuation.section.expression.iso}
            patterns:
              - include: source.clojure
          - begin: (\()(\?#)
            contentName: comment.block.regexp.iso
            end: \s*(\))
            name: comment.block.regexp.iso
            captures:
              1: {name: punctuation.definition.comment.iso}
            patterns:
              - match: \\.
                name: comment.block.regexp.iso
          - begin: (\(\?=)
            end: \s*(\))
            name: meta.group.look-ahead.iso
            captures:
              1: {name: punctuation.definition.group.look-ahead.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<=)
            end: \s*(\))
            name: meta.group.look-behind.iso
            captures:
              1: {name: punctuation.definition.group.look-behind.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?!)
            end: \s*(\))
            name: meta.group.negative-look-ahead.iso
            captures:
              1: {name: punctuation.definition.group.negative-look-ahead.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<!)
            end: \s*(\))
            name: meta.group.negative-look-behind.iso
            captures:
              1: {name: punctuation.definition.group.negative-look-behind.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?(?:([+-]?\d+?)|(\p{upper}+(?:[+-]\p{upper}+)*)|(\p{Lower}+(?:[+-]\p{Lower}+)*)))\s*(:)?
            end: \s*(\))
            name: meta.group.flag.iso
            captures:
              0: {name: punctuation.definition.group.flag.iso}
              1: {name: punctuation.definition.group.flag.iso}
              2: {name: entity.name.function.method.iso}
              3: {name: keyword.control.recursion.iso}
              4: {name: keyword.other.flag.iso}
              5: {name: punctuation.separator.colon.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?={)
            end: \s*(\))
            name: meta.group.call-out.iso
            captures:
              1: {name: punctuation.definition.group.call-out.iso}
            patterns:
              - begin: (?<=\(\?)({)
                end: \s*(\})([<*>])?(?:(\[)(.*?)(\]))?
                name: punctuation.definition.group.call-out.iso
                captures:
                  1: {name: punctuation.definition.group.call-out.iso}
                  2: {name: keyword.operator.range.iso}
                  3: {name: punctuation.definition.tag.iso}
                  4: {patterns: [{include: "#function-entities"}]}
                  5: {name: punctuation.definition.tag.iso}
                patterns:
                  - include: $self
              - include: "#regexp-patterns"
          - begin: (\(\?>)
            end: \s*(\))
            name: meta.group.atomic.iso
            captures:
              1: {name: punctuation.definition.group.atomic.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?:)
            end: \s*(\))
            name: meta.group.non-capturing.iso
            captures:
              1: {name: punctuation.definition.group.non-capturing.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?=[(|])
            end: \s*(\))
            name: meta.group.branch.iso
            captures:
              1: {name: punctuation.definition.group.branch.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?~)
            end: \s*(\))
            name: meta.group.absent.iso
            captures:
              1: {name: punctuation.definition.group.absent.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: \((\?(?:&)(?:([+-]?\d+)|([_\p{L}\p{Nl}][_\\d\p{L}\p{M}\p{N}]*)|([+-]?\d*)))(:)?
            end: \s*\)
            name: meta.group.back-reference.iso
            captures:
              0: {name: punctuation.definition.group.back-reference.iso}
              1: {name: punctuation.definition.group.back-reference.iso}
              2: {name: entity.name.function.method.iso}
              3: {name: variable.other.iso}
              4: {name: punctuation.separator.colon.iso}
            patterns:
              - include: "#regexp-patterns"
          - begin: \(\?(?=<(?![!=]))
            end: \s*(\))
            name: meta.group.named.iso
            beginCaptures:
              0: {name: punctuation.definition.group.named.iso}
              1: {patterns: [{include: "#variables"}]}
            endCaptures:
              0: {name: punctuation.definition.group.named.iso}
            patterns:
              - begin: (?<=\(\?)(<)
                end: \s*(>)
                name: punctuation.definition.group.named.iso
                beginCaptures:
                  1: {name: punctuation.definition.group.named.iso}
                endCaptures:
                  1: {name: punctuation.definition.group.named.iso}
                patterns:
                  - include: "#variables"
                  - include: "#numbers"
              - include: "#regexp-patterns"
          - begin: \(
            end: \s*\)
            name: meta.group.iso
            captures:
              0: {name: punctuation.definition.group.iso}
            patterns:
              - include: "#regexp-patterns"

      regexp-char-class:
        patterns:
          - match: \\(?=\s*$)
            name: constant.character.escape.newline.iso
          - begin: (?i)\\p{
            end: \s*}
            name: constant.other.character-class.unicode.iso
            patterns:
              - include: "#expression-keywords"
              - include: "#variables"
              - include: "#operators"
          - begin: \\j{
            end: \s*}
            name: constant.character.entity.named.iso
            patterns:
              - include: "#regexp-patterns"
          - match: (?i)\\b(?:[01]{1,21}|{[01\s]+?})
            name: constant.character.escape.binary.iso
          - match: (?i)\\q(?:[0-3]{1,11}|{[0-3\s]+?})
            name: constant.character.escape.quaternary.iso
          - match: (?i)\\s(?:[0-5]{1,8}|{[0-5\s]+?})
            name: constant.character.escape.senary.iso
          - match: (?i)\\o(?:[0-7]{1,7}|{[0-7\s]+?})
            name: constant.character.escape.octal.iso
          - match: (?i)\\d?\d{1,7}|\\d{[\d\s]+?}
            name: constant.character.escape.decimal.iso
          - match: (?i)\\z(?:[\dab]{1,6}|{[\s\dab]+?})
            name: constant.character.escape.duodecimal.iso
          - match: (?i)\\x(?:\h{1,6}|{[\h\s]+?})
            name: constant.character.escape.hexadecimal.iso
          - match: (?i)\\u(?:\h{1,6}|{[\h\s]+?})
            name: constant.character.escape.unicode.iso
          - match: (?i:\\[cm][a-z])|\\R
            name: constant.character.control.iso
          - match: *posix-class
            name: constant.other.character-class.posix.iso
          - match: (?i:\\p(c[cfos]?|l[lmotu]?|m[cen]?|n[dlo]?|p[c-fios]?|s[ckmo]?|z[lps]))
            name: constant.other.character-class.unicode.iso
          - match: (?i)\\[ci]
            name: constant.other.character-class.xml.iso
          - match: \.|\\[dhlns-w]
            name: constant.other.character-class.iso
          - match: \\[DHLNS-W]
            name: constant.other.character-class.negated.iso
          - match: (?i)\\n{[\w\s]+}
            name: constant.character.escape.unicode.name.iso
          - match: (?i)\\[abceflnprtvz]
            name: constant.character.escape.iso
          - match: \\[\p{S}\p{P}]
            name: constant.character.escape.symbol.iso
          - match: \\\p{Z}
            name: constant.character.escape.symbol.iso
          - match: \\[\p{L}\p{N}\p{Z}\p{c}]
            name: constant.character.escape.illegal.iso
          - include: "#embedded"

      regexp-char-ops:
        patterns:
          - match: \.
            name: constant.other.character-class.range.iso
          - match: (?<!\|)\|\|(?!\|)
            name: keyword.operator.union.iso
          - match: (?<!&)&&(?!&)
            name: keyword.operator.intersection.iso
          - match: (?<!\^)\^\^(?!\^)
            name: keyword.operator.symmetric.iso
          - match: (?<!~)~~(?!~)
            name: keyword.operator.negation.iso
          - match: (?<!-)--(?!-)
            name: keyword.operator.difference.iso
          - match: (?<!\\?[\\\[])-(?![-\[\]])
            name: keyword.operator.range.iso
          - match: \\.
            name: constant.character.escape.other.iso

      regexp-char-set:
        patterns:
          - begin: (\[=)
            end: \s*(\])
            name: constant.other.character-class.posix.iso
            captures:
              1: {name: punctuation.definition.character-class.posix.iso}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\.)
            end: \s*(\])
            name: constant.other.character-class.posix.iso
            captures:
              1: {name: punctuation.definition.character-class.posix.iso}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[:)
            end: \s*(\])
            name: constant.other.character-class.posix.iso
            captures:
              1: {name: punctuation.definition.character-class.posix.iso}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\^)
            end: \s*(\])
            name: constant.other.character-class.negated.iso
            captures:
              1: {name: punctuation.definition.character-class.negated.iso}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"
          - begin: (\[)
            end: \s*(\])
            name: constant.other.character-class.iso
            captures:
              1: {name: punctuation.definition.character-class.iso}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"

  jsx:
    comment: Avoid < operator expressions as best we can using Zertosh's regex
    patterns:
      - begin: (?=<[_\p{L}\p{Nl}])
        end: (?=.)
        applyEndPatternLast: 1
        patterns:
          - include: "#tag-element-name"
    repository:
      tag-element-name:
        patterns:
          - comment: JSX Fragment
            name: meta.tag.iso
            contentName: meta.tag.iso
            begin: \s*+(<)\s*(?=>)
            end: (?<=</)(>)
            beginCaptures:
              1: {name: punctuation.definition.tag.iso}
            endCaptures:
              1: {name: punctuation.definition.tag.iso}
            patterns:
              - include: "#tag-termination"
          - comment: "Tags that end > are trapped in #tag-termination"
            name: meta.tag.iso
            contentName: meta.tag.iso
            begin: |
              (?x)\s*+(<)([_\p{L}\p{Nl}][^\s,;'"`\\</>]*)(?=[\/>\s])(?![:])(?<!\.|:)
            end: \s*(?<=</)(\2)(>)|(/>)|((?<=</)\O*?)>
            beginCaptures:
              1: {name: punctuation.definition.tag.iso}
              2:
                patterns: &tag-names
                  - include: "#type-names"
                  - include: "#custom-types"
                  - include: "#function-entities"
                  - include: "#operators"
            endCaptures:
              1: {patterns: *tag-names}
              2: {name: punctuation.definition.tag.iso}
              3: {name: punctuation.definition.tag.iso}
              4: {name: invalid.illegal.termination.iso}
            patterns:
              - include: "#tag-termination"
              - include: "#tag-attributes"
      tag-termination:
        comment: uses non consuming search for </ in </tag>
        contentName: meta.jsx.children.iso
        name: meta.jsx.children.iso
        begin: (>)
        end: (</)
        captures:
          0: {name: punctuation.definition.tag.iso}
        patterns:
          - include: "#evaluated-code"
          - include: "#entities"
          - include: "#tag-element-name"
          - include: "#string-escapes"
          - include: markdown.math.block
          - include: text.html.markdown#inline
      attribute-expression:
        begin: \(
        end: \)
        captures:
          0: {name: punctuation.section.embedded.iso}
        patterns:
          - include: $self
      tag-attributes:
        patterns:
          - include: source.yaml#flow-collection
          - include: "#tag-element-name"
          - include: "#evaluated-code"
          - include: "#attribute-name"
          - include: "#spread-attribute"
          - include: "#attribute-expression"
          - include: "#strings-unquoted"
          - include: "#strings-quoted"
          - include: "#numbers"
          - include: "#regexps"
          - include: "#comments"
      spread-attribute:
        comment: Spread attribute { ... AssignmentExpression }
        match: (?<!\*)\*(?!\*)
        name: keyword.operator.spread.iso
      attribute-name:
        patterns:
          - comment: Style attribute
            begin: (?<!\S)(style)(=)?({)
            end: \s*(})\s*
            beginCaptures:
              1: {name: entity.other.attribute-name.iso}
              2: {name: punctuation.separator.key-value.iso}
              3: {name: punctuation.section.embedded.iso}
            endCaptures:
              1: {name: punctuation.section.embedded.iso}
            patterns:
              - include: source.css.scss#flow_control
              - include: source.css.scss#rules
              - include: source.css.scss#properties
              - include: source.css.scss
          - comment: Attribute names
            match: (?<=[)\]}])(=)?((?:\w|\\.)(?:\\.|[^\s</>])*)?\s*
            captures:
              1: {name: punctuation.separator.key-value.iso}
              2:
                name: string.unquoted.html.iso
                patterns:
                  - include: "#string-escapes"
                  - include: source.yaml#flow-scalar-plain-out-implicit-type
          - comment: Attribute names
            match: (?<!\S)([_\p{L}\p{Nl}][^\s,;'"`\\/<=>]*)(=)?((?:\w|\\.)(?:\\.|[^\s</>])*)?\s*
            captures:
              1: {name: entity.other.attribute-name.iso}
              2: {name: punctuation.separator.key-value.iso}
              3:
                name: string.unquoted.html.iso
                patterns:
                  - include: "#string-escapes"
                  - include: source.yaml#flow-scalar-plain-out-implicit-type
      evaluated-code:
        begin: "{"
        end: "}"
        captures:
          0: {name: punctuation.section.embedded.iso}
        patterns:
          - include: "#spread-attribute"
          - include: $self
      entities:
        patterns:
          - include: text.xml#entity
          - comment: Entity with & and invalid name
            match: "&\\s*+;"
            name: invalid.illegal.bad-ampersand.iso

  jsdoc:
    patterns:
      - include: "#jsdoc-inline-tags"
      - include: "#jsdoc-access"
      - include: "#jsdoc-as-namepath"
      - include: "#jsdoc-simple"
      - include: "#jsdoc-simple-namepath"
      - include: "#jsdoc-module"
      - include: "#jsdoc-type-name"
      - include: "#jsdoc-type-noname"
      - comment: additional jsdoc V2 keywords
        match: (?<!\w)@(add|api|body|codeend|codestart|demo|download|group|hide|iframe|image|inherits|option|outline|page|parent|signature|tag)\b
        name: storage.type.class.jsdoc
      - comment: additional jsdoc keywords
        match:
          (?<!\w)@(accessor|alternateClassName|aside|cfg|chainable|docauthor|evented|experimental|ftype|hide|inheritable|localdoc|markdown|mixins|new|override|preventable|ptype|removed|scss
          mixin|singleton|template|uses|xtype)\b
        name: storage.type.class.jsdoc

    repository:
      jsdoc-access:
        comment: "@tag protected...."
        match: (@(access))\s*(private|protected|public)?(?=\s|$)
        captures:
          1: {name: storage.type.class.jsdoc}
          3: {name: storage.modifier.jsdoc}
      jsdoc-module:
        comment: "@tag {optional type} module:file"
        begin: (@(exports|module|listens|requires)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(\S*)([\S\s]*))
        end: ^|(?=\*/)|(?=\5$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
          - match: (?:(module)(:))?(((?!\*/)\S)+)
            captures:
              1: {name: keyword.module.jsdoc}
              2: {name: punctuation.jsdoc}
              3: {name: string.modulename.jsdoc}
      jsdoc-as-namepath:
        comment: to terminate the block
        begin: (@(borrows|lends)\b)\s*(?=(?!\*/)\S+(?:(?:\s*\bas\b\s*(?!\*/)\S+)?)?([\S\s]*))
        end: ^|(?=\*/)|(?=\3$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-namepath-scopes"
      jsdoc-simple:
        comment: "@tag"
        match: (@(abstract|author|classdesc|copyright|default|defaultvalue|deprecated|description|desc|example|external|fileoverview|file|global|host|ignore|inheritdoc|inner|instance|license|override|overview|readonly|see|since|static|summary|todo|tutorial|virtual|variation|version)\b)(?=$|\s)
        captures:
          1: {name: storage.type.class.jsdoc}
      jsdoc-simple-namepath:
        comment: "@tag {opt type} Class#xxx or Class#Event:aaaa etc"
        begin: (@(alias|augments|callback|extends|emits|event|fires|interface|memberof|mixes|name|property|prop|this|typedef)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*\S*([\S*\s]*))
        end: ^|(?=\*/)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
          - include: "#jsdoc-namepath-scopes"
      jsdoc-type-name:
        comment: "@tag {optional type} name"
        begin: (@(arg|argument|class|constant|constructor|constructs|const|function|func|kind|member|method|mixin|namespace|param|var)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(((\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\S)+)?([\S\s]*))
        end: ^|(?=\*/)|(?=\7$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
          - include: "#jsdoc-name-scopes"
      jsdoc-type-noname:
        comment: "@tag {types}"
        begin: (@(enum|exception|implements|private|protected|public|returns|return|throws|type)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*([\S\s]*))
        end: ^|(?=\*/)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
      jsdoc-inline-tags:
        name: meta.tag.inline.jsdoc
        begin: (\[(?:(?>[^\[\]]+)|\g<-1>)*\])?({)(?=@)
        end: (})
        beginCaptures:
          1: {name: string.linktext.jsdoc}
          2: {name: meta.brace.curly.jsdoc}
        endCaptures:
          1: {name: meta.brace.curly.jsdoc}
        patterns:
          - match: (@(link|tutorial))\b([^}]*)
            captures:
              1: {name: storage.type.class.jsdoc}
              3: {name: string.jsdoc}
      jsdoc-typedef-scopes:
        name: entity.name.type.instance.jsdoc
        begin: "{"
        end: "}|^"
        captures:
          0: {name: meta.brace.curly.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-primitives"
          - include: "#jsdoc-namepath-scopes"
          - include: "#jsdoc-typedef-obj"
      jsdoc-typedef-primitives:
        match: \b(null|undefined|boolean|string|number)\b
        captures:
          1: {name: support.type.builtin.primitive.jsdoc}
      jsdoc-typedef-obj:
        comment: typedef object
        begin: "{"
        end: "}|^"
        captures:
          0: {name: meta.brace.curly.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-primitives"
          - match: \b([$_A-Za-z][$_A-Za-z0-9]*)\s*(:)
            captures:
              1: {name: variable.other.readwrite.jsdoc}
          - include: "#jsdoc-namepath-scopes"
          - include: "#jsdoc-typedef-obj"
      jsdoc-name-scopes:
        patterns:
          - match: ((?!\*/)[\S&&[^\[\]"']])+
            captures:
              0: {name: variable.other.jsdoc}
          - name: variable.other.jsdoc
            begin: \[
            end: \]|^
            patterns:
              - include: "#jsdoc-string"
              - include: "#jsdoc-name-scopes"
      jsdoc-namepath-scopes:
        patterns:
          - match: \s*\b(as)\b\s*(?=[$_A-Za-z])
            captures:
              1: {name: keyword.as.jsdoc}
          - match: \s*(?:([A-Z][$_A-Za-z0-9]*)|([$_A-Za-z][$_A-Za-z0-9]*))(?=[\s\-~.#]|$)
            captures:
              1: {name: entity.name.class.jsdoc}
              2: {name: entity.name.function.jsdoc}
          - match: (\.)([$_A-Za-z][$_A-Za-z0-9]*)(?=\s|$|\")
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: entity.name.function.method.static.jsdoc}
          - match: (\#)([$_A-Za-z][$_A-Za-z0-9]*)(?=\s|$|\")
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: entity.name.function.method.instance.jsdoc}
          - match: (~|-)([$_A-Za-z][$_A-Za-z0-9]*)(?=\s|$|\")
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: entity.name.function.method.inner.jsdoc}
          - match: (\#)(event)(:)
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: keyword.event.jsdoc}
              3: {name: keyword.operator.jsdoc}
          - name: string.method.jsdoc
            begin: \.(?="|')
            end: (?=.)
            applyEndPatternLast: 1
            patterns:
              - include: "#jsdoc-string"
      jsdoc-string:
        name: string.jsdoc
        match: "\"(\\\\\"|[^\"])*\"|'(\\\\'|[^'])*'"

  comments:
    patterns:
      - begin: \s*((/\+))
        end: (\s*(\+/))
        name: comment.block.inline.iso
        captures:
          1: {name: comment.block.inline.iso}
          2: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-inline"
      - begin: \s*((/\*\*))
        end: (\s*(\*\*/))
        name: comment.block.documentation.iso
        captures:
          1: {name: comment.block.documentation.iso}
          2: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#jsdoc"
          - include: "#markdown-inline"
          - include: "#nested-document-block"
      - begin: \s*((/\*))
        end: (\s*(\*/))
        name: comment.block.iso
        captures:
          1: {name: comment.block.iso}
          2: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-block"
      - begin: ((^\s*)|\s*)((//=))
        end: \s*$
        name: comment.line.special.iso
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.iso}
          3: {name: comment.line.special.iso}
          4: {name: punctuation.definition.comment.iso}
        endCaptures:
          1: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#comment-special"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((//\+))
        end: \s*$
        name: comment.line.playground.iso
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.iso}
          3: {name: comment.line.playground.iso}
          4: {name: punctuation.definition.comment.iso}
        endCaptures:
          0: {name: comment.line.playground.iso}
        patterns:
          - include: "#jsdoc"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((///))
        end: \s*$
        name: comment.line.documentation.iso
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.iso}
          3: {name: comment.line.documentation.iso}
          4: {name: punctuation.definition.comment.iso}
        endCaptures:
          0: {name: comment.line.documentation.iso}
        patterns:
          - include: "#jsdoc"
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((//!|#!))
        end: \s*$
        name: comment.line.shebang.iso
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.iso}
          3: {name: comment.line.shebang.iso}
          4: {name: punctuation.definition.comment.iso}
        endCaptures:
          0: {name: comment.line.shebang.iso}
        patterns:
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((//\*))
        end: \s*$
        name: comment.line.doctype.iso
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.iso}
          3: {name: comment.line.doctype.iso}
          4: {name: punctuation.definition.comment.iso}
        endCaptures:
          0: {name: comment.line.doctype.iso}
        patterns:
          - include: "#markdown-inline"
      - begin: ((^\s*)|\s*)((//))
        end: \s*$
        name: comment.line.number-sign.iso
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.iso}
          3: {name: comment.line.double-slash.iso}
          4: {name: punctuation.definition.comment.iso}
        endCaptures:
          0: {name: comment.line.number-sign.iso}
        patterns:
          - include: "#markdown-inline"

    repository:
      markdown-inline:
        patterns:
          - include: text.html.markdown#inline
      nested-block:
        begin: (/\*)\s*
        end: \s*(\*/)
        captures:
          1: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#jsdoc"
          - include: "#markdown-inline"
          - include: "#nested-block"
      nested-document-block:
        begin: (/\*\*?)\s*
        end: \s*(\*/)
        captures:
          1: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#jsdoc"
          - include: "#markdown-inline"
          - include: "#nested-document-block"
      nested-inline:
        begin: (/\+)\s*
        end: \s*(\+/)
        name: comment.block.inline.iso
        captures:
          1: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#markdown-inline"
          - include: "#nested-inline"
      nested-special:
        begin: (/\+)\s*
        end: \s*(\+/)
        captures:
          1: {name: punctuation.definition.comment.iso}
        patterns:
          - include: "#jsdoc"
          - include: "#markdown-inline"
          - include: "#nested-special"

  calls:
    patterns:
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!(?<!(?<!\.)\.|[?!:]:|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |func?|function|proc|process|macro
          |let|var|val|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
          )
          \b\s+
          (?=
          (?!(?<!(?<!\.)\.|[?!:]:|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |func?|function|proc|process|macro
          |let|var|val|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [_\p{L}\p{M}\p{N}]+|\[(?!<)|<\|(?!>)(?=\|*)|<\+(?!>)(?=\+*))
        captures:
          1: {patterns: [{include: "#function-entities"}]}
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!(?<!(?<!\.)\.|[?!:]:|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |func?|function|proc|process|macro
          |let|var|val|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
          )
          \b
          (?=
          !(?:\.=?)?\s*|
          \s+[\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*

          (?!(?<!(?<!\.)\.|[?!:]:|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |func?|function|proc|process|macro
          |let|var|val|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|defer|refer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )

          [_\p{L}\p{M}\p{N}]+|\[<|
          (?:[!?~]?\.=?|[?!:]:=?|->)?\s*\(|
          (?:[!?~]?\.=?|[?!:]:=?|->)?\s+['"`\\\[]
          )
        captures:
          1: {patterns: [{include: "#function-entities"}]}

  function-entities:
    patterns:
      - match: |
          (?x)\b(?:
          (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
          (?:# Properties (note all properties are by default, symbols)
          (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
          ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
          ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
          ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
          )

          |
          (?:# Objects and maps
          (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
          ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
          ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
          ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
          )
          (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

          |
          (?:# Regular variables
          (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
          ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
          ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
          ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
          )
          )\b
        captures:
          1: {name: entity.name.tag.iso}
          2: {name: entity.name.tag.iso support.class.component.iso}
          3: {name: entity.name.class.builtin.iso}
          4: {name: entity.name.function.method.iso}
          5: {name: variable.other.global.iso}
          6: {name: variable.other.constant.object.iso}
          7: {name: variable.other.conditional.iso}
          8: {name: variable.other.object.iso}
          9: {name: entity.name.function.tagged-template.iso}
          10: {name: entity.name.type.iso}
          11: {name: entity.name.class.iso}
          12: {name: entity.name.function.iso}
      - include: $self

  variables:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int
      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
      ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
      ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
      ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
      )

      |
      (?:# Objects and maps
      (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
      ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
      ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
      ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

      |
      (?:# Regular variables
      (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
      ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
      ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
      ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
      )
      )
      \b\s*
    captures:
      1: {name: variable.other.index.iso}
      2: {name: variable.other.constant.property.iso}
      3: {name: variable.other.property.static.iso}
      4: {name: variable.other.property.iso}
      5: {name: variable.other.global.iso}
      6: {name: variable.other.constant.object.iso}
      7: {name: variable.other.conditional.iso}
      8: {name: variable.other.object.iso}
      9: {name: variable.other.dollar.iso}
      10: {name: variable.other.constant.iso}
      11: {name: variable.other.class.iso}
      12: {name: variable.other.readwrite.iso}

  operators:
    patterns:
      - include: "#special-operators"
      - include: "#unary-ops"
      - include: "#binary-ops"

    repository:
      binary-ops-builtin:
        patterns:
          - comment: augmented assignment += -= *= /= etc
            match: (?<=^|['"`\\({\[\s])([\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+(?<![!:~.<=>])=)(?=$|['"`\\\s)}\]])
            name: keyword.operator.assignment.augmented.iso

          - comment: |
              1: assignment : :=
              2: arithmetic + - * ** *** / // /// % %% *> <*
              3: increment/decrement ++ --
              4: logical && || ^^ !& !| !^ &| &!
              5: bitwise & | ^ ~
              6: bitwise shift << >> <<< >>>
              7: function pipeline <| |> <|| ||>
              8: function composition +> <+ <++ +>>
              9: class <: :> :< >: <:< >:> <:> >:< <! !> !< >! <!< >!> <!> >!<
              10: relational < > <= >=
              11: regex =< <> </ /> <$ $> <$> <+> <*> </> <$> $
              12: equality == != === !==
              13: wavy operators ~> <~ ~~> <~~
              14: fat arrow-like => ==> <==
              15: skinny arrow-like -> --> <- <--
              16: null-coalescing ??
              17: non-null coalescing !!
              18: compact ternary operator ?:
              19: inverse ternary operator !:
              20: infix function call $:

              1: augmented assignment += -= *= /= etc
              22: custom bitwise (& | ^ ~)
              22: custom arithmetic (+ - * / %)
              23: custom accessor (: .)
              24: custom equality (= !)
              25: custom comparison (< >)
              26: custom private (? #)
              27: custom mathematical (Unicode Sm)
              28: custom currency (Unicode Sc)
              29: custom ASCII (between \x80 and \xff)
              30: custom infix operators (all other chars)
            captures:
              1: {name: keyword.operator.assignment.iso}
              2: {name: keyword.operator.arithmetic.iso}
              3: {name: keyword.operator.successor.iso}
              4: {name: keyword.operator.logical.iso}
              5: {name: keyword.operator.bitwise.iso}
              6: {name: keyword.operator.bitwise.shift.iso}
              7: {name: keyword.operator.pipeline.iso}
              8: {name: keyword.operator.compose.iso}
              9: {name: keyword.operator.class.iso}
              10: {name: keyword.operator.relational.iso}
              11: {name: keyword.operator.regexp.iso}
              12: {name: keyword.operator.comparison.iso}
              13: {name: keyword.operator.similarity.iso}
              14: {name: keyword.operator.arrow.fat.iso}
              15: {name: keyword.operator.arrow.skinny.iso}
              16: {name: keyword.operator.null-coalescing.iso}
              17: {name: keyword.operator.coalescing.iso}
              18: {name: keyword.operator.conditional.iso}
              19: {name: keyword.operator.ternary.iso}
              20: {name: keyword.operator.macro.dollar.iso}
            match: |
              (?x)
              (?<=^|['"`\\({\[\s])# spacing

              (?:
              (:?=)#1
              |([+-]|\*{1,3}|~?/|%%?|\#\#?|<?\*>?)#2
              |(\+\+|--)#3
              |([&|^~]{2})#4
              |([&|^~])#5
              |(<<<?|>>>?)#6
              |(\|{1,3}>|<\|{1,3})#7
              |(\+>|<\+)#8
              |([<>]?[!:][<>]?)#9
              |([<>]=?)#10
              |(<>|=<|<?[/*+$]>?)#11
              |([!=]==?)#12
              |(~>|<~|~~>|<~~)#13
              |(<==|==?>)#14
              |(--?>|<--?)#15
              |(\?\?)#16
              |(!!)#17
              |(\?:)#18
              |(!:)#19
              |(\$:)#20
              )

              (?=$|['"`\\\s)}\]])

          - comment: custom bitwise (leading &|^ ~)
            match: (?<=^|['"`\\({\[\s])([&|^~][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.bitwise.iso
          - comment: custom arithmetic (leading + - * / %)
            match: (?<=^|['"`\\({\[\s])([+\-*/%][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.arithmetic.iso
          - comment: "custom accessor (leading : .)"
            match: (?<=^|['"`\\({\[\s])([:.][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.prototype.iso
          - comment: custom equality (leading = !)
            match: (?<=^|['"`\\({\[\s])([!=][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.comparison.iso
          - comment: custom comparison (leading < >)
            match: (?<=^|['"`\\({\[\s])([<>][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.relational.iso
          - comment: custom optional (leading ?)
            match: (?<=^|['"`\\({\[\s])(\?[\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.private.iso
          - comment: custom mathematical (leading Unicode category Sm)
            match: (?<=^|['"`\\({\[\s])([\p{Sm}&&[\x{80}-\x{10ffff}]][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*)(?=$|['"`\\\s)}\]])
            name: keyword.operator.math.iso
          - comment: custom currency-based (leading Unicode category Sc)
            match: (?<=^|['"`\\({\[\s])([\p{Sc}&&[^$]][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*)(?=$|['"`\\\s)}\]])
            name: keyword.operator.currency.iso
          - comment: custom ASCII (leading Unicode 0x80 to 0xFF)
            match: (?<=^|['"`\\({\[\s])([\p{S}\p{Po}\p{Pd}\p{Pi}\p{Pf}\p{Pc}&&[\x{80}-\x{ff}]][\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*)(?=$|['"`\\\s)}\]])
            name: keyword.operator.ascii.iso
          - comment: other custom (leading anything not covered above)
            match: (?<=^|['"`\\({\[\s])([\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
            name: keyword.operator.infix.iso

      binary-ops:
        match: (?<=^|['"`\\\s({\[])([\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]+)(?=$|['"`\\\s)}\]])
        captures:
          0: {patterns: [{include: "#binary-ops-builtin"}]}

      unary-ops:
        patterns:
          - &transfix-operators
            comment: transfix binary operators
            match: |
              (?x)(?<=\b|^|[)}\]'"`\\\s])
              (?:([>.]\.[.<])|(\?\.=?)|(~\.=?)|(!\.=?)|((?:::|\.)=?)|(->))
              (?=\b|$|[({\['"`\\\s])
            captures:
              1: {name: keyword.operator.range.iso}
              2: {name: punctuation.accessor.optional.iso}
              3: {name: punctuation.accessor.cascade.iso}
              4: {name: punctuation.accessor.call.iso}
              5: {name: punctuation.accessor.iso}
              6: {name: punctuation.accessor.module.iso}

          - &prefix-operators
            comment: prefix operators
            match: |
              (?x)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |(\#)#14
              |[\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]])#15
              (?=[\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*
              [\p{L}\p{M}\p{N}({\[_,;'"`])
            name: keyword.operator.prefix.iso
            captures:
              1: {name: keyword.operator.module.all.iso}
              2: {name: keyword.operator.increment.iso}
              3: {name: keyword.operator.decrement.iso}
              4: {name: keyword.operator.intersection.iso}
              5: {name: keyword.operator.union.iso}
              6: {name: keyword.operator.symmetric.iso}
              7: {name: keyword.operator.logical.iso}
              8: {name: keyword.operator.private.iso}
              9: {name: keyword.operator.decorator.iso}
              10: {name: keyword.operator.bitwise.not.iso}
              11: {name: keyword.operator.existential.iso}
              12: {name: keyword.operator.assignment.iso}
              13: {name: keyword.operator.pipeline.iso}
              14: {name: keyword.operator.private.iso}
              15: {name: keyword.operator.prefix.iso}

          - &suffix-operators
            comment: suffix operators
            match: |
              (?x)
              (?<=[\p{L}\p{M}\p{N})}\]_,;'"`]
              [\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |(\#)#14
              |[\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]])#15
            name: keyword.operator.suffix.iso
            captures:
              1: {name: keyword.operator.module.all.iso}
              2: {name: keyword.operator.increment.iso}
              3: {name: keyword.operator.decrement.iso}
              4: {name: keyword.operator.intersection.iso}
              5: {name: keyword.operator.union.iso}
              6: {name: keyword.operator.symmetric.iso}
              7: {name: punctuation.accessor.call.iso}
              8: {name: keyword.operator.private.iso}
              9: {name: keyword.operator.decorator.iso}
              10: {name: keyword.operator.bitwise.iso}
              11: {name: punctuation.accessor.optional.iso}
              12: {name: keyword.operator.assignment.iso}
              13: {name: keyword.operator.pipeline.iso}
              14: {name: keyword.operator.private.iso}
              15: {name: keyword.operator.suffix.iso}

      pipeline-operator:
        patterns:
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*(?:(\++>)|(\|+>))(?=\s*(
              [\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*# prefix

              (?!(?<!(?<!\.)\.|[?!:]:|->)
              \b(?:# don't match keywords
              in|of|as|is|new|infer|unset
              |typeof|nameof|sizeof|pairof|keyof|valueof
              |length|delete|to|til|thru|at|by
              |n?and|x?n?or|not|parallel|series|spawn|discard
              |func?|function|proc|process|macro
              |let|var|val|const|declare
              |class|given|constraint|enum|relation|lattice
              |project|attribute|protocol|member|extend|fragment|interface|struct
              |module|package|namespace|object|record|label
              |raw|data|query|schema|style|trait|friend|alias|type
              |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
              |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
              |switch|case|fail|default|match|when|pass|fallthru
              |try|retry|throw|raise|catch|rescue|finally
              |with|ref|defer|refer|show|hide|enter|exit
              |then|begin|end|debug|check|assert
              |break|continue|halt|skip|fixed|lock
              |(?:return|give|await|yield|throw|raise)s?
              |import|export|show|hide|open|close
              |from|where|join|equals?|[io]nto|order
              |take|drop|fold|scan|select|group|use|using
              )\b
              )

              [_\p{L}\p{M}\p{N}]+
              (?:[\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*# transfix
              [_\p{L}\p{M}\p{N}]+)*
              [\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]*# suffix
              )\s*([^(]|$|;))
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.compose.iso}
              2: {name: keyword.operator.pipeline.iso}
            patterns:
              - match: |
                  (?x)\s*\b

                  (?!(?<!(?<!\.)\.|[?!:]:|->)
                  \b(?:# don't match keywords
                  in|of|as|is|new|infer|unset
                  |typeof|nameof|sizeof|pairof|keyof|valueof
                  |length|delete|to|til|thru|at|by
                  |n?and|x?n?or|not|parallel|series|spawn|discard
                  |func?|function|proc|process|macro
                  |let|var|val|const|declare
                  |class|given|constraint|enum|relation|lattice
                  |project|attribute|protocol|member|extend|fragment|interface|struct
                  |module|package|namespace|object|record|label
                  |raw|data|query|schema|style|trait|friend|alias|type
                  |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
                  |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
                  |switch|case|fail|default|match|when|pass|fallthru
                  |try|retry|throw|raise|catch|rescue|finally
                  |with|ref|defer|refer|show|hide|enter|exit
                  |then|begin|end|debug|check|assert
                  |break|continue|halt|skip|fixed|lock
                  |(?:return|give|await|yield|throw|raise)s?
                  |import|export|show|hide|open|close
                  |from|where|join|equals?|[io]nto|order
                  |take|drop|fold|scan|select|group|use|using
                  )\b
                  )

                  (?:
                  (?:# Objects and maps
                  (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
                  ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
                  ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
                  ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
                  )
                  (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

                  |
                  (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
                  (?:# Properties (note all properties are by default, symbols)
                  (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
                  ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
                  ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
                  ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
                  )

                  |
                  (?:# Regular variables
                  (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
                  ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
                  ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
                  ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
                  )
                  )\b
                captures:
                  1: {name: variable.other.global.iso}
                  2: {name: variable.other.constant.object.iso}
                  3: {name: variable.other.conditional.iso}
                  4: {name: variable.other.object.iso}
                  5: {name: entity.name.tag.iso}
                  6: {name: entity.name.tag.iso support.class.component.iso}
                  7: {name: entity.name.class.builtin.iso}
                  8: {name: entity.name.function.method.iso}
                  9: {name: entity.name.function.tagged-template.iso}
                  10: {name: entity.name.type.iso}
                  11: {name: entity.name.class.iso}
                  12: {name: entity.name.function.iso}
              - *transfix-operators

      special-operators:
        patterns:
          - include: "#pipeline-operator"
          - begin: (?<=\s)(\?)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.conditional.iso}
            patterns:
              - begin: \s*(?=([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\!)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.ternary.iso}
            patterns:
              - begin: \s*(?=([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\$)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.macro.dollar.iso}
            patterns:
              - begin: \s*(?=([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s*:)
                end: \s*(?=:\s|$)
                name: entity.name.function.iso
              - include: $self

  custom-types:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int

      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?!(?<!(?<!\.)\.|[?!:]:|->)
      \b(?:# don't match keywords
      new|unset|length|delete|to|til|thru|at|by
      |n?and|x?n?or|not|parallel|series|spawn|discard
      |func?|function|proc|process|macro
      |let|var|val|const|declare
      |class|given|constraint|enum|relation|lattice
      |project|attribute|protocol|member|extend|fragment|interface|struct
      |module|package|namespace|object|record|label
      |raw|data|query|schema|style|trait|friend|alias|type
      |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
      |for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|defer|refer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |import|export|show|hide|open|close
      |from|where|join|equals?|[io]nto|order
      |take|drop|fold|scan|select|group|use|using
      )\b
      )

      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
      ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
      ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
      ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
      )

      |
      (?:# Objects and maps
      (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
      ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
      ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
      ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)

      |
      (?:# Regular variables
      (_+[\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*(?!_+)|[\p{L}\p{Nl}][\p{L}\p{M}\p{N}]*_+)|
      ([\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)|
      ((?:[_\p{Lu}\p{Lt}\p{Lo}\p{Nl}]+[_\p{Ll}\p{M}\p{N}]*)+)|
      ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
      )
      )\b
    captures: &custom-types
      1: {name: entity.name.module.iso}
      2: {name: entity.name.tag.iso}
      3: {name: entity.name.namespace.iso}
      4: {name: entity.name.interface.iso}
      5: {name: entity.name.tag.block.iso}
      6: {name: entity.name.tag.script.iso}
      7: {name: entity.name.tag.style.iso}
      8: {name: entity.name.tag.inline.iso}
      9: {name: entity.name.label.iso}
      10: {name: entity.name.project.iso}
      11: {name: entity.name.class.iso}
      12: {name: entity.name.type.iso}

  type-brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

    repository:
      curly-brackets: &type-curly-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.mapping.iso
              - match: (?<!\s):(?!:)
                name: punctuation.separator.key-value.iso
              - match: (?<=^|[({\[])\s*([*+-](?:\s+[*+-])*)
                name: punctuation.definition.block.sequence.item.saga

        patterns:
          - begin: \s*(\{\|)
            end: \s*(\|\})
            captures:
              1: {name: punctuation.definition.mapping.iso}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\{)
            end: \s*(\})
            captures:
              1: {name: punctuation.definition.dictionary.iso}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      round-brackets: &type-round-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.arguments.iso
        patterns:
          - begin: \s*(\(\|)
            end: \s*(\|\))
            captures:
              1: {name: punctuation.definition.parameters.iso}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.iso}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      square-brackets: &type-square-brackets
        repository:
          punctuation:
            patterns:
              - match: (?<=\b|^|[)}\]'"`\\\s])(:)(?=\b|$|[({\['"`\\\s])
                captures:
                  1: {name: punctuation.separator.slice.iso}
              - match: ","
                name: punctuation.separator.sequence.iso
        patterns:
          - begin: \s*(\[<)
            end: \s*(>\])
            captures:
              1: {name: punctuation.definition.typeparameters.iso}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[\|)
            end: \s*(\|\])
            captures:
              1: {name: punctuation.definition.sequence.iso}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[)
            end: \s*(\])
            captures:
              1: {name: punctuation.definition.array.iso}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

  type-keywords:
    patterns:
      - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(extends|implements)\b\s*
        name: storage.type.$1.iso
      - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(typeof|nameof|sizeof|keyof|valueof|pairof|infer|in|of|as|is)\b\s*
        name: keyword.operator.expression.$1.iso

  type-operators:
    patterns:
      - comment: transfix binary operators
        match: |
          (?x)(?<=^|[)}\]_\p{L}\p{M}\p{N}'"`])
          (?:(\?[:.])|(~[:.])|(![:.])|(::|\.)|(->))
          (?=$|[({\[_\p{L}\p{M}\p{N}'"`])
        captures:
          1: {name: punctuation.accessor.optional.iso}
          2: {name: punctuation.accessor.cascade.iso}
          3: {name: punctuation.accessor.call.iso}
          4: {name: punctuation.accessor.iso}
          5: {name: punctuation.accessor.module.iso}

      - comment: type operators
        match: |
          (?x)\s*
          (?:
          (\+)|
          (\-)|
          (\*)|
          (\/)|
          (\%)|
          (\!)|
          (\?)|
          (\&)|
          (\|)|
          (\^)|
          (\~)|
          (\$)|
          (\#)|
          ([<>])
          )
          (?=$|[({\[_\p{L}\p{M}\p{N}'"\s])
        captures:
          1: {name: keyword.operator.sum.iso}
          2: {name: keyword.operator.difference.iso}
          3: {name: keyword.operator.product.iso}
          4: {name: keyword.operator.quotient.iso}
          5: {name: keyword.operator.remainder.iso}
          6: {name: keyword.operator.only.iso}
          7: {name: keyword.operator.maybe.iso}
          8: {name: keyword.operator.intersection.iso}
          9: {name: keyword.operator.union.iso}
          10: {name: keyword.operator.symmetric.iso}
          11: {name: keyword.operator.negation.iso}
          12: {name: keyword.operator.macro.dollar.iso}
          13: {name: keyword.operator.private.iso}
          14: {name: keyword.operator.class.iso}

  type-annotation:
    applyEndPatternLast: 1
    begin: (:)(?=\s|$)
    end: (?=\O)|$
    beginCaptures:
      1: {name: punctuation.definition.annotation.iso}
    patterns:
      - include: "#types"

  types:
    patterns:
      - match: \s*(=>|==>|->|-->|~>|~~>)
        name: keyword.operator.type.function.iso
      - match: \s*(<=|<==|<-|<--|<~|<~~)
        name: keyword.operator.type.channel.iso
      - include: "#type-keywords"
      - include: "#modifier-keywords"
      - include: "#type-names"
      - include: "#custom-types"
      - include: "#type-brackets"
      - include: "#type-operators"
      - include: "#literals"

  modifier-keywords:
    match: |
      (?x)
      ((?:
      \s*(?:
      (?:# Access modifiers
      public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
      |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
      # Function or method modifiers
      |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
      |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
      |# Function or method modifiers
      (?:pre|in|post|suf|af|trans|interface)fix|
      (?:u|bi|ter|)nary|oper
      |# Decorators
      @(?:
      [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
      (?:(?:[?!~]?\.|[?!:]:|->)
      (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
      )
      )
      )
      \s*)*)
      (?=\s*\b
      (?:
      func?|function|proc|process|macro
      |let|va[rl]|const
      |class|extend
      |given|constraint
      |enum|relation|lattice
      |project
      |fragment|struct
      |interface|schema
      |module|package|lattice
      |namespace
      |object|record
      |raw
      |data|query
      |style
      |trait
      |type|alias
      |declare
      |do|redo
      )\b
      )
    captures:
      1:
        patterns: &modifier-keywords
          - match: |
              (?x)\s*@(?:
              [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
              )\s*
            name: entity.name.class.decorator.iso
          - match: |
              (?x)\s*
              \s*\b
              (?:
              (# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              )|
              (# Function or method modifiers
              [gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              )|
              (# Property modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              )
              )\b\s*
            captures:
              1: {name: storage.modifier.iso}
              2: {name: storage.type.accessor.iso}
              3: {name: storage.type.property.iso}

  support:
    patterns:
      - comment: Python
      - include: source.python#builtin-functions
      - include: source.python#builtin-types
      - include: source.python#magic-function-names
      - include: source.python#magic-variable-names

      - comment: PHP
      - include: source.php#support
      - include: source.php#class-builtin
      - include: "#support-php"

      - comment: JavaScript
      - include: source.js#support-objects
      - include: "#support-js"

      - comment: Swift
      - include: source.swift#builtin-properties
      - include: source.swift#builtin-types
      - include: source.swift#builtin-functions

      - comment: Other

  declaration-keywords:
    comment: clause keywords
    match: |
      (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(?:
      (func?|function|proc|process|macro)# function
      |(let|va[rl]|const)# variable
      |(class|extend)# class
      |(given|constraint)# constraint
      |(enum|relation)# enumeration
      |(project|attribute)# project
      |(fragment|struct)# fragment
      |(interface|schema)# interface
      |(module|package)# module
      |(namespace|lattice)# function
      |(object|record)# object
      |(raw)# markup
      |(data|query)# indented GraphQL
      |(style)# inline CSS
      |(trait|friend)# trait
      |(type|alias)# type alias
      |(declare)# declaration
      )\b\s*
    captures:
      1: {name: storage.type.function.iso}
      2: {name: storage.type.iso}
      3: {name: storage.type.class.iso}
      4: {name: storage.type.constraint.iso}
      5: {name: storage.type.enum.iso}
      6: {name: storage.type.project.iso}
      7: {name: storage.type.fragment.iso}
      8: {name: storage.type.interface.iso}
      9: {name: storage.type.module.iso}
      10: {name: storage.type.namespace.iso}
      11: {name: storage.type.object.iso}
      12: {name: storage.type.raw.iso}
      13: {name: storage.type.schema.iso}
      14: {name: storage.type.style.iso}
      15: {name: storage.type.trait.iso}
      16: {name: keyword.other.typedef.iso}
      17: {name: keyword.other.declare.iso}

  general-keywords:
    comment: general keywords
    match: |
      (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(?:
      (if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard)#1
      |(for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat)#2
      |(switch|case|fail|default|fallthru)#3
      |(match|when|pass)#4
      |(try|retry|throw|raise|catch|rescue|finally)#5
      |(with)#6
      |(ref|[dr]efer|show|hide|enter|exit)#7
      |(then)#8
      |(debug|check|assert)#9
      |(break|continue|halt|skip|return|give|label|await|yield|throw|raise|yield\b\s+\bfrom)# 10
      |((?:im|ex)port|show|hide)# 11
      |(parallel|series|spawn|discard)#12
      |(do|redo)#13
      |(begin|end)#14
      )\b\s*
    captures:
      1: {name: keyword.control.conditional.iso}
      2: {name: keyword.control.loop.iso}
      3: {name: keyword.control.switch.iso}
      4: {name: keyword.control.match.iso}
      5: {name: keyword.control.error.iso}
      6: {name: keyword.control.with.iso}
      7: {name: keyword.control.iso}
      8: {name: keyword.control.then.iso}
      9: {name: keyword.other.$10.iso}
      10: {name: keyword.control.flow.iso}
      11: {name: keyword.control.module.iso}
      12: {name: keyword.control.thread.iso}
      13: {name: keyword.control.do.iso}
      14: {name: keyword.control.$14.iso}

  expression-keywords:
    comment: expression keywords
    match: |
      (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(?:
      (in|of|as|is|new|infer
      |typeof|nameof|sizeof|keyof|pairof|valueof)
      |(length)|(delete)|(to|til|thru|at|by)|(unset)
      |(n?and|x?n?or|not)
      )\b\s*
    captures:
      1: {name: keyword.operator.expression.$1.iso}
      2: {name: keyword.operator.expression.length.iso}
      3: {name: keyword.operator.expression.delete.iso}
      4: {name: keyword.operator.expression.range.iso}
      5: {name: keyword.operator.expression.void.iso}
      6: {name: keyword.operator.expression.logical.iso}

  keywords:
    patterns:
      - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(let|va[rl]|const)\b\s*
        name: storage.type.iso
      - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(declare)\b\s*
        name: keyword.other.$1.iso
      - include: "#modifier-keywords"
      - include: "#declaration-keywords"
      - include: "#expression-keywords"
      - include: "#general-keywords"
      - include: "#query-expression"
      - include: "#module-expression"
      - include: "#control-expression"

    repository:
      control-expression:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(halt|skip|break|continue|goto|label)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.flow.iso}
        patterns:
          - match: \s*([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s*
            captures:
              1: {name: constant.other.label.iso}

      module-expression:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(import|export|open|close|use|using)\b\s*
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.module.iso}
        patterns:
          - include: "#modifier-keywords"
          - include: "#type-keywords"
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(from|to|as|all|any|show|hide|to|n?and|x?n?or|not)\b\s*
            name: keyword.control.module.iso
          - match: \s*\*
            name: keyword.operator.module.all.iso
          - include: "#module-string"
          - include: "#type-names"
          - include: "#custom-types"
          - include: "#types"
          - include: "#operators"
          - include: "#punctuation"
        repository:
          module-string:
            patterns:
              - comment: single quoted raw string
                begin: \s*('{3,})
                contentName: string.quoted.template.iso
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.iso}
                patterns:
                  - include: "#embedded-raw"
              - comment: simple single quoted raw string
                begin: \s*(')
                contentName: string.quoted.template.iso
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.iso}
                patterns:
                  - match: "''"
                    name: constant.character.escape.iso
                  - include: "#embedded-raw"
              - comment: double quoted standard string
                begin: \s*("{3,}|")
                contentName: string.quoted.module.iso
                end: \s*((\1)(?!\1))
                captures:
                  1: {name: punctuation.definition.string.iso}
                patterns:
                  - include: "#string-escapes"

      query-expression:
        patterns:
          - begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(from)\b\s*
            end: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.iso}
            patterns:
              - include: $self
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b((\b(fold|scan)\b)\s*(\b(left|right)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.iso
          - begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(group)\b\s*
            end: \s*\b(by)\b\s*
            captures:
              1: {name: keyword.query.iso}
            patterns:
              - include: $self
          - begin: (?x)\s*\b(join)\b\s*
            end: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.iso}
            patterns:
              - include: $self
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(equals?|[io]nto)\b\s*
            name: keyword.query.iso
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b((\b(order)\b)\s*(\b((a|de)sc)\b)?\s*(\b(by)\b)?)\b\s*
            name: keyword.query.iso
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(select)\b\s*
            name: keyword.query.iso
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b((\b(take|drop)\b)\s*(\b(left|right|init|head|tail|last)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.iso
          - match: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(where)\b\s*
            name: keyword.query.iso

  parameter-brackets:
    begin: \s*(\()
    end: \s*(\))
    captures:
      1: {name: punctuation.definition.parameters.iso}
    patterns: &function-params
      - include: "#clauses"
      - include: "#keywords"
      - match: (?i)\s*\?[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*\b\s*
        name: variable.parameter.optional.iso
      - match: (?i)\s*\*[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*\b\s*
        name: variable.parameter.spread.iso
      - match: (?i)\s*[&~][_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*\b\s*
        name: variable.parameter.name.iso
      - match: (?i)\s*\%[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*\b\s*
        name: variable.parameter.reference.iso
      - match: (?i)\s*\$[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*\b\s*
        name: variable.parameter.other.iso
      - match: (?i)\s*\b[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*\b\s*
        name: variable.parameter.iso
      - include: "$self"

  block-entities:
    repository:
      type-square-brackets: *type-square-brackets
      type-round-brackets: *type-round-brackets
      type-curly-brackets: *type-curly-brackets

    patterns:
      - include: "#definition-keywords"
      - include: "#code-block"
      - include: "#type-keywords"
      - include: "#illegal-keywords"
      - include: "#type-square-brackets"
      - include: "#parameter-brackets"
      - include: "#round-brackets"
      - include: "#type-annotation"
      - match: \s*(?<!\*)\*(?!\*)\s*
        name: keyword.generator.asterisk.iso
      - include: "#operators"
      - applyEndPatternLast: 1
        begin: \s*(:)(?:(?=::)|(?![\p{S}\p{P}&&[^_,;'"`\\({\[)}\]]]))
        end: (?=\O)|$
        beginCaptures:
          1: {name: punctuation.definition.annotation.iso}
        patterns:
          - include: "#types"

  declarations:
    patterns:
      - include: "#function"
      - include: "#raw"
      - include: "#schema"
      - include: "#style"
      - include: "#class"
      - include: "#enum"
      - include: "#interface"
      - include: "#trait"
      - include: "#fragment"
      - include: "#module"
      - include: "#namespace"
      - include: "#object"
      - include: "#constraint"
      - include: "#project"
      - include: "#protocol"

    repository:
      class:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(class|extend)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.class.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.class.iso
      constraint:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(given|constraint)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.constraint.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.constraint.iso
      enum:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(enum|relation)\b\s*
        end: (?<=})|(?=;)|$
        name: meta.enum.declaration.iso
        beginCaptures:
          1: {name: storage.type.enum.iso}
          2: {name: entity.name.enum.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.enum.iso
      fragment:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(fragment|struct)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.fragment.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.fragment.iso
      function:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(func?|function|proc|process|macro)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.function.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.function.iso
      interface:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(interface|schema)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.interface.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.interface.iso
      module:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(module|package)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.module.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.module.iso
      namespace:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(namespace|lattice)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.namespace.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.namespace.iso
      object:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(object|record)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.object.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.object.iso
      protocol:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(protocol|member)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.protocol.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.protocol.iso
      project:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(project|attribute)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.protocol.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.project.iso
      raw:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(raw)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.raw.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.raw.iso
      schema:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(data|query)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.schema.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.schema.iso
      style:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(style)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.style.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.style.iso
      trait:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(trait|friend)\b\s*
        end: (?<=})|(?=;)|$
        beginCaptures:
          1: {name: storage.type.trait.iso}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.trait.iso

  clauses:
    patterns:
      - include: "#arguments-clause"
      - include: "#for-clause"
      - include: "#if-clause"
      - include: "#switch-clause"
      - include: "#match-clause"
      - include: "#catch-clause"
      - include: "#with-clause"
      - include: "#thread-clause"
      - include: "#do-clause"
      - include: "#when-clause"
      - include: "#case-clause"
      - include: "#type-clause"
      - include: "#new-clause"
      - include: "#method-clause"
      - include: "#function-clause"

    repository:
      function-params:
        patterns: *function-params

      arguments-clause:
        patterns:
          - begin: |
              (?x)
              (?<=(?:[({\[]\|?|\b(?:#keywords
              (?:re)?do|equals?|[io]nto|select|where
              |(?:\b(?:fold|scan)\b)\s*(?:\b(?:left|right)\b)?\s*(?:\b(?:by|while|until|with)\b)?
              |(?:\b(?:take|drop)\b)\s*(?:\b(?:left|right|init|head|tail|last)\b)?\s*(?:\b(?:by|while|until|with)\b)?
              )\b)\s*)
              (\|)
              (?!\|)
            captures:
              1: {name: punctuation.separator.arguments.iso}
            end: (?<!\|)(\|)(?!\|)
            patterns:
              - include: "#function-params"

      pattern-brackets:
        begin: \s*(\()
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.parameters.iso}
        patterns:
          - include: "#function-params"

      method-clause:
        patterns:
          - begin: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s+
              ([?:]?=)\s+
              (

              (?:(?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
              )
              )\s*\b)*

              )\s*
              (\|)
              (?!\|)
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1: {name: entity.name.function.method.iso}
              2: {name: keyword.operator.assignment.iso}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.iso}
            endCaptures:
              1: {name: punctuation.separator.arguments.iso}
            patterns:
              - include: "#function-params"
          - comment: |
              Method def before function keyword
              x = def()
            match: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s+
              ([?:]?=)\s+

              ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s+
              ([?:]?=)\s+

              ((?:
              \s*(?:
              (?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              func?|function|proc|process|macro
              )\b
              )
            captures:
              1: {name: entity.name.function.method.iso}
              2: {name: keyword.operator.assignment.iso}
              3: {patterns: *modifier-keywords}

      function-clause:
        patterns:
          - begin: |
              (?x)\s*
              ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s+
              ([?:]?=)\s+
              (

              (?:(?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
              )
              )\s*\b)*

              )\s*
              (\|)
              (?!\|)
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1: {name: entity.name.function.iso}
              2: {name: keyword.operator.assignment.iso}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.iso}
            endCaptures:
              1: {name: punctuation.separator.arguments.iso}
            patterns:
              - include: "#function-params"
          - comment: |
              Function def before function keyword
              x = def()
            match: |
              (?x)\s*
              ([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)\s+
              ([?:]?=)\s+

              ((?:
              \s*(?:
              (?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*
              (?:(?:[?!~]?\.|[?!:]:|->)
              (?:(?:[_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              func?|function|proc|process|macro
              )\b
              )
            captures:
              1: {name: entity.name.function.iso}
              2: {name: keyword.operator.assignment.iso}
              3: {patterns: *modifier-keywords}

      new-clause:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(new)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.operator.expression.$1.iso}
        patterns:
          - match: \s*([_\p{L}\p{Nl}][_\p{L}\p{M}\p{N}]*)
            name: entity.name.instance.iso
          - include: "#block-entities"

      type-clause:
        patterns:
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(as|is)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.expression.$1.iso}
            patterns:
              - include: "#types"
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(type|alias)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.other.typedef.iso}
            patterns:
              - match: \s*([?:]?=)\s*
                captures:
                  1: {name: keyword.operator.assignment.iso}
              - include: "#types"
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b((?:return|give|await|yield|throw|raise)s)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.modifier.iso}
            patterns:
              - include: "#types"

      case-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(case|fail|default)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        beginCaptures:
          1: {name: keyword.control.switch.iso}
        patterns:
          - include: "#code-block"
          - include: $self

      catch-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(try|retry|catch|rescue|finally)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.catch.iso
        beginCaptures:
          1: {name: keyword.control.error.iso}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.iso}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.error.iso
              - include: "#code-block"
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.error.iso
          - include: "#code-block"
          - include: $self

      thread-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(parallel|series|spawn|discard|fixed|lock)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.thread.iso
        beginCaptures:
          1: {name: keyword.control.thread.iso}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.iso}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.thread.iso
              - include: "#code-block"
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.thread.iso
          - include: "#code-block"
          - include: $self

      do-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(do|redo)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.do.iso
        beginCaptures:
          1: {name: keyword.control.do.iso}
        patterns:
          - include: "#code-block"
          - include: $self

      for-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(for|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.for.iso
        beginCaptures:
          1: {name: keyword.control.loop.iso}
        patterns:
          - &for-clause-keywords
            match: \s*\b(in|of|to|til|thru|at|by)\b
            name: keyword.control.loop.iso
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.iso}
            patterns:
              - *for-clause-keywords
              - include: "#code-block"
              - include: $self
          - include: "#code-block"
          - include: $self

      if-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.if.iso
        beginCaptures:
          1: {name: keyword.control.conditional.iso}
        patterns:
          - include: "#code-block"
          - include: $self

      match-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(match)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.match.iso
        beginCaptures:
          1: {name: keyword.control.match.iso}
        patterns:
          - include: "#code-block"
          - include: $self

      switch-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(switch)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.switch.iso
        beginCaptures:
          1: {name: keyword.control.switch.iso}
        patterns:
          - include: "#code-block"
          - include: $self

      when-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(when)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        beginCaptures:
          1: {name: keyword.control.match.iso}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.iso}
            patterns:
              - include: "#type-operators"
              - include: "#code-block"
              - include: $self
          - include: "#type-operators"
          - include: "#code-block"
          - include: $self

      with-clause:
        begin: (?x)\s*(?<!(?<!\.)\.|[?!:]:|->)\b(with)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?<!\.)\.|[?!:]:|->)\bthen\b)|$)
        name: meta.with.iso
        beginCaptures:
          1: {name: keyword.control.with.iso}
        patterns:
          - &with-clause-keywords
            match: \s*\b(as)\b
            name: keyword.control.with.iso
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.iso}
            patterns:
              - *with-clause-keywords
              - include: "#code-block"
              - include: $self
          - include: "#code-block"
          - include: $self

  punctuation:
    patterns:
      - include: "#line-continuation"
      - include: "#comma"
      - include: "#right-arrow"
      - include: "#semicolon"
      - include: "#double-semi"

    repository:
      line-continuation:
        match: (\\)\s*(?=#|$)
        captures:
          1: {name: punctuation.separator.continuation.line.iso}
      comma:
        match: \s*(,)
        captures:
          1: {name: punctuation.separator.comma.iso}
      right-arrow:
        match: (?:^|['"`\\({\[\s]*)(->)(?:$|['"`\\\s)}\]])
        captures:
          1: {name: punctuation.definition.arrow.iso}
      double-semi:
        match: \s*(;;)
        captures:
          1: {name: punctuation.terminator.statement.iso}
      semicolon:
        match: \s*(;)(?!;)
        captures:
          1: {name: punctuation.terminator.expression.iso}

  brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

  code-block:
    patterns:
      - begin: (\{\|)\s*
        end: \s*(\|\})
        captures:
          1: {name: punctuation.definition.function.iso}
        patterns:
          - include: $self
      - begin: (\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.block.iso}
        patterns:
          - include: $self

  curly-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.mapping.iso
          - match: (?<!\s):(?!:)
            name: punctuation.separator.key-value.iso
          - match: (?<=^|[({\[])\s*([*+-](?:\s+[*+-])*)
            name: punctuation.definition.block.sequence.item.saga

    patterns:
      - begin: (\{\|)\s*
        end: \s*(\|\})
        captures:
          1: {name: punctuation.definition.mapping.iso}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self
      - begin: (\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.dictionary.iso}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self

  round-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.arguments.iso

    patterns:
      - begin: (\(\|)\s*
        end: \s*(\|\))
        captures:
          1: {name: punctuation.definition.parameters.iso}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.expression.iso}
        patterns:
          - include: "#punctuation"
          - include: $self

  square-brackets:
    repository:
      punctuation:
        patterns:
          - match: (?<=\b|^|[)}\]'"`\\\s])(:)(?=\b|$|[({\['"`\\\s])
            captures:
              1: {name: punctuation.separator.slice.iso}
          - match: ","
            name: punctuation.separator.sequence.iso

    patterns:
      - begin: (\[<)\s*
        end: \s*(>\])
        captures:
          1: {name: punctuation.definition.typeparameters.iso}
        patterns:
          - include: "#types"
          - include: $self
      - begin: (\[\|)\s*
        end: \s*(\|\])
        captures:
          1: {name: punctuation.definition.sequence.iso}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\[)\s*
        end: \s*(\])
        captures:
          1: {name: punctuation.definition.array.iso}
        patterns:
          - include: "#punctuation"
          - include: $self

  support-js:
    patterns:
      - begin: \s*+\b(WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|String|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|Number|NaN|Math|Map|JSON|InternalError|Int8Array|Int32Array|Int16Array|Infinity|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.class.builtin.js}
        patterns:
          - include: "#round-brackets"
      - begin: \s*+\b((SIMD)((\.)(Uint8x16|Uint32x4|Uint16x8|Int8x16|Int32x4|Int16x8|Float64x2|Float32x4|Bool8x16|Bool64x2|Bool32x4|Bool16x8))?)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          2: {name: support.class.builtin.js}
          4: {name: keyword.operator.accessor.js}
          5: {name: support.class.builtin.js}
        patterns:
          - include: "#round-brackets"
      - begin: \s*+\b((Intl)((\.)(NumberFormat|DateTimeFormat|Collator))?)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          2: {name: support.class.builtin.js}
          4: {name: keyword.operator.accessor.js}
          5: {name: support.class.builtin.js}
        patterns:
          - include: "#round-brackets"
      - begin: (?<!\.)\s*+\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.function.js}
        patterns:
          - include: "#round-brackets"
      - begin: (?<=\.)\s*+(shift|sort|splice|unshift|pop|push|reverse)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.function.mutator.js}
        patterns:
          - include: "#round-brackets"
      - begin: (?<!\.)\s*+\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.class.error.js}
        patterns:
          - include: "#round-brackets"
      - match: (?<!\.)\s*+\b(debugger)\b
        captures:
          1: {name: keyword.other.js}
      - match: (?<!\.)\s*+\b(document|window)\b
        captures:
          1: {name: support.type.object.dom.js}
      - match: \s*+\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b
        captures:
          1: {name: support.constant.dom.js}
      - begin: (?<!\.)\s*+\b(Console)(?:(\.)(warn|info|log|error|time|timeEnd|assert))?\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.type.object.console.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.function.console.js}
        patterns:
          - include: "#round-brackets"
      - match: (?<!\.)\s*+\b(Process)(?:(\.)(stdout|stderr|stdin|argv|execPath|execArgv|env|exitCode|version|versions|config|pid|title|arch|platform|mainModule))?\b
        captures:
          1: {name: support.type.object.process.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.type.object.process.js}
      - begin: (?<!\.)\s*+\b(Process)(?:(\.)(abort|chdir|cwd|exit|getgid|setgid|getuid|setuid|setgroups|getgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.type.object.process.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.function.process.js}
        patterns:
          - include: "#round-brackets"
      - match: (((?<!\.)\s*+\bModule\.((?<!\,)exports|id|require|parent|filename|loaded|children)|exports))\b
        captures:
          1: {name: support.type.object.module.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.type.object.module.js}
      - match: (?<!\.)\s*+\b(global|GLOBAL|root|__dirname|__filename)\b
        captures:
          1: {name: support.type.object.node.js}
      - begin: \s*+\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.class.node.js}
        patterns:
          - include: "#round-brackets"

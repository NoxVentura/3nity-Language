name: Sombra
scopeName: source.coffee
fileTypes: [so, sombra, coffee]
patterns: [include: "#core"]

information_for_contributors: |
  Sombra is a modern programming language inspired by JavaScript and compiles to JavaScript.
  It's got a great type system, a huge standard library and a unique combination of powerful features 
  that support object-oriented, imperative, and functional programming.

  Should you want to provide a fix or improvement, a new grammar feature, or even some constructive 
  feedback, head to my repo and make a pull request: https://github.com/nxltm/sombra-lang
  and I will be very happy to receive them.

  This document is always under construction, and there's still a couple of things that
  need to be fixed. All this info would be on my Trello which I will be posting very soon.
  I will come back to fix them if I have the time.

  Some parts such as numeric literals, HTML character entities and more are partially or entirely generated 
  through code by means of compressed tries and DFA minimization.

comment: |
  To-Do:

  - Add function labels (map keys)
  - Add keywords for types from SQL
  - Add grammars for Unicode character entities
    - HTML5, AGL and LaTeX
    - Locale and Unicode script codes
    - Transformation rules

  - Add standard library functions, types, classes,
    modules, properties, variables in this order:
    - JavaScript/TypeScript
    - Swift
    - Java, Scala, Kotlin, Flix
    - Haskell, OCaml
    - Go, Rust
    - R
    - Python (names, methods, etc), Perl, Ruby, Lua
    - C, Objective C(++)
    - PHP (needs a bit of cleanup)

  Done:
  - Standardized modifier and declaration keywords
  - Syntax changed, mirrors C# now.
  - Oniguruma uses \w to refer to _\d\p{L}\p{M}, use character
    set operations && and ^ to perform set subtractions
  - Added extended JSX syntax (might still need some modifications)

define:
  number-literal: &number-literal
    1: {name: storage.type.numeric.so}
    2: {name: punctuation.separator.decimal.period.so}
    3: {name: constant.numeric.other.separator.so}
    4: {name: constant.numeric.other.exponent.so}
    5: {name: constant.numeric.other.density.so}
    6: {name: storage.type.numeric.so}

  entity-name: &entity-name |
    (?x)\s*\b
    (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
    \b(?:# don't match keywords
    in|of|as|is|new|infer|unset
    |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
    |length|delete|to|til|thru|at|by
    |n?and|x?n?or|not|parallel|series|spawn|discard
    |def|func?|function|proc|process|macro
    |let|va[rl]|const|declare
    |class|given|constraint|enum|relation|lattice
    |project|attribute|protocol|member|extend|fragment|interface|struct
    |module|package|namespace|object|record|label
    |raw|data|query|schema|style|component|element|trait|friend|alias|type
    |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
    |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
    |switch|case|fail|default|match|when|pass|fallthru
    |try|retry|throw|raise|catch|rescue|finally
    |with|ref|[dr]efer|show|hide|enter|exit
    |then|begin|end|debug|check|assert
    |break|continue|halt|skip|fixed|lock
    |(?:return|give|await|yield|throw|raise)s?
    |import|export|show|hide|open|close
    |from|where|join|equals?|[io]nto|order
    |take|drop|fold|scan|select|group|use|using
    )\b
    )
    ([\p{Pc}\p{L}]\w*)
    \b

  posix-class: &posix-class |
    (?xi)
    \\o|
    \\p(?:
    # POSIX
    alpha|alnum|ascii|blank|cntrl|x?digit
    |graph|lower|print|punct|space|upper|word
    # Extended-POSIX
    |symbol|open|close|dash|link|start|final|math|money
    |number|letter|title|mark|modify
    |bin|qua|sen|oct|dec|doz|hex
    )

repository:
  core:
    patterns:
      - comment: The following are placeholders.
          Will redo embedded HTML and CSS syntax later.
      - include: "#jsx"
      - include: "#clauses"
      - include: "#declarations"
      - include: "#keywords"
      - include: "#comments"
      - include: "#brackets"
      - include: "#punctuation"
      - include: "#type-annotation"
      - include: "#literals"
      - include: "#entities"
      - include: "#support"
      - include: "#calls"
      - include: "#variables"
      - include: "#operators"
      - include: "#illegal"

  illegal:
    patterns:
      - match: '\p{N}[\w.+-/\\]*?'
        name: invalid.illegal.numeric.other.so
      - match: '[\w]+?'
        name: invalid.illegal.variable.other.so
      - match: '[({\[)}\]]+?'
        name: invalid.illegal.missing-bracket.so
      - match: '\S+?'
        name: invalid.illegal.syntax.so

  illegal-keywords:
    match: |
      \s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
      in|of|as|is|new|infer|unset
      |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
      |length|delete|to|til|thru|at|by
      |n?and|x?n?or|not|parallel|series|spawn|discard
      |def|func?|function|proc|process|macro
      |let|va[rl]|const|declare
      |class|given|constraint|enum|relation|lattice
      |project|attribute|protocol|member|extend|fragment|interface|struct
      |module|package|namespace|object|record|label
      |raw|data|query|schema|style|component|element|trait|friend|alias|type
      |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
      |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|[dr]efer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |import|export|show|hide|open|close
      |from|where|join|equals?|[io]nto|order
      |take|drop|fold|scan|select|group|use|using
      )\b\s*
    name: invalid.illegal.keyword.so

  unicode-named-chars:
    comment: Support for the Unicode Named Character encoding, inspired
      by LaTeX, HTML, AGL, Unicode and regular expressions.
    repository:
      latex:
      unicode-scripts:
        patterns:
          - begin: (\(@)\s*(\w+(?:[\p{Pc}-]\w+)*)\s*(:)?
            end: \s*(\))
            name: meta.group.locale.so
            captures:
              1: {name: punctuation.definition.group.flag.so}
              3: {name: punctuation.separator.colon.so}
              2:
                patterns:
                  - match: (?i)\b(((yue[\p{Pc}-]Hant|zh[\p{Pc}-]Han[st])[\p{Pc}-]H|pa[\p{Pc}-]Arab[\p{Pc}-]P|ur[\p{Pc}-]P|ta[\p{Pc}-]L|s(k[\p{Pc}-]S|i[\p{Pc}-]L)|mk[\p{Pc}-]M|en[\p{Pc}-]H)K|(tzm[\p{Pc}-]Latn[\p{Pc}-]M|s(hi[\p{Pc}-](Tfng|Latn)[\p{Pc}-]M|r[\p{Pc}-](Latn|Cyrl)[\p{Pc}-]B)|naq[\p{Pc}-]N|zu[\p{Pc}-]Z|uk[\p{Pc}-]U|ru[\p{Pc}-]U|en[\p{Pc}-]C|bs[\p{Pc}-]B)A|ha[\p{Pc}-]Latn[\p{Pc}-]N[EG]|(uz[\p{Pc}-]Arab[\p{Pc}-]A|sg[\p{Pc}-]C|ps[\p{Pc}-]A)F|(sr[\p{Pc}-](Latn|Cyrl)[\p{Pc}-]R|haw[\p{Pc}-]U|is[\p{Pc}-]I)S|(zh[\p{Pc}-]Hans[\p{Pc}-]C|(pa[\p{Pc}-]Guru|k(ok|n)|te|or|m[lr]|hi|gu)[\p{Pc}-]I|vi[\p{Pc}-]V|ur[\p{Pc}-]I|ta[\p{Pc}-]I|ne[\p{Pc}-]I|ms[\p{Pc}-]B|ii[\p{Pc}-]C|f[fr][\p{Pc}-]S|es[\p{Pc}-]H|b(o[\p{Pc}-][CI]|n[\p{Pc}-]I))N|(zh[\p{Pc}-]Hant[\p{Pc}-]T|rw[\p{Pc}-]R|pt[\p{Pc}-]G|sn[\p{Pc}-]Z|nd[\p{Pc}-]Z)W|(zh[\p{Pc}-]Han[st][\p{Pc}-]M|to[\p{Pc}-]T|so[\p{Pc}-]S|ro[\p{Pc}-]R|n[bn][\p{Pc}-]N|fo[\p{Pc}-]F|es[\p{Pc}-][BD])O|(zh[\p{Pc}-]Hans[\p{Pc}-]S|teo[\p{Pc}-]U|(nyn|lg)[\p{Pc}-]U|xog[\p{Pc}-]U|cgg[\p{Pc}-]U|mg[\p{Pc}-]M|yo[\p{Pc}-]N|ig[\p{Pc}-]N|e(n[\p{Pc}-]S|e[\p{Pc}-]T)|bg[\p{Pc}-]B)G|(uz[\p{Pc}-](Latn|Cyrl)[\p{Pc}-]U|k(k[\p{Pc}-]Cyrl[\p{Pc}-]K|ab[\p{Pc}-]D)|seh[\p{Pc}-]M|mas[\p{Pc}-]T|(vun|r(wk|of)|lag|kde|jmc|bez)[\p{Pc}-]T|pt[\p{Pc}-]M|sw[\p{Pc}-]T|cs[\p{Pc}-]C)Z|(s(r[\p{Pc}-](Latn|Cyrl)[\p{Pc}-]M|v[\p{Pc}-]S|o[\p{Pc}-]K)|teo[\p{Pc}-]K|mas[\p{Pc}-]K|(saq|mer|lu[oy]|k(ln|am|i)|guz|ebu)[\p{Pc}-]K|d(av[\p{Pc}-]K|e[\p{Pc}-][BD])|om[\p{Pc}-]K|nl[\p{Pc}-]B|sw[\p{Pc}-]K|ka[\p{Pc}-]G|ga[\p{Pc}-]I|fr[\p{Pc}-]N|e(t[\p{Pc}-]E|s[\p{Pc}-]V))E|(ha[\p{Pc}-]Latn[\p{Pc}-]G|gsw[\p{Pc}-]C|fil[\p{Pc}-]P|th[\p{Pc}-]T|km[\p{Pc}-]K|it[\p{Pc}-]C|rm[\p{Pc}-]C|ee[\p{Pc}-]G|de[\p{Pc}-]C)H|a((z[\p{Pc}-](Latn|Cyrl)[\p{Pc}-]A|sa[\p{Pc}-]T)Z|z([\p{Pc}-](Latn|Cyrl))?|s[\p{Pc}-]IN|r[\p{Pc}-](TN|S[ADY]|OM|L[BY]|KW|JO|IQ|EG|DZ|[AY]E)|m[\p{Pc}-]ET|r[\p{Pc}-]BH|k[\p{Pc}-]GH|r[\p{Pc}-][MQ]A|f([\p{Pc}-][NZ]A)?|sa?|r|m|k)|tzm[\p{Pc}-]Latn|s(hi([\p{Pc}-](Tfng|Latn))?|r([\p{Pc}-](Latn|Cyrl))?|eh|v|q|o|l|k|i|g)|z(h([\p{Pc}-]Han[st])?|u)|u(z([\p{Pc}-](Latn|Cyrl))?|r|k)|uz[\p{Pc}-]Arab|p(a([\p{Pc}-]Arab)?|[lst])|k(k([\p{Pc}-]Cyrl)?|ea|ab?|[lmo])|pa[\p{Pc}-]Guru|h(a([\p{Pc}-]Latn)?|[eiruy])|(mfe[\p{Pc}-]M|ru[\p{Pc}-]R|hu[\p{Pc}-]H)U|(kea[\p{Pc}-]C|lv[\p{Pc}-]L)V|e(s[\p{Pc}-](419|U[SY]|SV|P[AERY]|MX|G[QT]|E[CS]|C[LOR])|s[\p{Pc}-]NI|n[\p{Pc}-](Z[AW]|VI|U[MS]|P[HK]|N[AZ]|M[HPTU]|I[ELN]|G[BU]|B[EWZ]|A[SU])|s[\p{Pc}-]AR|l[\p{Pc}-]GR|o)|c(hr[\p{Pc}-]US|y[\p{Pc}-]GB|a[\p{Pc}-]ES)|(ses|khq)[\p{Pc}-]ML|(bem[\p{Pc}-]Z|my[\p{Pc}-]M|hy[\p{Pc}-]A|fr[\p{Pc}-]K|en[\p{Pc}-]J)M|ti[\p{Pc}-]E[RT]|ne[\p{Pc}-]NP|ja[\p{Pc}-]JP|so[\p{Pc}-]DJ|f(r[\p{Pc}-](T[DG]|R[EW]|M[CFGLQ]|LU|G[ANPQ]|DJ|C[ADF-IM]|B[EFIJL])|a[\p{Pc}-]AF)|(s(v[\p{Pc}-]F|l[\p{Pc}-]S)|fi[\p{Pc}-]F)I|(tr[\p{Pc}-]T|pt[\p{Pc}-]B|ko[\p{Pc}-]K|hr[\p{Pc}-]H|f(r[\p{Pc}-]F|a[\p{Pc}-]I))R|d(e[\p{Pc}-]L[IU]|a[\p{Pc}-]DK)|(kw|gv)[\p{Pc}-]GB|(gl|eu)[\p{Pc}-]ES|(r[ou][\p{Pc}-]M|id[\p{Pc}-]I)D|(sq[\p{Pc}-]A|pl[\p{Pc}-]P|nl[\p{Pc}-]N|kl[\p{Pc}-]G|he[\p{Pc}-]I)L|(ms[\p{Pc}-]M|el[\p{Pc}-]C)Y|b(n[\p{Pc}-]BD|m[\p{Pc}-]ML|e[\p{Pc}-]BY)|(so[\p{Pc}-]E|pt[\p{Pc}-]P|om[\p{Pc}-]E|mt[\p{Pc}-]M|lt[\p{Pc}-]L|it[\p{Pc}-]I|en[\p{Pc}-]T|de[\p{Pc}-]A)T|t(zm|eo?|r|o|i|h|a)|n(aq|[bdeln])|m(fe|as|[gksty])|k(ok|n)|g(sw|u|a)|f(il?|[or]|f|a)|saq|mer|lu[oy]|k(ln|am|i)|guz|ebu|d(av?|e)|haw|nyn|xog|c(hr|gg|[sy]|a)|ses|khq|b(em?|[gm-os])|vun|r(wk|of)|lag|kde|jmc|bez|vi|r[ouw]|om|sn|sw|l[tv]|ja|yo|i[dgist]|or|m[lr]|rm|e[elnst]|kw|gv|lg|gl|eu)\b
                    name: support.type.locale.so
                  - match: \b\w+([\p{Pc}-]\w+)*\b
                    name: support.type.locale.custom.so
          - begin: (\($)\s*(\p{L}+)\s*(:)?
            end: \s*(\))
            name: meta.group.script.so
            captures:
              1: {name: punctuation.definition.group.flag.so}
              3: {name: punctuation.separator.colon.so}
              2:
                patterns:
                  - match: (?i)\b(Z(zzz|yyy|sy[em])|Visp|T(ha[ai]|al[eu])|S(yr[cejn]|og[do]|in[dh])|Qa[a-z][a-z]|(Zxx|Xsu)x|Ph(nx|l[ipv])|M(e(r[co]|df)|an[di])|Sar[ab]|L(in[ab]|at[fgn])|(Wol|Osg|Lek)e|(Ran|Mah)j|K(ore|hoj)|(Pau|Mar|Lep)c|Jurc|S(ha|gn)w|H(mn[gp]|luw|an[bgiost])|(Z(mt|in)|Vit|Tir|Ork)h|G(o(th|n[gm])|eo[kr])|Egy[dhp]|(Tam|Kpe|Ita)l|(Tns|Sor|O(sm|ry)|New|Ma[ky]|L(om|an)|K(nd|an)|Jav|War|Hir|Elb)a|D(upl|eva)|Kit[ls]|(P(si|cu)|Moo|Jpa|Gra)n|(Uga|Tak|Sa[mu]|Run|Mym|Kh[am]|H(eb|at)|Guj|Oug|Dog)r|C(yr[ls]|pmn|her)|(S(un|id|hr)|P(lr|iq)|Nan|Men)d|(Xpe|Wch|Tot|S(yl|oy)|Ror|Nko|Mro|Lao|Jam)o|(T(gl|en|an)|Roh|Pha|Mon|Gla)g|(Tf|Rj|Hu)ng|(Ind|C(hr|an))s|(Tel|Nsh|Lis|Gur)u|(Y(ez|ii)|Vai|Shu|Prt|M(te|od)|Ly[cd]|Kal|Kth|Eth|Car)i|B(uhd|ra[hi]|opo|eng|(li|hk)s|ugi|a(ss|mu|li))|(T(ib|av)|Nba|Mul|Hrk|Dsr|C(pr|op|ir))t|(Zan|Tag|N(k[dg]|ar)|Lim)b|(Olc|Gre|Bat)k|Diak|(P(e[lr]|al)|Oga|Mly|Ely|C(ha|ak))m|A(vst|r(m[in]|a[bn])|ghb|fak|hom|dlm))\b
                    name: support.type.script.so
                  - match: \w+
                    name: support.type.script.custom.so
    patterns:
      - include: "#string-escapes"
      - include: "#unicode-scripts"
      - include: "#regexp-patterns"

  entities:
    patterns:
      - include: "#function-names"
      - include: "#constant-names"
      - include: "#type-names"
      - include: "#variable-names"

  class-names:
    comment: Names for built-in classes
    patterns:
      - comment:

  type-names:
    comment: Names for built-in types
    patterns:
      - comment: Primitive data types
        match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
          bool(ean)?|u?int|float|natural|ratio|real|imag|complex|number
          |char|rune|string|symbol|regexp?|function|buffer|binary
          |# numeric types
          ([cifsun]|natural|ratio|u?int|real|imag|complex)
          (8|16|32|64|128)
          |[ci](half|float|double|decimal|octuple)
          )\b
        name: support.type.builtin.primitive.so
      - comment: Constant/algebraic types
        match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
          true|false|null|void|nan|infin
          |any|empty|object|record|unit|mixed
          |just|some|none|never|(im)?pure|channel
          )\b
        name: support.type.builtin.so
      - comment: Data structures
        match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
          array|tuple|(?:mut)?(?:list|set|map)|dict|function
          |process|sequence|generator|range|stack|heap|queue|tree|trie
          )\b
        name: support.type.primitive.so
      - comment: Primitive classes
        match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
          Bool(ean)?|U?Int|Float|Natural|Ratio|Real|Imag|Complex|Number
          |Char|Rune|String|Symbol|RegExp?|Function|Buffer|Binary
          |# Numeric Types
          ([CIFSUN]|Natural|Ratio|U?Int|Real|Imag|Complex)
          (8|16|32|64|128)
          |[CI](Half|Float|Double|Decimal|Octuple)
          )\b
        name: support.class.builtin.primitive.so
      - comment: Constant/algebraic classes
        match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
          True|False|Null|Void|NaN|Infin
          |Any|Empty|Object|Record|Unit|Mixed
          |Just|Some|None|Never|(Im)?pure|Channel
          )\b
        name: support.class.builtin.so
      - comment: Data structure classes
        match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(
          Array|Tuple|(Mut)?(List|Set|Map)|Dict|Function
          |Process|Sequence|Generator|Range|Stack|Heap|Queue|Tree|Trie
          )\b
        name: support.class.primitive.so

      - comment: Interface classes | IEnumerable, etc
        match: \s*\bI((\p{Lu}[\w&&\P{Lu}]*)+)\b
        name: entity.name.interface.so
      - comment: Namespace classes | NSString, etc
        match: \s*\bNS((\p{Lu}[\w&&\P{Lu}]*)+)\b
        name: entity.name.namespace.so
      - comment: Error classes | BaseError, etc
        match: \s*\b((\p{Lu}[\w&&\P{Lu}]*)+)?(Error|Exception)\b
        name: support.class.error.so
      - comment: Trait classes | Serializable, Loggable etc
        match: \s*\b((\p{Lu}[\w&&\P{Lu}]*)+)able\b
        name: support.class.trait.so

  function-names:
    comment: Names for built-in functions (initial dump)
    patterns:
      - comment: isName functions
        match: (?x)\s*\bis(\p{Lu}[\w&&\P{Lu}]*)+\b\s*
        name: support.function.predicate

  constant-names:
    comment: Names for constants, symbols and static properties
    patterns: []

  variable-names:
    comment: Standard Library variable names
    patterns: []

  property-names:
    comment: Standard Library property names
    patterns: []

  literals:
    patterns:
      - include: "#regexps"
      - include: "#strings-unquoted"
      - include: "#strings-quoted"
      - include: "#symbols"
      - include: "#numbers"
      - include: "#constants"

  constants:
    patterns:
      - match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(?:
          (true)|(false)|(null)|(void)|(nan)|(infin)
          )\b\s*
        captures:
          1: {name: constant.language.boolean.true.so}
          2: {name: constant.language.boolean.false.so}
          3: {name: constant.language.null.so}
          4: {name: constant.language.undefined.so}
          5: {name: constant.language.nan.so}
          6: {name: constant.language.infinity.so}
      - match: |
          (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(?:
          (it|that|arguments|super|this|self|proto|prototype|constructor|target)
          )\b\s*
        captures:
          1: {name: variable.language.$1.so}

  numbers:
    patterns:
      - match: (?<=(^|[({\[])\s*\d\w*)\.
        name: punctuation.separator.decimal.period.so
      - match: (?<=(?:^|[({\[])\s*|\s)\.(?=\d)
        name: punctuation.separator.decimal.period.so
      - match: (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{Alnum}+(?:_*\p{Alnum}+)*)
          (?:(\.)(?:\p{Alnum}+(?:_*\p{Alnum}+)*)?)?
          (?:(\*)\p{Alnum}+(?:_*\p{Alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          ((?:[2-9]|[1-9]\d+)b)
          (?:\p{Alnum}+(?:_*\p{Alnum}+)*)?
          (?:(\.)(?:\p{Alnum}+(?:_*\p{Alnum}+)*)?)
          (?:(\*)\p{Alnum}+(?:_*\p{Alnum}+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.arbitrary-radix.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0b)
          (?:[01]+(?:_*[01]+)*)
          (?:(\.)(?:[01]+(?:_*[01]+)*)?)?
          (?:(\*)[01]+(?:_*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0b)
          (?:[01]+(?:_*[01]+)*)?
          (?:(\.)(?:[01]+(?:_*[01]+)*)?)
          (?:(\*)[01]+(?:_*[01]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.binary.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:_*[0-3]+)*)
          (?:(\.)(?:[0-3]+(?:_*[0-3]+)*)?)?
          (?:(\*)[0-3]+(?:_*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0q)
          (?:[0-3]+(?:_*[0-3]+)*)?
          (?:(\.)(?:[0-3]+(?:_*[0-3]+)*)?)
          (?:(\*)[0-3]+(?:_*[0-3]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.quaternary.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:_*[0-5]+)*)
          (?:(\.)(?:[0-5]+(?:_*[0-5]+)*)?)?
          (?:(\*)[0-5]+(?:_*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0s)
          (?:[0-5]+(?:_*[0-5]+)*)?
          (?:(\.)(?:[0-5]+(?:_*[0-5]+)*)?)
          (?:(\*)[0-5]+(?:_*[0-5]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.senary.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:_*[0-7]+)*)
          (?:(\.)(?:[0-7]+(?:_*[0-7]+)*)?)?
          (?:(\*)[0-7]+(?:_*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0o)
          (?:[0-7]+(?:_*[0-7]+)*)?
          (?:(\.)(?:[0-7]+(?:_*[0-7]+)*)?)
          (?:(\*)[0-7]+(?:_*[0-7]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.octal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:_*[\dab]+)*)
          (?:(\.)(?:[\dab]+(?:_*[\dab]+)*)?)?
          (?:(\*)[\dab]+(?:_*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0z)
          (?:[\dab]+(?:_*[\dab]+)*)?
          (?:(\.)(?:[\dab]+(?:_*[\dab]+)*)?)
          (?:(\*)[\dab]+(?:_*[\dab]+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.duodecimal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0x)
          (?:\h+(?:_*\h+)*)
          (?:(\.)(?:\h+(?:_*\h+)*)?)?
          (?:(\*)\h+(?:_*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (0x)
          (?:\h+(?:_*\h+)*)?
          (?:(\.)(?:\h+(?:_*\h+)*)?)
          (?:(\*)\h+(?:_*\h+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.hexadecimal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          ()
          (?:\d+(?:_*\d+)*)
          (?:(\.)(?:\d+(?:_*\d+)*)?)?
          (?:(\*)\d+(?:_*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          ()
          (?:\d+(?:_*\d+)*)?
          (?:(\.)(?:\d+(?:_*\d+)*)?)
          (?:(\*)\d+(?:_*\d+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.decimal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:_*\w+)*)
          (?:(\.)(?:\w+(?:_*\w+)*)?)?
          (?:(\*)\w+(?:_*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}
      - match: (?ix)\s*\b
          (\d+\w)
          (?:\w+(?:_*\w+)*)?
          (?:(\.)(?:\w+(?:_*\w+)*)?)
          (?:(\*)\w+(?:_*\w+)*)?
          (\^(?:\d|[1-9]\d+)?[+-]?\d+)?
          (=(?:\d|[1-9]\d+))?
          (:[\p{Pc}\p{L}]\w*)?
          \b\s*
        captures:
          0: {name: constant.numeric.illegal.so}
          1: {name: storage.type.numeric.so}
          2: {name: punctuation.separator.decimal.period.so}
          3: {name: constant.numeric.other.separator.so}
          4: {name: constant.numeric.other.exponent.so}
          5: {name: constant.numeric.other.density.so}
          6: {name: storage.type.numeric.so}

  strings-quoted:
    patterns:
      - comment: single quoted raw string
        begin: \s*('{3,})
        contentName: string.quoted.single.so
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.so}
        patterns:
          - include: "#embedded-raw"
      - comment: simple single quoted raw string
        begin: \s*(')
        contentName: string.quoted.single.so
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.so}
        patterns:
          - match: "''"
            name: constant.character.escape.so
          - include: "#embedded-raw"
      - comment: double quoted standard string
        begin: \s*("{3,}|")
        contentName: string.quoted.double.so
        end: \s*((\1)(?!\1))
        captures:
          1: {name: punctuation.definition.string.so}
        patterns:
          - include: "#string-content"

  strings-unquoted:
    patterns:
      - begin: |
          (?x)\s*
          (\\\|)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [\p{Pc}\p{L}]\w*
          (?:(?:[?!]?\.|[?!:]:|->)
          (?:(?:[\p{Pc}\p{L}]\w*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.literal.so}
          2: {name: storage.modifier.chomping-indicator.so}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.so}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.so
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{Zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.block.so
            patterns:
              - include: "#embedded-raw"
              - include: text.html.markdown#inline
          - include: $self
      - begin: |
          (?x)\s*
          (\\\>)\s*
          ([-+*/<=>])?\s*
          (?:(\d\w*)|
          (
          [\p{Pc}\p{L}]\w*
          (?:(?:[?!]?\.|[?!:]:|->)
          (?:(?:[\p{Pc}\p{L}]\w*)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.folded.so}
          2: {name: storage.modifier.chomping-indicator.so}
          3: {patterns: [include: "#numbers"]}
          4: {name: fenced_code.block.language.so}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.syntax.so
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{Zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.in.so
            patterns:
              - include: "#string-content"
              - include: text.html.markdown#inline
          - include: $self
      - match: |
          (?x)
          \s*(\\)
          ((?:\\.|[^({\[)}\]\s.,:;])+?)
          (?=[({\[)}\]\s.,:;]|$)\s*
        name: string.unquoted.so
        captures:
          1: {name: punctuation.definition.string.so}
          2: {patterns: [include: "#string-content"]}

  string-content:
    patterns:
      - include: "#string-escapes"
      - include: "#embedded"

  string-escapes:
    patterns:
      - match: \\(?=\s*$)
        name: constant.character.escape.newline.so
      - comment: Binary escape sequences
        match: (?i)\\b0*(1(0(0(0(0[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01]|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1(0(0(0(0([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1)?|1[01][01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]|1)?|0)
        name: constant.character.escape.binary.so
      - comment: Binary escape sequences
        begin: (?i)\\b{
        end: "}"
        name: constant.character.escape.binary.so
        patterns:
          - match: \b0*(1(0(0(0(0[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01]|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1(0(0(0(0([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1)?|1[01][01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]|1)?|0)\b
            name: constant.character.escape.binary.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - comment: Quaternary escape sequences
        match: (?i)\\q0*(1(0(0[0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|1(0(0([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?)?|[23][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[23][0-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[23]|0)
        name: constant.character.escape.quaternary.so
      - comment: Quaternary escape sequences
        begin: (?i)\\q{
        end: "}"
        name: constant.character.escape.quaternary.so
        patterns:
          - match: \b0*(1(0(0[0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|1(0(0([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?)?|[23][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[23][0-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[23]|0)\b
            name: constant.character.escape.quaternary.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - comment: Senary escape sequences
        match: (?i)\\s0*(355135(3[01]|[45])|355135[0-2][0-5]|3551(3[0-4]|[45])[0-5][0-5]|355(1[0-2]|[2-5])[0-5][0-5][0-5]|3550[0-5][0-5][0-5][0-5]|35[0-4][0-5][0-5][0-5][0-5][0-5]|(3[0-4]|[45])[0-5][0-5][0-5][0-5][0-5][0-5]|[12][0-5][0-5][0-5][0-5][0-5][0-5][0-5]|3(5(5(1(3(53?)?)?)?)?|55135[0-2]|551(3[0-4]|[45])[0-5]?|55(1[0-2]|[2-5])([0-5][0-5]?)?|550([0-5]([0-5][0-5]?)?)?|5[0-4]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|(3[0-4]|[45])([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|[12]([0-5]([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?)?|0)
        name: constant.character.escape.senary.so
      - comment: Senary escape sequences
        begin: (?i)\\s{
        end: "}"
        name: constant.character.escape.senary.so
        patterns:
          - match: \b0*(355135(3[01]|[45])|355135[0-2][0-5]|3551(3[0-4]|[45])[0-5][0-5]|355(1[0-2]|[2-5])[0-5][0-5][0-5]|3550[0-5][0-5][0-5][0-5]|35[0-4][0-5][0-5][0-5][0-5][0-5]|(3[0-4]|[45])[0-5][0-5][0-5][0-5][0-5][0-5]|[12][0-5][0-5][0-5][0-5][0-5][0-5][0-5]|3(5(5(1(3(53?)?)?)?)?|55135[0-2]|551(3[0-4]|[45])[0-5]?|55(1[0-2]|[2-5])([0-5][0-5]?)?|550([0-5]([0-5][0-5]?)?)?|5[0-4]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|(3[0-4]|[45])([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|[12]([0-5]([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?)?|0)\b
            name: constant.character.escape.senary.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - comment: Octal escape sequences
        match: (?i)\\o0*((4[01]|[5-7])[0-7][0-7][0-7][0-7][0-7]|[1-3][0-7][0-7][0-7][0-7][0-7][0-7]|(4[01]|[5-7])([0-7]([0-7]([0-7][0-7]?)?)?)?|[1-3]([0-7]([0-7]([0-7]([0-7][0-7]?)?)?)?)?|4[2-7][0-7][0-7][0-7][0-7]|4([2-7]([0-7]([0-7][0-7]?)?)?)?|0)
        name: constant.character.escape.octal.so
      - comment: Octal escape sequences
        begin: (?i)\\o{
        end: "}"
        name: constant.character.escape.octal.so
        patterns:
          - match: \b0*((4[01]|[5-7])[0-7][0-7][0-7][0-7][0-7]|[1-3][0-7][0-7][0-7][0-7][0-7][0-7]|(4[01]|[5-7])([0-7]([0-7]([0-7][0-7]?)?)?)?|[1-3]([0-7]([0-7]([0-7]([0-7][0-7]?)?)?)?)?|4[2-7][0-7][0-7][0-7][0-7]|4([2-7]([0-7]([0-7][0-7]?)?)?)?|0)\b
            name: constant.character.escape.octal.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - comment: Decimal escape sequences
        match: (?i)\\d?0*(1(1(1(4(1(1[01]|[2-9])|(10|[2-9])\d)|(40|[5-9])\d\d)|(1[0-3]|[2-9])\d\d\d)|(10|[2-9])\d\d\d\d|0\d\d\d\d\d)|1(1(1(4(11?)?)?)?|114(10|[2-9])|11(40|[5-9])\d?|1(1[0-3]|[2-9])(\d\d?)?|(10|[2-9])(\d(\d\d?)?)?|0(\d(\d(\d\d?)?)?)?)?|[2-9]\d\d\d\d\d|[2-9](\d(\d(\d\d?)?)?)?|0)
        name: constant.character.escape.decimal.so
      - comment: Decimal escape sequences
        begin: (?i)\\d?{
        end: "}"
        name: constant.character.escape.decimal.so
        patterns:
          - match: \b0*(1(1(1(4(1(1[01]|[2-9])|(10|[2-9])\d)|(40|[5-9])\d\d)|(1[0-3]|[2-9])\d\d\d)|(10|[2-9])\d\d\d\d|0\d\d\d\d\d)|1(1(1(4(11?)?)?)?|114(10|[2-9])|11(40|[5-9])\d?|1(1[0-3]|[2-9])(\d\d?)?|(10|[2-9])(\d(\d\d?)?)?|0(\d(\d(\d\d?)?)?)?)?|[2-9]\d\d\d\d\d|[2-9](\d(\d(\d\d?)?)?)?|0)\b
            name: constant.character.escape.decimal.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - comment: Duodecimal escape sequences
        match: (?i)\\z0*(4588(a[0-7]|b)|458(8\d|[9ab])[\dab]|45(8[0-7]|[9ab])[\dab][\dab]|4(5[0-7]|[6-9ab])[\dab][\dab][\dab]|(4[0-4]|[5-9ab])[\dab][\dab][\dab][\dab]|[1-3][\dab][\dab][\dab][\dab][\dab]|4(5(8(8a?)?)?|58(8\d|[9ab])|5(8[0-7]|[9ab])[\dab]?|(5[0-7]|[6-9ab])([\dab][\dab]?)?)?|(4[0-4]|[5-9ab])([\dab]([\dab][\dab]?)?)?|[1-3]([\dab]([\dab]([\dab][\dab]?)?)?)?|0)
        name: constant.character.escape.duodecimal.so
      - comment: Duodecimal escape sequences
        begin: (?i)\\z{
        end: "}"
        name: constant.character.escape.duodecimal.so
        patterns:
          - match: \b0*(4588(a[0-7]|b)|458(8\d|[9ab])[\dab]|45(8[0-7]|[9ab])[\dab][\dab]|4(5[0-7]|[6-9ab])[\dab][\dab][\dab]|(4[0-4]|[5-9ab])[\dab][\dab][\dab][\dab]|[1-3][\dab][\dab][\dab][\dab][\dab]|4(5(8(8a?)?)?|58(8\d|[9ab])|5(8[0-7]|[9ab])[\dab]?|(5[0-7]|[6-9ab])([\dab][\dab]?)?)?|(4[0-4]|[5-9ab])([\dab]([\dab][\dab]?)?)?|[1-3]([\dab]([\dab]([\dab][\dab]?)?)?)?|0)\b
            name: constant.character.escape.duodecimal.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - comment: Hexadecimal escape sequences
        match: (?i)\\x0*(1(0\h\h\h\h|[1-9a-f]\h\h\h)|1(0(\h(\h\h?)?)?|[1-9a-f](\h\h?)?)?|[2-9a-f]\h\h\h\h|[2-9a-f](\h(\h\h?)?)?|0)
        name: constant.character.escape.hexadecimal.so
      - comment: Hexadecimal escape sequences
        begin: (?i)\\x{
        end: "}"
        name: constant.character.escape.hexadecimal.so
        patterns:
          - match: \b0*(1(0\h\h\h\h|[1-9a-f]\h\h\h)|1(0(\h(\h\h?)?)?|[1-9a-f](\h\h?)?)?|[2-9a-f]\h\h\h\h|[2-9a-f](\h(\h\h?)?)?|0)\b
            name: constant.character.escape.hexadecimal.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - match: (?i)\\u\h{0,8}
        name: constant.character.escape.unicode.so
      - begin: (?i)\\u{
        end: \s*}
        name: constant.character.escape.unicode.so
        patterns:
          - match: \b\h{0,8}\b
            name: constant.character.escape.unicode.so
          - match: \w+
            name: invalid.illegal.unrecognized-string-escape.so
      - begin: (?i)\\j{
        end: \s*}
        name: constant.character.entity.named.so
        patterns:
          - include: "#unicode-named-chars"
      - match: (?i)\\[abceflnprtvz]
        name: constant.character.escape.so
      - match: \\[\p{S}\p{P}]
        name: constant.character.escape.symbol.so
      - match: \\[\p{L}\p{N}\p{Z}\p{C}]
        name: constant.character.escape.illegal.so

  embedded:
    patterns:
      - match: (\$)(\d+)
        captures:
          1: {name: punctuation.section.embedded.so}
          2: {name: constant.numeric.decimal.so}
      - match: (%)((['"`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.so}
          2: {name: storage.type.format.so}
      - match: |
          (?xi)
          (?#?<!\\)# discard escape prefix
          (\$)# prefix
          (
          [\p{Pc}\p{L}]\w*
          (?:(?:[?!]?\.|[?!:]:|->)
          (?:(?:[\p{Pc}\p{L}]\w*)))*
          )# variable
        captures:
          1: {name: punctuation.section.embedded.so}
          2: {patterns: [include: $self]}
      - begin: (?#?<!\\)(\${)\s*
        end: (})
        name: entity.quasi.element.so
        captures:
          1: {name: punctuation.section.embedded.so}
        patterns:
          - include: $self

  embedded-raw:
    patterns:
      - match: (\$)(\d+)
        captures:
          1: {name: punctuation.section.embedded.so}
          2: {name: constant.numeric.decimal.so}
      - match: ([$%]){2}
        name: constant.character.escape.so
      - match: (%)((['"`])(?:\\\g<-1>|.)*?\g<-1>|\w+(?:[^\s'"`]+\w+)*)
        captures:
          1: {name: punctuation.separator.key-value.so}
          2: {name: storage.type.format.so}
      - match: |
          (?xi)
          (?<!\$)# discard escape prefix
          (\$)# prefix
          (
          [\p{Pc}\p{L}]\w*
          (?:(?:[?!]?\.|[?!:]:|->)
          (?:(?:[\p{Pc}\p{L}]\w*)))*
          )# variable
        captures:
          1: {name: punctuation.section.embedded.so}
          2: {patterns: [include: $self]}
      - begin: (?<!\$)(\${)\s*
        end: (})
        name: entity.quasi.element.so
        captures:
          1: {name: punctuation.section.embedded.so}
        patterns:
          - include: $self

  symbols:
    match: |
      (?x)
      \s*
      (:)((?:\w|\\.)(?:\\.|[^({\[)}\]\s.,:;])*?)
      (?=[({\[)}\]\s.,:;]|$)\s*
    name: meta.symbol.so
    captures:
      1: {name: punctuation.definition.symbol.so}
      2: {name: constant.other.symbol.so}

  labels:
    match: |
      (?x)
      (?<=^|[({\[\s,;*+-])\s*
      ((?:\w|\\.)(?:\\.|[^({\[)}\]\s.,:;])*?)
      (:)\s+
    name: meta.object-literal.key.so
    captures:
      1:
        name: constant.other.object.key.so
        patterns: [include: "#string-escapes"]
      2: {name: punctuation.separator.key-value.so}

  regexps:
    patterns:
      - begin: (\p{Alnum}*)(`)\s*
        end: \s*(?!\\)(`(?!`))(\p{Alnum}*)
        contentName: string.pattern.regexp.so
        beginCaptures:
          1: {name: keyword.modifier.so}
          2: {name: punctuation.section.regexp.begin.so}
        endCaptures:
          1: {name: punctuation.section.regexp.end.so}
          2: {name: keyword.other.flag.so}
        patterns:
          - include: "#comments"
          - include: "#regexp-patterns"
          - begin: (`)(`)\s*\n?
            end: \s*(?=(?!\\)`)
            contentName: string.replace.regexp.so
            beginCaptures:
              1: {name: punctuation.section.regexp.end.so}
              2: {name: punctuation.section.regexp.begin.so}
            patterns:
              - include: "#back-references"
      - begin: |
          (?x)\s*
          (\\\<)\s*
          ([-+*/<=>])?\s*
          (?:(\w+)?\b\s*\b
          (
          \w+\s*
          (?:[+-]\s*
          (?:(?:\w+)))*
          )
          )?\s*
          (.*\n?)
        beginCaptures:
          1: {name: keyword.control.flow.block-scalar.regexp.so}
          2: {name: storage.modifier.chomping-indicator.so}
          3: {name: keyword.modifier.so}
          4: {name: keyword.other.flag.so}
          5:
            patterns:
              - include: "#comments"
              - match: .+
                name: invalid.illegal.expected-comment-or-newline.so
        end: ^(?=\S)|(?!\G)
        patterns:
          - begin: ^((\p{Zs})+)(?!\2)
            end: ^(?!\1|\s*$)
            name: string.unquoted.plain.out.so
            patterns:
              - include: "#regexp-patterns"
          - include: $self

  back-references:
    patterns:
      - match: \$[&+-]
        name: keyword.other.back-reference.so
      - match: \${2}
        name: constant.character.escape.so
      - begin: (\$<)
        end: \s*(>)
        name: keyword.other.back-reference.so
        beginCaptures:
          1: {name: keyword.other.back-reference.so}
        endCaptures:
          1: {name: keyword.other.back-reference.so}
        patterns:
          - include: "#variables"
          - include: "#operators"
          - include: "#numbers"
      - include: "#string-content"

  regexp-patterns:
    patterns:
      - include: "#embedded"
      - include: "#comments"
      - include: "#strings-quoted"
      - match: \|
        name: keyword.operator.or.so
      - match: \&
        name: keyword.operator.match.so
      - match: \!
        name: keyword.operator.disjunction.so
      - match: \.
        name: constant.character.all.so
      - match: (?i)\\[by]({\p{Alpha}+})?
        name: keyword.control.anchor.so
      - match: (?i)(\^|\\<|\\a(?:{\p{Alpha}+})?)|(\$|\\>|\\z(?:{\p{Alpha}+})?)
        captures:
          1: {name: keyword.control.begin.so}
          2: {name: keyword.control.end.so}
      - match: (\\\()(?:(\?)|(\+)|(\*))
        captures:
          1: {name: constant.character.escape.other.so}
          2: {name: keyword.operator.quantifier.lazy.so}
          3: {name: keyword.operator.quantifier.eager.so}
          4: {name: keyword.operator.quantifier.greedy.so}
      - match: \\\d+
        name: keyword.other.back-reference.so
      - match: \{(\s*\d*\s*(?:,?\s*\d*\s*)*)\}
        name: keyword.operator.quantifier.so
      - begin: (\\Q)
        contentName: string.quoted.single.so
        end: (\\E)
        name: string.quoted.raw.so
        captures:
          1: {name: punctuation.definition.string.so}
        patterns:
          - include: "#string-content"
      - begin: (\\q)
        contentName: string.quoted.double.so
        end: (\\e)
        name: string.quoted.so
        captures:
          1: {name: punctuation.definition.string.so}
        patterns:
          - include: "#embedded-raw"
      - begin: (\\k<)
        end: \s*(>)
        name: keyword.other.back-reference.so
        beginCaptures:
          1: {name: keyword.other.back-reference.so}
        endCaptures:
          1: {name: keyword.other.back-reference.so}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - begin: (\\g<)
        end: \s*(>)
        name: keyword.other.subroutine.so
        beginCaptures:
          1: {name: keyword.other.subroutine.so}
        endCaptures:
          1: {name: keyword.other.subroutine.so}
        patterns:
          - include: "#variables"
          - include: "#numbers"
      - include: "#regexp-groups"
      - include: "#regexp-char-set"
      - include: "#regexp-char-class"
      - match: (?i)(?:(\\M)|(\\K)|(\\G)|(\\X))
        captures:
          1: {name: keyword.control.anchor.so}
          2: {name: keyword.control.keepout.so}
          3: {name: keyword.control.search.so}
          4: {name: constant.character.unicode.so}
      - match: (?<=[^\\][*+?}])(?:(\?)|(\+)|(\*))
        captures:
          1: {name: keyword.operator.modifier.lazy.so}
          2: {name: keyword.operator.modifier.eager.so}
          3: {name: keyword.operator.modifier.greedy.so}
      - match: (\?)|(\+)|(\*)
        captures:
          1: {name: keyword.operator.quantifier.lazy.so}
          2: {name: keyword.operator.quantifier.eager.so}
          3: {name: keyword.operator.quantifier.greedy.so}
      - match: \\.
        name: constant.character.escape.other.so

    repository:
      regexp-groups:
        patterns:
          - begin: \(([*+])
            end: \s*(\))
            name: constant.other.pcre.so
            captures:
              0: {name: punctuation.section.expression.so}
            patterns:
              - include: source.clojure
          - begin: (\()(\?#)
            contentName: comment.block.regexp.so
            end: \s*(\))
            name: comment.block.regexp.so
            captures:
              1: {name: punctuation.definition.comment.so}
            patterns:
              - match: \\.
                name: comment.block.regexp.so
          - begin: (\(\?=)
            end: \s*(\))
            name: meta.group.look-ahead.so
            captures:
              1: {name: punctuation.definition.group.look-ahead.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<=)
            end: \s*(\))
            name: meta.group.look-behind.so
            captures:
              1: {name: punctuation.definition.group.look-behind.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?!)
            end: \s*(\))
            name: meta.group.negative-look-ahead.so
            captures:
              1: {name: punctuation.definition.group.negative-look-ahead.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?<!)
            end: \s*(\))
            name: meta.group.negative-look-behind.so
            captures:
              1: {name: punctuation.definition.group.negative-look-behind.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?(?:([+-]?\d+?)|(\p{upper}+(?:[+-]\p{upper}+)*)|(\p{Lower}+(?:[+-]\p{Lower}+)*)))\s*(:)?
            end: \s*(\))
            name: meta.group.flag.so
            captures:
              0: {name: punctuation.definition.group.flag.so}
              1: {name: punctuation.definition.group.flag.so}
              2: {name: entity.name.function.method.so}
              3: {name: keyword.control.recursion.so}
              4: {name: keyword.other.flag.so}
              5: {name: punctuation.separator.colon.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?={)
            end: \s*(\))
            name: meta.group.call-out.so
            captures:
              1: {name: punctuation.definition.group.call-out.so}
            patterns:
              - begin: (?<=\(\?)({)
                end: \s*(\})([<*>])?(?:(\[)(.*?)(\]))?
                name: punctuation.definition.group.call-out.so
                captures:
                  1: {name: punctuation.definition.group.call-out.so}
                  2: {name: keyword.operator.range.so}
                  3: {name: punctuation.definition.tag.so}
                  4: {patterns: [include: "#function-entities"]}
                  5: {name: punctuation.definition.tag.so}
                patterns:
                  - include: $self
              - include: "#regexp-patterns"
          - begin: (\(\?>)
            end: \s*(\))
            name: meta.group.atomic.so
            captures:
              1: {name: punctuation.definition.group.atomic.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?:)
            end: \s*(\))
            name: meta.group.non-capturing.so
            captures:
              1: {name: punctuation.definition.group.non-capturing.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?)(?=[(|])
            end: \s*(\))
            name: meta.group.branch.so
            captures:
              1: {name: punctuation.definition.group.branch.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: (\(\?~)
            end: \s*(\))
            name: meta.group.absent.so
            captures:
              1: {name: punctuation.definition.group.absent.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: \((\?(?:&)(?:([+-]?\d+)|([\p{Pc}\p{L}]\w*)|([+-]?\d*)))(:)?
            end: \s*\)
            name: meta.group.back-reference.so
            captures:
              0: {name: punctuation.definition.group.back-reference.so}
              1: {name: punctuation.definition.group.back-reference.so}
              2: {name: entity.name.function.method.so}
              3: {name: variable.other.so}
              4: {name: punctuation.separator.colon.so}
            patterns:
              - include: "#regexp-patterns"
          - begin: \(\?(?=<(?![!=]))
            end: \s*(\))
            name: meta.group.named.so
            beginCaptures:
              0: {name: punctuation.definition.group.named.so}
              1: {patterns: [include: "#variables"]}
            endCaptures:
              0: {name: punctuation.definition.group.named.so}
            patterns:
              - begin: (?<=\(\?)(<)
                end: \s*(>)
                name: punctuation.definition.group.named.so
                beginCaptures:
                  1: {name: punctuation.definition.group.named.so}
                endCaptures:
                  1: {name: punctuation.definition.group.named.so}
                patterns:
                  - include: "#variables"
                  - include: "#numbers"
              - include: "#regexp-patterns"
          - begin: \(
            end: \s*\)
            name: meta.group.so
            captures:
              0: {name: punctuation.definition.group.so}
            patterns:
              - include: "#regexp-patterns"

      regexp-char-class:
        patterns:
          - match: \\(?=\s*$)
            name: constant.character.escape.newline.so
          - begin: (?i)\\p{
            end: \s*}
            name: constant.other.character-class.unicode.so
            patterns:
              - include: "#expression-keywords"
              - include: "#variables"
              - include: "#operators"
          - begin: \\j{
            end: \s*}
            name: constant.character.entity.named.so
            patterns:
              - include: "#unicode-named-chars"
          - comment: Binary escape sequences
            match: (?i)\\b0*(1(0(0(0(0[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01]|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1(0(0(0(0([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1)?|1[01][01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]|1)?|0)
            name: constant.character.escape.binary.so
          - comment: Binary escape sequences
            begin: (?i)\\b{
            end: "}"
            name: constant.character.escape.binary.so
            patterns:
              - match: \b0*(1(0(0(0(0[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01]|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1[01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01][01])|1(0(0(0(0([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1)?|1[01][01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01]([01][01]?)?)?)?)?)?)?)?)?)?)?)?)?)?)?|1[01]|1)?|0)\b
                name: constant.character.escape.binary.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - comment: Quaternary escape sequences
            match: (?i)\\q0*(1(0(0[0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|1(0(0([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?)?|[23][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[23][0-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[23]|0)
            name: constant.character.escape.quaternary.so
          - comment: Quaternary escape sequences
            begin: (?i)\\q{
            end: "}"
            name: constant.character.escape.quaternary.so
            patterns:
              - match: \b0*(1(0(0[0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|[1-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3])|1(0(0([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[1-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?)?|[23][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3][0-3]|[23][0-3]([0-3]([0-3]([0-3]([0-3]([0-3]([0-3][0-3]?)?)?)?)?)?)?|[23]|0)\b
                name: constant.character.escape.quaternary.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - comment: Senary escape sequences
            match: (?i)\\s0*(355135(3[01]|[45])|355135[0-2][0-5]|3551(3[0-4]|[45])[0-5][0-5]|355(1[0-2]|[2-5])[0-5][0-5][0-5]|3550[0-5][0-5][0-5][0-5]|35[0-4][0-5][0-5][0-5][0-5][0-5]|(3[0-4]|[45])[0-5][0-5][0-5][0-5][0-5][0-5]|[12][0-5][0-5][0-5][0-5][0-5][0-5][0-5]|3(5(5(1(3(53?)?)?)?)?|55135[0-2]|551(3[0-4]|[45])[0-5]?|55(1[0-2]|[2-5])([0-5][0-5]?)?|550([0-5]([0-5][0-5]?)?)?|5[0-4]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|(3[0-4]|[45])([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|[12]([0-5]([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?)?|0)
            name: constant.character.escape.senary.so
          - comment: Senary escape sequences
            begin: (?i)\\s{
            end: "}"
            name: constant.character.escape.senary.so
            patterns:
              - match: \b0*(355135(3[01]|[45])|355135[0-2][0-5]|3551(3[0-4]|[45])[0-5][0-5]|355(1[0-2]|[2-5])[0-5][0-5][0-5]|3550[0-5][0-5][0-5][0-5]|35[0-4][0-5][0-5][0-5][0-5][0-5]|(3[0-4]|[45])[0-5][0-5][0-5][0-5][0-5][0-5]|[12][0-5][0-5][0-5][0-5][0-5][0-5][0-5]|3(5(5(1(3(53?)?)?)?)?|55135[0-2]|551(3[0-4]|[45])[0-5]?|55(1[0-2]|[2-5])([0-5][0-5]?)?|550([0-5]([0-5][0-5]?)?)?|5[0-4]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|(3[0-4]|[45])([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?|[12]([0-5]([0-5]([0-5]([0-5]([0-5][0-5]?)?)?)?)?)?|0)\b
                name: constant.character.escape.senary.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - comment: Octal escape sequences
            match: (?i)\\o0*((4[01]|[5-7])[0-7][0-7][0-7][0-7][0-7]|[1-3][0-7][0-7][0-7][0-7][0-7][0-7]|(4[01]|[5-7])([0-7]([0-7]([0-7][0-7]?)?)?)?|[1-3]([0-7]([0-7]([0-7]([0-7][0-7]?)?)?)?)?|4[2-7][0-7][0-7][0-7][0-7]|4([2-7]([0-7]([0-7][0-7]?)?)?)?|0)
            name: constant.character.escape.octal.so
          - comment: Octal escape sequences
            begin: (?i)\\o{
            end: "}"
            name: constant.character.escape.octal.so
            patterns:
              - match: \b0*((4[01]|[5-7])[0-7][0-7][0-7][0-7][0-7]|[1-3][0-7][0-7][0-7][0-7][0-7][0-7]|(4[01]|[5-7])([0-7]([0-7]([0-7][0-7]?)?)?)?|[1-3]([0-7]([0-7]([0-7]([0-7][0-7]?)?)?)?)?|4[2-7][0-7][0-7][0-7][0-7]|4([2-7]([0-7]([0-7][0-7]?)?)?)?|0)\b
                name: constant.character.escape.octal.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - comment: Decimal escape sequences
            match: (?i)\\d?0*(1(1(1(4(1(1[01]|[2-9])|(10|[2-9])\d)|(40|[5-9])\d\d)|(1[0-3]|[2-9])\d\d\d)|(10|[2-9])\d\d\d\d|0\d\d\d\d\d)|1(1(1(4(11?)?)?)?|114(10|[2-9])|11(40|[5-9])\d?|1(1[0-3]|[2-9])(\d\d?)?|(10|[2-9])(\d(\d\d?)?)?|0(\d(\d(\d\d?)?)?)?)?|[2-9]\d\d\d\d\d|[2-9](\d(\d(\d\d?)?)?)?|0)
            name: constant.character.escape.decimal.so
          - comment: Decimal escape sequences
            begin: (?i)\\d?{
            end: "}"
            name: constant.character.escape.decimal.so
            patterns:
              - match: \b0*(1(1(1(4(1(1[01]|[2-9])|(10|[2-9])\d)|(40|[5-9])\d\d)|(1[0-3]|[2-9])\d\d\d)|(10|[2-9])\d\d\d\d|0\d\d\d\d\d)|1(1(1(4(11?)?)?)?|114(10|[2-9])|11(40|[5-9])\d?|1(1[0-3]|[2-9])(\d\d?)?|(10|[2-9])(\d(\d\d?)?)?|0(\d(\d(\d\d?)?)?)?)?|[2-9]\d\d\d\d\d|[2-9](\d(\d(\d\d?)?)?)?|0)\b
                name: constant.character.escape.decimal.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - comment: Duodecimal escape sequences
            match: (?i)\\z0*(4588(a[0-7]|b)|458(8\d|[9ab])[\dab]|45(8[0-7]|[9ab])[\dab][\dab]|4(5[0-7]|[6-9ab])[\dab][\dab][\dab]|(4[0-4]|[5-9ab])[\dab][\dab][\dab][\dab]|[1-3][\dab][\dab][\dab][\dab][\dab]|4(5(8(8a?)?)?|58(8\d|[9ab])|5(8[0-7]|[9ab])[\dab]?|(5[0-7]|[6-9ab])([\dab][\dab]?)?)?|(4[0-4]|[5-9ab])([\dab]([\dab][\dab]?)?)?|[1-3]([\dab]([\dab]([\dab][\dab]?)?)?)?|0)
            name: constant.character.escape.duodecimal.so
          - comment: Duodecimal escape sequences
            begin: (?i)\\z{
            end: "}"
            name: constant.character.escape.duodecimal.so
            patterns:
              - match: \b0*(4588(a[0-7]|b)|458(8\d|[9ab])[\dab]|45(8[0-7]|[9ab])[\dab][\dab]|4(5[0-7]|[6-9ab])[\dab][\dab][\dab]|(4[0-4]|[5-9ab])[\dab][\dab][\dab][\dab]|[1-3][\dab][\dab][\dab][\dab][\dab]|4(5(8(8a?)?)?|58(8\d|[9ab])|5(8[0-7]|[9ab])[\dab]?|(5[0-7]|[6-9ab])([\dab][\dab]?)?)?|(4[0-4]|[5-9ab])([\dab]([\dab][\dab]?)?)?|[1-3]([\dab]([\dab]([\dab][\dab]?)?)?)?|0)\b
                name: constant.character.escape.duodecimal.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - comment: Hexadecimal escape sequences
            match: (?i)\\x0*(1(0\h\h\h\h|[1-9a-f]\h\h\h)|1(0(\h(\h\h?)?)?|[1-9a-f](\h\h?)?)?|[2-9a-f]\h\h\h\h|[2-9a-f](\h(\h\h?)?)?|0)
            name: constant.character.escape.hexadecimal.so
          - comment: Hexadecimal escape sequences
            begin: (?i)\\x{
            end: "}"
            name: constant.character.escape.hexadecimal.so
            patterns:
              - match: \b0*(1(0\h\h\h\h|[1-9a-f]\h\h\h)|1(0(\h(\h\h?)?)?|[1-9a-f](\h\h?)?)?|[2-9a-f]\h\h\h\h|[2-9a-f](\h(\h\h?)?)?|0)\b
                name: constant.character.escape.hexadecimal.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - match: (?i)\\u\h{0,8}
            name: constant.character.escape.unicode.so
          - begin: (?i)\\u{
            end: \s*}
            name: constant.character.escape.unicode.so
            patterns:
              - match: \b\h{0,8}\b
                name: constant.character.escape.unicode.so
              - match: \w+
                name: invalid.illegal.unrecognized-string-escape.so
          - match: (?i:\\[cm][a-z])|\\R
            name: constant.character.control.so
          - match: *posix-class
            name: constant.other.character-class.posix.so
          - match: (?i:\\p(c[cfos]?|l[lmotu]?|m[cen]?|n[dlo]?|p[c-fios]?|s[ckmo]?|z[lps]))
            name: constant.other.character-class.unicode.so
          - match: (?i)\\[ci]
            name: constant.other.character-class.xml.so
          - match: \.|\\[dhlns-w]
            name: constant.other.character-class.so
          - match: \\[DHLNS-W]
            name: constant.other.character-class.negated.so
          - match: (?i)\\n{[\w\s]+}
            name: constant.character.escape.unicode.name.so
          - match: (?i)\\[abceflnprtvz]
            name: constant.character.escape.so
          - match: \\[\p{S}\p{P}]
            name: constant.character.escape.symbol.so
          - match: \\\p{Z}
            name: constant.character.escape.symbol.so
          - match: \\[\p{L}\p{N}\p{Z}\p{C}]
            name: constant.character.escape.illegal.so
          - include: "#embedded"

      regexp-char-ops:
        patterns:
          - match: \.
            name: constant.other.character-class.range.so
          - match: (?<!\|)\|\|(?!\|)
            name: keyword.operator.union.so
          - match: (?<!&)&&(?!&)
            name: keyword.operator.intersection.so
          - match: (?<!\^)\^\^(?!\^)
            name: keyword.operator.symmetric.so
          - match: (?<!~)~~(?!~)
            name: keyword.operator.negation.so
          - match: (?<!-)--(?!-)
            name: keyword.operator.difference.so
          - match: (?<!\\?[\\\[])-(?![-\[\]])
            name: keyword.operator.range.so
          - match: \\.
            name: constant.character.escape.other.so

      regexp-char-set:
        patterns:
          - begin: (\[=)
            end: \s*(\])
            name: constant.other.character-class.posix.so
            captures:
              1: {name: punctuation.definition.character-class.posix.so}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\.)
            end: \s*(\])
            name: constant.other.character-class.posix.so
            captures:
              1: {name: punctuation.definition.character-class.posix.so}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[:)
            end: \s*(\])
            name: constant.other.character-class.posix.so
            captures:
              1: {name: punctuation.definition.character-class.posix.so}
            patterns:
              - include: "#comments"
              - include: "#variables"
              - include: "#operators"
              - include: "#regexp-patterns"
          - begin: (\[\^)
            end: \s*(\])
            name: constant.other.character-class.negated.so
            captures:
              1: {name: punctuation.definition.character-class.negated.so}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"
          - begin: (\[)
            end: \s*(\])
            name: constant.other.character-class.so
            captures:
              1: {name: punctuation.definition.character-class.so}
            patterns:
              - include: "#comments"
              - include: "#regexp-char-class"
              - include: "#regexp-char-ops"
              - include: "#regexp-char-set"

  tag-names:
    patterns:
      - match: (?x)\b([\p{Pc}\p{L}]\w*)\b(?=[.:])
        name: entity.name.tag.namespace.so
      - match: |
          (?x)\b
          (?:# Regular variables
          (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
          ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
          ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
          ([\p{Pc}\p{L}]\w*)
          )\b
        captures:
          1: {name: entity.name.tag.style.so}
          2: {name: entity.name.tag.script.so}
          3: {name: entity.name.tag.so support.class.component.so}
          4: {name: entity.name.tag.so}
      - match: ":"
        name: punctuation.separator.namespace.so
      - match: \.
        name: punctuation.accessor.so

  jsx:
    comment: Avoid < operator expressions as best we can using Zertosh's regex
    patterns:
      - begin: (?=<[\p{Pc}\p{L}])
        end: (?=.)
        applyEndPatternLast: 1
        patterns:
          - include: "#tag-element-name"
    repository:
      tag-element-name:
        patterns:
          - comment: JSX Fragment
            name: meta.tag.so
            contentName: meta.tag.so
            begin: \s*+(<)\s*(?=>)
            end: (?<=</)(>)
            beginCaptures:
              1: {name: punctuation.definition.tag.so}
            endCaptures:
              1: {name: punctuation.definition.tag.so}
            patterns:
              - include: "#tag-termination"
          - comment: "Tags that end > are trapped in #tag-termination"
            name: meta.tag.so
            contentName: meta.tag.so
            begin: |
              (?x)\s*+(<)#start tag begin
              ([\p{Pc}\p{L}]\w*(?:[:.][\p{Pc}\p{L}]\w*)*)#tag name
              (?=[\/>\s])(?![:])(?<!\.|:)
            end: \s*(?<=</)(\2)(>)|(<?/>)|((?<=</)\O*?)>
            beginCaptures:
              1: {name: punctuation.definition.tag.so}
              2: {patterns: [include: "#tag-names"]}
            endCaptures:
              1: {patterns: [include: "#tag-names"]}
              2: {name: punctuation.definition.tag.so}
              3: {name: punctuation.definition.tag.so}
              4: {name: invalid.illegal.termination.so}
            patterns:
              - include: "#tag-termination"
              - include: "#tag-attributes"
      tag-termination:
        comment: uses non consuming search for </ in </tag>
        contentName: meta.jsx.children.so
        name: meta.jsx.children.so
        begin: (>)
        end: (</)
        captures:
          0: {name: punctuation.definition.tag.so}
        patterns:
          - include: "#evaluated-code"
          - include: "#entities"
          - include: "#tag-element-name"
          - include: "#string-content"
          - include: markdown.math.block
          - include: text.html.markdown#inline
      attribute-expression:
        begin: (?<==)\(
        end: \)
        captures:
          0: {name: punctuation.section.embedded.so}
        patterns:
          - include: $self
      tag-attributes:
        patterns:
          - include: source.yaml#flow-collection
          - include: "#evaluated-code"
          - include: "#attribute-name"
          - include: "#attribute-expression"
          - include: "#spread-attribute"
          - include: "#strings-unquoted"
          - include: "#strings-quoted"
          - include: "#numbers"
          - include: "#regexps"
          - include: "#string-content"
          - include: "#tag-element-name"
          - include: "#comments"
      spread-attribute:
        comment: Spread attribute { ... AssignmentExpression }
        match: (?<!\*)\*(?!\*)
        name: keyword.operator.spread.so
      attribute-name:
        patterns:
          - comment: Style attribute
            begin: (?<!\S)(style)(=)?({)
            end: \s*(})\s*
            beginCaptures:
              1: {name: entity.other.attribute-name.so}
              2: {name: punctuation.separator.key-value.so}
              3: {name: punctuation.section.embedded.so}
            endCaptures:
              1: {name: punctuation.section.embedded.so}
            patterns:
              - include: source.css.scss#flow_control
              - include: source.css.scss#rules
              - include: source.css.scss#properties
              - include: source.css.scss
          - comment: Style attribute
            begin: (?<!\S)(#{)
            end: \s*(})\s*
            captures:
              1: {name: punctuation.section.embedded.so}
            patterns:
              - include: source.css.scss#flow_control
              - include: source.css.scss#rules
              - include: source.css.scss#properties
              - include: source.css.scss
          - comment: Attribute names
            match: (?<=[)\]}])(=)?((?:\w|\\.)(?:\\.|[^\s</>])*)?\s*
            captures:
              1: {name: punctuation.separator.key-value.so}
              2:
                name: string.unquoted.html.so
                patterns:
                  - include: "#string-content"
                  - include: source.yaml#flow-scalar-plain-out-implicit-type
          - comment: Attribute names
            match: (?<!\S)([\p{Pc}\p{L}]\w*)(=)?((?:\w|\\.)(?:\\.|[^\s</>])*)?\s*
            captures:
              1: {name: entity.other.attribute-name.so}
              2: {name: punctuation.separator.key-value.so}
              3:
                name: string.unquoted.html.so
                patterns:
                  - include: "#string-content"
                  - include: source.yaml#flow-scalar-plain-out-implicit-type
      evaluated-code:
        begin: "{"
        end: "}"
        captures:
          0: {name: punctuation.section.embedded.so}
        patterns:
          - include: "#spread-attribute"
          - include: $self
      entities:
        patterns:
          - captures: &jsx-entities
              1: {name: punctuation.definition.entity.so}
              2: {name: punctuation.definition.entity.so}
            match: (&)#\d+(;)
            name: constant.character.escape.decimal.so
          - captures: *jsx-entities
            match: (?i)(&)#x\h+(;)
            name: constant.character.escape.hexadecimal.so
          - captures: *jsx-entities
            match: (?i)(&)#b[01]+(;)
            name: constant.character.escape.binary.so
          - captures: *jsx-entities
            match: (?i)(&)#q[0-3]\h+(;)
            name: constant.character.escape.quaternary.so
          - captures: *jsx-entities
            match: (?i)(&)#s[0-5]\h+(;)
            name: constant.character.escape.senary.so
          - captures: *jsx-entities
            match: (?i)(&)#o[0-7]\h+(;)
            name: constant.character.escape.octal.so
          - captures: *jsx-entities
            match: (?i)(&)#o[0-7]\h+(;)
            name: constant.character.escape.octal.so
          - captures: *jsx-entities
            match: (?i)(&)#z[\dab]\h+(;)
            name: constant.character.escape.duodecimal.so
          - captures: *jsx-entities
            match: (&)(?:\\.|[^(){}\[\]\s;])+?(;)
            name: constant.character.entity.xml
          - match: '&(?=\w*;)'
            name: invalid.illegal.ambiguous-ampersand.so
          - comment: Entity with & and invalid name
            match: '&\s*+;'
            name: invalid.illegal.bad-ampersand.so

  jsdoc:
    patterns:
      - include: "#jsdoc-inline-tags"
      - include: "#jsdoc-access"
      - include: "#jsdoc-as-namepath"
      - include: "#jsdoc-simple"
      - include: "#jsdoc-simple-namepath"
      - include: "#jsdoc-module"
      - include: "#jsdoc-type-name"
      - include: "#jsdoc-type-noname"
      - comment: additional jsdoc V2 keywords
        match: (?<!\w)@(add|api|body|codeend|codestart|demo|download|group|hide|iframe|image|inherits|option|outline|page|parent|signature|tag)\b
        name: storage.type.class.jsdoc
      - comment: additional jsdoc keywords
        match:
          (?<!\w)@(accessor|alternateClassName|aside|cfg|chainable|docauthor|evented|experimental|ftype|hide|inheritable|localdoc|markdown|mixins|new|override|preventable|ptype|removed|scss
          mixin|singleton|template|uses|xtype)\b
        name: storage.type.class.jsdoc

    repository:
      jsdoc-access:
        comment: "@tag protected...."
        match: (@(access))\s*(private|protected|public)?(?=\s|$)
        captures:
          1: {name: storage.type.class.jsdoc}
          3: {name: storage.modifier.jsdoc}
      jsdoc-module:
        comment: "@tag {optional type} module:file"
        begin: (@(exports|module|listens|requires)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(\S*)([\S\s]*))
        end: ^|(?=\*/)|(?=\5$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
          - match: (?:(module)(:))?(((?!\*/)\S)+)
            captures:
              1: {name: keyword.module.jsdoc}
              2: {name: punctuation.jsdoc}
              3: {name: string.modulename.jsdoc}
      jsdoc-as-namepath:
        comment: to terminate the block
        begin: (@(borrows|lends)\b)\s*(?=(?!\*/)\S+(?:(?:\s*\bas\b\s*(?!\*/)\S+)?)?([\S\s]*))
        end: ^|(?=\*/)|(?=\3$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-namepath-scopes"
      jsdoc-simple:
        comment: "@tag"
        match: (@(abstract|author|classdesc|copyright|default|defaultvalue|deprecated|description|desc|example|external|fileoverview|file|global|host|ignore|inheritdoc|inner|instance|license|override|overview|readonly|see|since|static|summary|todo|tutorial|virtual|variation|version)\b)(?=$|\s)
        captures:
          1: {name: storage.type.class.jsdoc}
      jsdoc-simple-namepath:
        comment: "@tag {opt type} Class#xxx or Class#Event:aaaa etc"
        begin: (@(alias|augments|callback|extends|emits|event|fires|interface|memberof|mixes|name|property|prop|this|typedef)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*\S*([\S*\s]*))
        end: ^|(?=\*/)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
          - include: "#jsdoc-namepath-scopes"
      jsdoc-type-name:
        comment: "@tag {optional type} name"
        begin: (@(arg|argument|class|constant|constructor|constructs|const|function|func|kind|member|method|mixin|namespace|param|var)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(((\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\S)+)?([\S\s]*))
        end: ^|(?=\*/)|(?=\7$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
          - include: "#jsdoc-name-scopes"
      jsdoc-type-noname:
        comment: "@tag {types}"
        begin: (@(enum|exception|implements|private|protected|public|returns|return|throws|type)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*([\S\s]*))
        end: ^|(?=\*/)|(?=\4$)
        beginCaptures:
          1: {name: storage.type.class.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-scopes"
      jsdoc-inline-tags:
        name: meta.tag.inline.jsdoc
        begin: (\[(?:(?>[^\[\]]+)|\g<-1>)*\])?({)(?=@)
        end: (})
        beginCaptures:
          1: {name: string.linktext.jsdoc}
          2: {name: meta.brace.curly.jsdoc}
        endCaptures:
          1: {name: meta.brace.curly.jsdoc}
        patterns:
          - match: (@(link|tutorial))\b([^}]*)
            captures:
              1: {name: storage.type.class.jsdoc}
              3: {name: string.jsdoc}
      jsdoc-typedef-scopes:
        name: entity.name.type.instance.jsdoc
        begin: "{"
        end: "}|^"
        captures:
          0: {name: meta.brace.curly.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-primitives"
          - include: "#jsdoc-namepath-scopes"
          - include: "#jsdoc-typedef-obj"
      jsdoc-typedef-primitives:
        match: \b(null|undefined|boolean|string|number)\b
        captures:
          1: {name: support.type.builtin.primitive.jsdoc}
      jsdoc-typedef-obj:
        comment: typedef object
        begin: "{"
        end: "}|^"
        captures:
          0: {name: meta.brace.curly.jsdoc}
        patterns:
          - include: "#jsdoc-typedef-primitives"
          - match: \b([\p{Pc}\p{L}]\w*)\s*(:)
            captures:
              1: {name: variable.other.readwrite.jsdoc}
          - include: "#jsdoc-namepath-scopes"
          - include: "#jsdoc-typedef-obj"
      jsdoc-name-scopes:
        patterns:
          - match: ((?!\*/)[\S&&[^\[\]"']])+
            captures:
              0: {name: variable.other.jsdoc}
          - name: variable.other.jsdoc
            begin: \[
            end: \]|^
            patterns:
              - include: "#jsdoc-string"
              - include: "#jsdoc-name-scopes"
      jsdoc-namepath-scopes:
        patterns:
          - match: \s*\b(as)\b\s*(?=[\p{Pc}\p{L}])
            captures:
              1: {name: keyword.as.jsdoc}
          - match: \s*(?:([\p{Pc}\p{L}&&\P{Ll}]+\w*)|([\p{Pc}\p{L}]\w*))(?=[\s\-~.#]|$)
            captures:
              1: {name: entity.name.class.jsdoc}
              2: {name: entity.name.function.jsdoc}
          - match: (\.)([\p{Pc}\p{L}]\w*)(?=\s|$|\")
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: entity.name.function.method.static.jsdoc}
          - match: (\#)([\p{Pc}\p{L}]\w*)(?=\s|$|\")
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: entity.name.function.method.instance.jsdoc}
          - match: (~|-)([\p{Pc}\p{L}]\w*)(?=\s|$|\")
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: entity.name.function.method.inner.jsdoc}
          - match: (\#)(event)(:)
            captures:
              1: {name: keyword.operator.accessor.jsdoc}
              2: {name: keyword.event.jsdoc}
              3: {name: keyword.operator.jsdoc}
          - name: string.method.jsdoc
            begin: \.(?="|')
            end: (?=.)
            applyEndPatternLast: 1
            patterns:
              - include: "#jsdoc-string"
      jsdoc-string:
        name: string.jsdoc
        match: \"(\\"|[^"])*"|'(\\'|[^'])*'

  comments:
    patterns:
      - begin: \s*((/\+\+))
        end: (\s*(\+/))
        name: comment.block.documentation.nested.so
        captures:
          1: {name: comment.block.documentation.so}
          2: {name: punctuation.definition.comment.so}
        patterns:
          - include: "#jsdoc"
          - include: text.html.markdown#inline
          - include: "#nested-block-jsdoc"
      - begin: \s*((/\+))
        end: (\s*(\+/))
        name: comment.block.nested.so
        captures:
          1: {name: comment.block.nested.so}
          2: {name: punctuation.definition.comment.so}
        patterns:
          - include: text.html.markdown#inline
          - include: "#nested-jsdoc"
      - begin: \s*((/\*\*))
        end: (\s*(\*/))
        name: comment.block.documentation.so
        captures:
          1: {name: comment.block.documentation.so}
          2: {name: punctuation.definition.comment.so}
        patterns:
          - include: "#jsdoc"
          - include: text.html.markdown#inline
      - begin: \s*((/\*))
        end: (\s*(\*/))
        name: comment.block.so
        captures:
          1: {name: comment.block.so}
          2: {name: punctuation.definition.comment.so}
        patterns:
          - include: text.html.markdown#inline
      - begin: ((^\s*)|\s*)((//=))
        end: \s*$
        name: comment.line.special.so
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.so}
          3: {name: comment.line.special.so}
          4: {name: punctuation.definition.comment.so}
        endCaptures:
          1: {name: punctuation.definition.comment.so}
        patterns:
          - include: "#comment-special"
          - include: text.html.markdown#inline
      - begin: ((^\s*)|\s*)((//\+))
        end: \s*$
        name: comment.line.playground.so
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.so}
          3: {name: comment.line.playground.so}
          4: {name: punctuation.definition.comment.so}
        endCaptures:
          0: {name: comment.line.playground.so}
        patterns:
          - include: "#jsdoc"
          - include: text.html.markdown#inline
      - begin: ((^\s*)|\s*)((///))
        end: \s*$
        name: comment.line.documentation.so
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.so}
          3: {name: comment.line.documentation.so}
          4: {name: punctuation.definition.comment.so}
        endCaptures:
          0: {name: comment.line.documentation.so}
        patterns:
          - include: "#jsdoc"
          - include: text.html.markdown#inline
      - begin: ((^\s*)|\s*)((//!|\A#!))
        end: \s*$
        name: comment.line.shebang.so
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.so}
          3: {name: comment.line.shebang.so}
          4: {name: punctuation.definition.comment.so}
        endCaptures:
          0: {name: comment.line.shebang.so}
        patterns:
          - include: text.html.markdown#inline
      - begin: ((^\s*)|\s*)((//\*))
        end: \s*$
        name: comment.line.doctype.so
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.so}
          3: {name: comment.line.doctype.so}
          4: {name: punctuation.definition.comment.so}
        endCaptures:
          0: {name: comment.line.doctype.so}
        patterns:
          - include: text.html.markdown#inline
      - begin: ((^\s*)|\s*)((//))
        end: \s*$
        name: comment.line.number-sign.so
        beginCaptures:
          2: {name: punctuation.whitespace.comment.leading.so}
          3: {name: comment.line.double-slash.so}
          4: {name: punctuation.definition.comment.so}
        endCaptures:
          0: {name: comment.line.number-sign.so}
        patterns:
          - include: text.html.markdown#inline

    repository:
      nested-block-jsdoc:
        begin: (/\+\+)\s*
        end: \s*(\+/)
        name: comment.block.documentation.nested.so
        captures:
          1: {name: punctuation.definition.comment.so}
        patterns:
          - include: "#jsdoc"
          - include: text.html.markdown#inline
          - include: "#nested-block-jsdoc"
      nested-block:
        begin: (/\+)\s*
        end: \s*(\+/)
        name: comment.block.nested.so
        captures:
          1: {name: punctuation.definition.comment.so}
        patterns:
          - include: text.html.markdown#inline
          - include: "#nested-block"
      nested-special:
        begin: (/\+)\s*
        end: \s*(\+/)
        captures:
          1: {name: punctuation.definition.comment.so}
        patterns:
          - include: "#jsdoc"
          - include: text.html.markdown#inline
          - include: "#nested-special"

  calls:
    patterns:
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |def|func?|function|proc|process|macro
          |let|va[rl]|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|component|element|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|[dr]efer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [\p{Pc}\p{L}]\w*
          )
          \b\s+
          (?=
          (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |def|func?|function|proc|process|macro
          |let|va[rl]|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|component|element|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|[dr]efer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [\w]+|\[(?!<)|<\|(?!>)(?=\|*)|<\+(?!>)(?=\+*))
        captures:
          1: {patterns: [include: "#function-entities"]}
      - comment: |
          Function calls
          For testing only:
          for let x int|str, y int in list arr 'json' if x % 2 < 3
        match: |
          (?x)\s*\b
          (
          (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |def|func?|function|proc|process|macro
          |let|va[rl]|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|component|element|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|[dr]efer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [\p{Pc}\p{L}]\w*
          )
          \b
          (?=
          !(?:\.=?)?\s*|
          \s+[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]*
          (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
          \b(?:# don't match keywords
          in|of|as|is|new|infer|unset
          |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
          |length|delete|to|til|thru|at|by
          |n?and|x?n?or|not|parallel|series|spawn|discard
          |def|func?|function|proc|process|macro
          |let|va[rl]|const|declare
          |class|given|constraint|enum|relation|lattice
          |project|attribute|protocol|member|extend|fragment|interface|struct
          |module|package|namespace|object|record|label
          |raw|data|query|schema|style|component|element|trait|friend|alias|type
          |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
          |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
          |switch|case|fail|default|match|when|pass|fallthru
          |try|retry|throw|raise|catch|rescue|finally
          |with|ref|[dr]efer|show|hide|enter|exit
          |then|begin|end|debug|check|assert
          |break|continue|halt|skip|fixed|lock
          |(?:return|give|await|yield|throw|raise)s?
          |import|export|show|hide|open|close
          |from|where|join|equals?|[io]nto|order
          |take|drop|fold|scan|select|group|use|using
          )\b
          )
          [\w]+|\[<|
          (?:[!?~]?\.=?|[?!:]:=?|->)?\s*\(|
          (?:[!?~]?\.=?|[?!:]:=?|->)?\s+['"`\\\[]
          )
        captures:
          1: {patterns: [include: "#function-entities"]}

  function-entities:
    patterns:
      - match: |
          (?x)\b(?:
          (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
          (?:# Properties (note all properties are by default, symbols)
          (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
          ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
          ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
          ([\p{Pc}\p{L}]\w*)
          )
          |
          (?:# Objects and maps
          (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
          ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
          ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
          ([\p{Pc}\p{L}]\w*)
          )
          (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)
          |
          (?:# Regular variables
          (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
          ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
          ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
          ([\p{Pc}\p{L}]\w*)
          )
          )\b
        captures:
          1: {name: entity.name.tag.so}
          2: {name: entity.name.tag.so support.class.component.so}
          3: {name: entity.name.class.builtin.so}
          4: {name: entity.name.function.method.so}
          5: {name: variable.other.global.so}
          6: {name: variable.other.constant.object.so}
          7: {name: variable.other.conditional.so}
          8: {name: variable.other.object.so}
          9: {name: entity.name.function.tagged-template.so}
          10: {name: entity.name.type.so}
          11: {name: entity.name.class.so}
          12: {name: entity.name.function.so}
      - include: $self

  variables:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int
      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b
      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
      ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
      ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
      ([\p{Pc}\p{L}]\w*)
      )
      |
      (?:# Objects and maps
      (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
      ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
      ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
      ([\p{Pc}\p{L}]\w*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)
      |
      (?:# Regular variables
      (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
      ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
      ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
      ([\p{Pc}\p{L}]\w*)
      )
      )
      \b\s*
    captures:
      1: {name: variable.other.index.so}
      2: {name: variable.other.constant.property.so}
      3: {name: variable.other.property.static.so}
      4: {name: variable.other.property.so}
      5: {name: variable.other.global.so}
      6: {name: variable.other.constant.object.so}
      7: {name: variable.other.conditional.so}
      8: {name: variable.other.object.so}
      9: {name: variable.other.dollar.so}
      10: {name: variable.other.constant.so}
      11: {name: variable.other.class.so}
      12: {name: variable.other.readwrite.so}

  operators:
    patterns:
      - include: "#special-operators"
      - include: "#unary-ops"
      - include: "#binary-ops"

    repository:
      binary-ops-builtin:
        patterns:
          - comment: augmented assignment += -= *= /= etc
            match: (?<=^|['"`\\({\[\s])([\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+(?<![!:~.<=>])=)(?=$|['"`\\\s)}\]])
            name: keyword.operator.assignment.augmented.so

          - comment: |
              BUILTIN OPERATORS

              1: assignment : :=
              2: arithmetic + - * ** *** / // /// % %% *> <*
              3: increment/decrement ++ --
              4: logical && || ^^ !& !| !^ &| &!
              5: bitwise & | ^ ~
              6: bitwise shift << >> <<< >>>
              7: function pipeline <| |> <|| ||> <||| |||>
              8: function composition +> <+ <++ +>>
              9: class <: :> :< >: <:< >:> <:> >:< <! !> !< >! <!< >!> <!> >!<
              10: relational < > <= >=
              11: regex =< <> </ /> <$ $> <$> <+> <*> </> <$> $
              12: equality == != === !==
              13: wavy operators ~> <~ ~~> <~~
              14: fat arrow-like => ==> <==
              15: skinny arrow-like -> --> <- <--
              16: null-coalescing ??
              17: non-null coalescing !!
              18: compact ternary operator ?:
              19: inverse ternary operator !:
              20: infix function call $:
            captures:
              1: {name: keyword.operator.assignment.so}
              2: {name: keyword.operator.arithmetic.so}
              3: {name: keyword.operator.successor.so}
              4: {name: keyword.operator.logical.so}
              5: {name: keyword.operator.bitwise.so}
              6: {name: keyword.operator.bitwise.shift.so}
              7: {name: keyword.operator.pipeline.so}
              8: {name: keyword.operator.compose.so}
              9: {name: keyword.operator.class.so}
              10: {name: keyword.operator.relational.so}
              11: {name: keyword.operator.regexp.so}
              12: {name: keyword.operator.comparison.so}
              13: {name: keyword.operator.similarity.so}
              14: {name: keyword.operator.arrow.fat.so}
              15: {name: keyword.operator.arrow.skinny.so}
              16: {name: keyword.operator.null-coalescing.so}
              17: {name: keyword.operator.coalescing.so}
              18: {name: keyword.operator.conditional.so}
              19: {name: keyword.operator.ternary.so}
              20: {name: keyword.operator.macro.dollar.so}
            match: |
              (?x)
              (?<=^|['"`\\({\[\s])# spacing
              (?:
              (:?=)#1
              |([+-]|\*{1,3}|~?/|%%?|\#\#?|<?\*>?)#2
              |(\+\+|--)#3
              |([&|^~]{2})#4
              |([&|^~])#5
              |(<<<?|>>>?)#6
              |(\|{1,3}>|<\|{1,3})#7
              |(\+>|<\+)#8
              |([<>]?[!:][<>]?)#9
              |([<>]=?)#10
              |(<>|=<|<?[/*|+$]>?)#11
              |([!=]==?)#12
              |(~>|<~|~~>|<~~)#13
              |(<==|==?>)#14
              |(--?>|<--?)#15
              |(\?\?)#16
              |(!!)#17
              |(\?:)#18
              |(!:)#19
              |(\$:)#20
              )
              (?=$|['"`\\\s)}\]])

          - comment: |
              CUSTOM OPERATORS

              1: custom bitwise (& | ^ ~)
              2: custom arithmetic (+ - * / %)
              3: custom prototype (:)
              4: custom accessor (.)
              5: custom equality (= !)
              6: custom comparison (< >)
              7: custom private (? #)
              8: custom mathematical (Unicode Sm)
              9: custom currency (Unicode Sc)
              10: custom ASCII (between \x80 and \xff)
              11: custom infix operators (all other chars)
            captures:
              1: {name: keyword.operator.bitwise.custom.so}
              2: {name: keyword.operator.arithmetic.custom.so}
              3: {name: keyword.operator.prototype.custom.so}
              4: {name: keyword.operator.accessor.custom.so}
              5: {name: keyword.operator.comparison.custom.so}
              6: {name: keyword.operator.relational.custom.so}
              7: {name: keyword.operator.private.custom.so}
              8: {name: keyword.operator.math.custom.so}
              9: {name: keyword.operator.currency.custom.so}
              10: {name: keyword.operator.ascii.custom.so}
              11: {name: keyword.operator.infix.custom.so}
            match: |
              (?x)
              (?<=^|['"`\\({\[\s])# spacing
              (?:
              ([&|^~][\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#1
              |([+\-*/%][\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#2
              |(:[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#3
              |(\.[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#3
              |([!=][\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#4
              |([<>][\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#5
              |([?\#][\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#6
              |(\p{Sm}[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#7
              |(\p{Sc}[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#8
              |([\p{S}\p{P}&&[\x80-\xff]][\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#9
              |([\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)#10
              )
              (?=$|['"`\\\s)}\]])

      binary-ops:
        match: (?<=^|['"`\\\s({\[])([\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]+)(?=$|['"`\\\s)}\]])
        captures:
          0: {patterns: [include: "#binary-ops-builtin"]}

      unary-ops:
        patterns:
          - &transfix-operators
            comment: Transfix binary operators
            match: |
              (?x)(?<=\b|^|[)}\]'"`\\])
              (?:
              ([>.]\.[.<])
              |(\?\.=?)
              |(~\.=?)
              |(!\.=?)
              |((?:::|\.)=?)
              |(->))
              (?=\b|$|[({\['"`\\])
            captures:
              1: {name: keyword.operator.range.so}
              2: {name: punctuation.accessor.optional.so}
              3: {name: punctuation.accessor.cascade.so}
              4: {name: punctuation.accessor.call.so}
              5: {name: punctuation.accessor.so}
              6: {name: punctuation.accessor.module.so}

          - &prefix-operators
            comment: Prefix operators
            match: |
              (?x)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |(\#)#14
              |[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]])#15
              (?=[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]*
              [\w({\[_,;'"`])
            name: keyword.operator.prefix.so
            captures:
              1: {name: keyword.operator.module.all.so}
              2: {name: keyword.operator.increment.so}
              3: {name: keyword.operator.decrement.so}
              4: {name: keyword.operator.intersection.so}
              5: {name: keyword.operator.union.so}
              6: {name: keyword.operator.symmetric.so}
              7: {name: keyword.operator.logical.so}
              8: {name: keyword.operator.private.so}
              9: {name: keyword.operator.decorator.so}
              10: {name: keyword.operator.bitwise.not.so}
              11: {name: keyword.operator.existential.so}
              12: {name: keyword.operator.assignment.so}
              13: {name: keyword.operator.pipeline.so}
              14: {name: keyword.operator.private.so}
              15: {name: keyword.operator.prefix.so}

          - &suffix-operators
            comment: Suffix operators
            match: |
              (?x)
              (?<=[\w)}\]_,;'"`]
              [\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]*)
              (?:(\*)#1
              |(\+)#2
              |(\-)#3
              |(\&)#4
              |(\|)#5
              |(\^)#6
              |(\!)#7
              |(\$)#8
              |(\@)#9
              |(\~)#10
              |(\?)#11
              |(\=)#12
              |(\$)#13
              |(\#)#14
              |[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]])#15
            name: keyword.operator.suffix.so
            captures:
              1: {name: keyword.operator.module.all.so}
              2: {name: keyword.operator.increment.so}
              3: {name: keyword.operator.decrement.so}
              4: {name: keyword.operator.intersection.so}
              5: {name: keyword.operator.union.so}
              6: {name: keyword.operator.symmetric.so}
              7: {name: punctuation.accessor.call.so}
              8: {name: keyword.operator.private.so}
              9: {name: keyword.operator.decorator.so}
              10: {name: keyword.operator.bitwise.so}
              11: {name: punctuation.accessor.optional.so}
              12: {name: keyword.operator.assignment.so}
              13: {name: keyword.operator.pipeline.so}
              14: {name: keyword.operator.private.so}
              15: {name: keyword.operator.suffix.so}

      pipeline-operator:
        patterns:
          - applyEndPatternLast: 1
            begin: |
              (?x)\s*(?:(\++>)|(\|+>))(?=\s*(
              [\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]*# prefix
              (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
              \b(?:# don't match keywords
              in|of|as|is|new|infer|unset
              |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
              |length|delete|to|til|thru|at|by
              |n?and|x?n?or|not|parallel|series|spawn|discard
              |def|func?|function|proc|process|macro
              |let|va[rl]|const|declare
              |class|given|constraint|enum|relation|lattice
              |project|attribute|protocol|member|extend|fragment|interface|struct
              |module|package|namespace|object|record|label
              |raw|data|query|schema|style|component|element|trait|friend|alias|type
              |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
              |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
              |switch|case|fail|default|match|when|pass|fallthru
              |try|retry|throw|raise|catch|rescue|finally
              |with|ref|[dr]efer|show|hide|enter|exit
              |then|begin|end|debug|check|assert
              |break|continue|halt|skip|fixed|lock
              |(?:return|give|await|yield|throw|raise)s?
              |import|export|show|hide|open|close
              |from|where|join|equals?|[io]nto|order
              |take|drop|fold|scan|select|group|use|using
              )\b
              )
              [\w]+
              (?:[\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]*# transfix
              [\w]+)*
              [\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]*# suffix
              )\s*([^(]|$|;))
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.compose.so}
              2: {name: keyword.operator.pipeline.so}
            patterns:
              - match: |
                  (?x)\s*\b
                  (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
                  \b(?:# don't match keywords
                  in|of|as|is|new|infer|unset
                  |typeof|nameof|sizeof|pairof|keyof|valueof|instanceof
                  |length|delete|to|til|thru|at|by
                  |n?and|x?n?or|not|parallel|series|spawn|discard
                  |def|func?|function|proc|process|macro
                  |let|va[rl]|const|declare
                  |class|given|constraint|enum|relation|lattice
                  |project|attribute|protocol|member|extend|fragment|interface|struct
                  |module|package|namespace|object|record|label
                  |raw|data|query|schema|style|component|element|trait|friend|alias|type
                  |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
                  |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
                  |switch|case|fail|default|match|when|pass|fallthru
                  |try|retry|throw|raise|catch|rescue|finally
                  |with|ref|[dr]efer|show|hide|enter|exit
                  |then|begin|end|debug|check|assert
                  |break|continue|halt|skip|fixed|lock
                  |(?:return|give|await|yield|throw|raise)s?
                  |import|export|show|hide|open|close
                  |from|where|join|equals?|[io]nto|order
                  |take|drop|fold|scan|select|group|use|using
                  )\b
                  )
                  (?:
                  (?:# Objects and maps
                  (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
                  ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
                  ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
                  ([\p{Pc}\p{L}]\w*)
                  )
                  (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)
                  |
                  (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
                  (?:# Properties (note all properties are by default, symbols)
                  (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
                  ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
                  ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
                  ([\p{Pc}\p{L}]\w*)
                  )
                  |
                  (?:# Regular variables
                  (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
                  ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
                  ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
                  ([\p{Pc}\p{L}]\w*)
                  )
                  )\b
                captures:
                  1: {name: variable.other.global.so}
                  2: {name: variable.other.constant.object.so}
                  3: {name: variable.other.conditional.so}
                  4: {name: variable.other.object.so}
                  5: {name: entity.name.tag.so}
                  6: {name: entity.name.tag.so support.class.component.so}
                  7: {name: entity.name.class.builtin.so}
                  8: {name: entity.name.function.method.so}
                  9: {name: entity.name.function.tagged-template.so}
                  10: {name: entity.name.type.so}
                  11: {name: entity.name.class.so}
                  12: {name: entity.name.function.so}
              - *transfix-operators

      special-operators:
        patterns:
          - include: "#pipeline-operator"
          - begin: (?<=\s)(\?)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.conditional.so}
            patterns:
              - begin: \s*(?=([\p{Pc}\p{L}]\w*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\!)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.ternary.so}
            patterns:
              - begin: \s*(?=([\p{Pc}\p{L}]\w*)\s*:)
                end: \s*(?=:\s|$)
                patterns:
                  - include: "#constants"
                  - include: "#variables"
              - include: $self
          - begin: (?<=\s)(\$)(?=\s)
            end: (?<=^|\s)(:)(?=\s|$)
            captures:
              1: {name: keyword.operator.macro.dollar.so}
            patterns:
              - begin: \s*(?=([\p{Pc}\p{L}]\w*)\s*:)
                end: \s*(?=:\s|$)
                name: entity.name.function.so
              - include: $self

  custom-types:
    comment: |
      For testing only
      _int int_ _int._int INT INT.INT Int Int.Int int int.int

      Four types of variables:
      - underscore variables (either surrounded by _ on one end or both)
      - constant variables: in SHOUT_SNAKE_CASE
      - class variables: in PascalCase
      - regular variables: in camelCase
    match: |
      (?x)\s*\b

      (?!(?<!(?:(?<!\.)\.|[?!:]:)=?|->)
      \b(?:# don't match keywords
      in|of|new|unset|length|delete|to|til|thru|at|by
      |n?and|x?n?or|not|parallel|series|spawn|discard
      |def|func?|function|proc|process|macro
      |let|va[rl]|const|declare
      |class|given|constraint|enum|relation|lattice
      |project|attribute|protocol|member|extend|fragment|interface|struct
      |module|package|namespace|object|record|label
      |raw|data|query|schema|style|component|element|trait|friend|alias|type
      |if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard
      |for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat|do|redo
      |switch|case|fail|default|match|when|pass|fallthru
      |try|retry|throw|raise|catch|rescue|finally
      |with|ref|[dr]efer|show|hide|enter|exit
      |then|begin|end|debug|check|assert
      |break|continue|halt|skip|fixed|lock
      |(?:return|give|await|yield|throw|raise)s?
      |import|export|show|hide|open|close
      |from|where|join|equals?|[io]nto|order
      |take|drop|fold|scan|select|group|use|using
      )\b
      )
      (?:
      (?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
      (?:# Properties (note all properties are by default, symbols)
      (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
      ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
      ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
      ([\p{Pc}\p{L}]\w*)
      )
      |
      (?:# Objects and maps
      (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
      ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
      ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
      ([\p{Pc}\p{L}]\w*)
      )
      (?=(?:[?!~]?\.?=?)?\[(?!<)|(?![>.]\.[.<]?)[?!~]?\.=?|[?!:]:|->)
      |
      (?:# Regular variables
      (\p{Pc}+[\p{Pc}\p{L}]\w*(?!\p{Pc}+)|[\p{Pc}\p{L}][\w&&\P{Pc}]*\p{Pc}+)|
      ([\p{L}&&\P{Ll}][\w&&\P{Ll}]*)|
      ((?:[\p{Pc}\p{L}&&\P{Ll}]+[\w&&\P{Lu}]*)+)|
      ([\p{Pc}\p{L}]\w*)
      )
      )\b
    captures: &custom-types
      1: {name: entity.name.module.so}
      2: {name: entity.name.tag.so}
      3: {name: entity.name.namespace.so}
      4: {name: entity.name.interface.so}
      5: {name: entity.name.tag.block.so}
      6: {name: entity.name.tag.script.so}
      7: {name: entity.name.tag.style.so}
      8: {name: entity.name.tag.inline.so}
      9: {name: entity.name.label.so}
      10: {name: entity.name.project.so}
      11: {name: entity.name.class.so}
      12: {name: entity.name.type.so}

  type-brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#square-brackets"
      - include: "#round-brackets"

    repository:
      curly-brackets: &type-curly-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.mapping.so
              - match: (?<!\s):(?!:)
                name: punctuation.separator.key-value.so
              - match: (?<=^|[({\[])\s*([*+-](?:\s+[*+-])*)
                name: punctuation.definition.block.sequence.item.so

        patterns:
          - begin: (?<=(?::|:?=|->)\s+|[({\[]\s*|\b(?:var|let|const)\b\s*)(\#\{)\s*
            end: \s*(\})
            captures:
              1: {name: punctuation.definition.mapping.so}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: (?<=(?::|:?=|->)\s+|[({\[]\s*|\b(?:var|let|const)\b\s*)(\{)\s*
            end: \s*(\})
            captures:
              1: {name: punctuation.definition.dictionary.so}
            patterns:
              - include: "#labels"
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      round-brackets: &type-round-brackets
        repository:
          punctuation:
            patterns:
              - match: ","
                name: punctuation.separator.arguments.so
        patterns:
          - begin: \s*(\#\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.parameters.so}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.so}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

      square-brackets: &type-square-brackets
        repository:
          punctuation:
            patterns:
              - match: (?<=\b|^|[)}\]'"`\\\s])(:)(?=\b|$|[({\['"`\\\s])
                captures:
                  1: {name: punctuation.separator.slice.so}
              - match: ","
                name: punctuation.separator.sequence.so
        patterns:
          - begin: \s*(\[<)
            end: \s*(>\])
            captures:
              1: {name: punctuation.definition.typeparameters.so}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\#\[)
            end: \s*(\])
            captures:
              1: {name: punctuation.definition.sequence.so}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self
          - begin: \s*(\[)
            end: \s*(\])
            captures:
              1: {name: punctuation.definition.array.so}
            patterns:
              - include: "#punctuation"
              - include: "#types"
              - include: $self

  type-keywords:
    patterns:
      - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(extends|implements)\b\s*
        name: storage.type.$1.so
      - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(typeof|nameof|sizeof|keyof|valueof|pairof|infer|as|is)\b\s*
        name: keyword.operator.expression.$1.so

  type-operators:
    patterns:
      - comment: transfix binary operators
        match: |
          (?x)(?<=^|[)}\]\w'"`])
          (?:(\?[:.])|(~[:.])|(![:.])|(::|\.)|(->))
          (?=$|[({\[\w'"`])
        captures:
          1: {name: punctuation.accessor.optional.so}
          2: {name: punctuation.accessor.cascade.so}
          3: {name: punctuation.accessor.call.so}
          4: {name: punctuation.accessor.so}
          5: {name: punctuation.accessor.module.so}

      - comment: type operators
        match: |
          (?x)\s*
          (?:
          (\+)|
          (\-)|
          (\*)|
          (\/)|
          (\%)|
          (\!)|
          (\?)|
          (\&)|
          (\|)|
          (\^)|
          (\~)|
          (\$)|
          ([<>])
          )
          (?=$|[({\[\w'"\s])
        captures:
          1: {name: keyword.operator.sum.so}
          2: {name: keyword.operator.difference.so}
          3: {name: keyword.operator.product.so}
          4: {name: keyword.operator.quotient.so}
          5: {name: keyword.operator.remainder.so}
          6: {name: keyword.operator.only.so}
          7: {name: keyword.operator.maybe.so}
          8: {name: keyword.operator.intersection.so}
          9: {name: keyword.operator.union.so}
          10: {name: keyword.operator.symmetric.so}
          11: {name: keyword.operator.negation.so}
          12: {name: keyword.operator.macro.dollar.so}
          13: {name: keyword.operator.class.so}

  type-annotation:
    applyEndPatternLast: 1
    begin: (:)(?=\s|$)
    end: (?=\O)|$
    beginCaptures:
      1: {name: punctuation.definition.annotation.so}
    patterns:
      - include: "#types"

  types:
    patterns:
      - match: \s*(==?>|-->|~~?>)
        name: keyword.operator.type.function.so
      - match: \s*(<==|<--?|<~~?)
        name: keyword.operator.type.channel.so
      - include: "#arguments-clause"
      - include: "#declarations"
      - include: "#type-keywords"
      - include: "#modifier-keywords"
      - include: "#type-names"
      - include: "#custom-types"
      - include: "#type-brackets"
      - include: "#type-operators"
      - include: "#literals"

  modifier-keywords:
    match: |
      (?x)
      ((?:
      \s*(?:
      (?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(?:# Access modifiers
      public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
      |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
      # Function or method modifiers
      |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
      |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound|sealed)
      |# Function or method modifiers
      (?:pre|in|post|suf|af|trans|interface)fix|
      (?:u|bi|ter|)nary|oper
      |# Decorators
      @(?:
      [\p{Pc}\p{L}]\w*
      (?:(?:[?!]?\.|[?!:]:|->)
      (?:(?:[\p{Pc}\p{L}]\w*)))*
      )
      )
      )
      \s*)*)
      (?=\s*\b
      (?:
      class|extend
      |given|constraint
      |enum|relation
      |fragment|struct
      |def|func?|function|proc|process|macro
      |interface|schema
      |module|package
      |namespace|lattice
      |object|record
      |protocol|member
      |project|attribute
      |raw
      |data|query
      |style|component|element
      |trait|friend
      )\b
      )
    captures:
      1:
        patterns: &modifier-keywords
          - match: |
              (?x)\s*@(?:
              [\p{Pc}\p{L}]\w*
              (?:(?:[?!]?\.|[?!:]:|->)
              (?:(?:[\p{Pc}\p{L}]\w*)))*
              )\s*
            name: entity.name.class.decorator.so
          - match: |
              (?x)\s*
              \s*\b
              (?:
              (# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              )|
              (# Function or method modifiers
              [gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound|sealed)
              )|
              (# Property modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              )
              )\b\s*
            captures:
              1: {name: storage.modifier.so}
              2: {name: storage.type.accessor.so}
              3: {name: storage.type.property.so}

  support:
    patterns:
      - comment: Swift
      - include: source.swift#builtin-properties
      - include: source.swift#builtin-types
      - include: source.swift#builtin-functions

      - comment: JavaScript
      - include: source.js#support-objects
      - include: "#support-js"

      - comment: Python
      - include: source.python#builtin-functions
      - include: source.python#builtin-types
      - include: source.python#magic-function-names
      - include: source.python#magic-variable-names

      - comment: PHP
      - include: source.php#support
      - include: source.php#class-builtin
      - include: "#support-php"

      - comment: Other

  declaration-keywords:
    comment: clause keywords
    match: |
      (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(?:
      (def|func?|function|proc|process|macro)# function
      |(let|va[rl]|const)# variable
      |(class|extend)# class
      |(given|constraint)# constraint
      |(enum|relation)# enumeration
      |(project|attribute)# project
      |(fragment|struct)# fragment
      |(interface|schema)# interface
      |(module|package)# module
      |(namespace|lattice)# function
      |(object|record)# object
      |(raw)# markup
      |(data|query)# indented GraphQL
      |(style|component|element)# inline CSS
      |(trait|friend)# trait
      |(type|alias)# type alias
      |(declare)# declaration
      )\b\s*
    captures:
      1: {name: storage.type.function.so}
      2: {name: storage.type.so}
      3: {name: storage.type.class.so}
      4: {name: storage.type.constraint.so}
      5: {name: storage.type.enum.so}
      6: {name: storage.type.project.so}
      7: {name: storage.type.fragment.so}
      8: {name: storage.type.interface.so}
      9: {name: storage.type.module.so}
      10: {name: storage.type.namespace.so}
      11: {name: storage.type.object.so}
      12: {name: storage.type.raw.so}
      13: {name: storage.type.schema.so}
      14: {name: storage.type.style.so}
      15: {name: storage.type.trait.so}
      16: {name: keyword.other.typedef.so}
      17: {name: keyword.other.declare.so}

  general-keywords:
    comment: general keywords
    match: |
      (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(?:
      (if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard)#1
      |(for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat)#2
      |(switch|case|fail|default|fallthru)#3
      |(match|when|pass)#4
      |(try|retry|throw|raise|catch|rescue|finally)#5
      |(with)#6
      |(ref|[dr]efer|show|hide|enter|exit)#7
      |(then)#8
      |(debug|check|assert)#9
      |(break|continue|halt|skip|return|give|label|await|yield|throw|raise|yield\b\s+\bfrom)# 10
      |((?:im|ex)port|show|hide)# 11
      |(parallel|series|spawn|discard)#12
      |(do|redo)#13
      |(begin|end)#14
      )\b\s*
    captures:
      1: {name: keyword.control.conditional.so}
      2: {name: keyword.control.loop.so}
      3: {name: keyword.control.switch.so}
      4: {name: keyword.control.match.so}
      5: {name: keyword.control.error.so}
      6: {name: keyword.control.with.so}
      7: {name: keyword.control.so}
      8: {name: keyword.control.then.so}
      9: {name: keyword.other.$10.so}
      10: {name: keyword.control.flow.so}
      11: {name: keyword.control.module.so}
      12: {name: keyword.control.thread.so}
      13: {name: keyword.control.do.so}
      14: {name: keyword.control.$14.so}

  expression-keywords:
    comment: expression keywords
    match: |
      (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(?:
      (in|of|as|is|new|infer|instanceof
      |typeof|nameof|sizeof|keyof|pairof|valueof)
      |(length)|(delete)|(to|til|thru|at|by)|(unset)
      |(n?and|x?n?or|not)
      )\b\s*
    captures:
      1: {name: keyword.operator.expression.$1.so}
      2: {name: keyword.operator.expression.length.so}
      3: {name: keyword.operator.expression.delete.so}
      4: {name: keyword.operator.expression.range.so}
      5: {name: keyword.operator.expression.void.so}
      6: {name: keyword.operator.expression.logical.so}

  keywords:
    patterns:
      - include: "#sql-expression"
      - include: "#module-expression"
      - include: "#control-expression"
      - include: "#query-expression"
      - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(let|va[rl]|const)\b\s*
        name: storage.type.so
      - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(declare)\b\s*
        name: keyword.other.$1.so
      - include: "#modifier-keywords"
      - include: "#declaration-keywords"
      - include: "#expression-keywords"
      - include: "#general-keywords"

    repository:
      sql-expression:
        patterns:
          - captures:
              1: {name: keyword.other.create.so}
              2: {name: keyword.other.table.so}
              5: {name: entity.name.function.so}
            match:
              (?:\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(create(?:\s+or\s+replace)?|replace)\s+(aggregate|conversion|database|domain|function|group|(unique\s+)?index|language|operator
              class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)(['"`]?)(\w+)\4
            name: meta.create.so
          - captures:
              1: {name: keyword.other.drop.so}
              2: {name: keyword.other.table.so}
            match:
              (?:\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(drop|delete)\s+(aggregate|conversion|database|domain|function|group|index|language|operator
              class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))
            name: meta.drop.so
          - captures:
              1: {name: keyword.other.drop.so}
              2: {name: keyword.other.table.so}
              3: {name: entity.name.function.so}
              4: {name: keyword.other.cascade.so}
            match: (?:\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(drop|delete)\s+(table)\s+(\w+)(\s+cascade)?\b)
            name: meta.drop.so
          - captures:
              1: {name: keyword.other.alter.so}
              2: {name: keyword.other.table.so}
            match:
              (?:\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(alter|update)\s+(aggregate|conversion|database|domain|function|group|index|language|operator
              class|operator|proc(edure)?|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)
            name: meta.alter.so

      control-expression:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(halt|skip|break|continue|goto|label)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.control.flow.so}
        patterns:
          - match: \s*([\p{Pc}\p{L}]\w*)\s*
            name: constant.other.label.so

      module-expression:
        patterns:
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(import|export|open|close|use|using)\b\s*
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.control.module.so}
            patterns:
              - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(from|to|as|all|any|show|hide|to|n?and|x?n?or|not)\b\s*
                name: keyword.control.module.so
              - match: \s*\*
                name: keyword.operator.module.all.so
              - include: "#modifier-keywords"
              - include: "#declaration-keywords"
              - include: "#type-keywords"
              - match: *entity-name
                name: variable.other.readwrite.alias.so
              - include: "#strings-unquoted"
              - include: "#strings-quoted"
              - include: "#operators"
              - include: "#punctuation"
              - include: source.yaml#flow-collection

      query-expression:
        patterns:
          - begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(from)\b\s*
            end: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.so}
            patterns:
              - include: $self
          - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b((\b(fold|scan)\b)\s*(\b(left|right)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.so
          - begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(group)\b\s*
            end: \s*\b(by)\b\s*
            captures:
              1: {name: keyword.query.so}
            patterns:
              - include: $self
          - begin: (?x)\s*\b(join)\b\s*
            end: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(in|of)\b\s*
            captures:
              1: {name: keyword.query.so}
            patterns:
              - include: $self
          - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(equals?|[io]nto)\b\s*
            name: keyword.query.so
          - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b((\b(order)\b)\s*(\b((a|de)sc)\b)?\s*(\b(by)\b)?)\b\s*
            name: keyword.query.so
          - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(select)\b\s*
            name: keyword.query.so
          - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b((\b(take|drop)\b)\s*(\b(left|right|init|head|tail|last)\b)?\s*(\b(by|while|until|with)\b)?)\b\s*
            name: keyword.query.so
          - match: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(where)\b\s*
            name: keyword.query.so

  parameter-brackets:
    begin: \s*(\()
    end: \s*(\))
    captures:
      1: {name: punctuation.definition.parameters.so}
    patterns: &function-params
      - include: "#clauses"
      - include: "#keywords"
      - match: (?i)\s*\?[\p{Pc}\p{L}]\w*\b\s*
        name: variable.parameter.optional.so
      - match: (?i)\s*\*[\p{Pc}\p{L}]\w*\b\s*
        name: variable.parameter.spread.so
      - match: (?i)\s*[&~][\p{Pc}\p{L}]\w*\b\s*
        name: variable.parameter.name.so
      - match: (?i)\s*\%[\p{Pc}\p{L}]\w*\b\s*
        name: variable.parameter.reference.so
      - match: (?i)\s*\$[\p{Pc}\p{L}]\w*\b\s*
        name: variable.parameter.other.so
      - match: (?i)\s*\b[\p{Pc}\p{L}]\w*\b\s*
        name: variable.parameter.so
      - include: "$self"

  block-entities:
    repository:
      type-square-brackets: *type-square-brackets
      type-round-brackets: *type-round-brackets
      type-curly-brackets: *type-curly-brackets

    patterns:
      - include: "#definition-keywords"
      - include: "#code-block"
      - include: "#type-keywords"
      - include: "#illegal-keywords"
      - include: "#type-square-brackets"
      - include: "#parameter-brackets"
      - include: "#round-brackets"
      - include: "#type-annotation"
      - match: \s*(?<!\*)\*(?!\*)\s*
        name: keyword.generator.asterisk.so
      - include: "#operators"
      - applyEndPatternLast: 1
        begin: \s*(:)(?:(?=::)|(?![\p{S}\p{P}&&[^,;'"`\\\p{Pc}({\[)}\]]]))
        end: (?=\O)|$
        beginCaptures:
          1: {name: punctuation.definition.annotation.so}
        patterns:
          - include: "#types"

  declarations:
    patterns:
      - include: "#function"
      - include: "#raw"
      - include: "#schema"
      - include: "#style"
      - include: "#class"
      - include: "#enum"
      - include: "#interface"
      - include: "#trait"
      - include: "#fragment"
      - include: "#module"
      - include: "#namespace"
      - include: "#object"
      - include: "#constraint"
      - include: "#project"
      - include: "#protocol"

    repository:
      class:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(class|extend)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.class.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.class.so
      constraint:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(given|constraint)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.constraint.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.constraint.so
      enum:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(enum|relation)\b\s*
        end: (?<=})|(?=\O)|$
        name: meta.enum.declaration.so
        beginCaptures:
          1: {name: storage.type.enum.so}
          2: {name: entity.name.enum.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.enum.so
      fragment:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(fragment|struct)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.fragment.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.fragment.so
      function:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(def|func?|function|proc|process|macro)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.function.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.function.so
      interface:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(interface|schema)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.interface.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.interface.so
      module:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(module|package)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.module.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.module.so
      namespace:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(namespace|lattice)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.namespace.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.namespace.so
      object:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(object|record)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.object.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.object.so
      protocol:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(protocol|member)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.protocol.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.protocol.so
      project:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(project|attribute)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.protocol.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.project.so
      raw:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(raw)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.raw.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.raw.so
      schema:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(data|query)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.schema.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.schema.so
      style:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(style|component|element)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.style.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.style.so
      trait:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(trait|friend)\b\s*
        end: (?<=})|(?=\O)|$
        beginCaptures:
          1: {name: storage.type.trait.so}
        patterns:
          - include: "#block-entities"
          - match: *entity-name
            name: entity.name.trait.so

  arguments-clause:
    begin: |
      (?x)
      (?<=(?:\#?[({\[]|:\s+|\b(?:#keywords
      (?:re)?do|equals?|[io]nto|select|where|when|case
      |(?:\b(?:fold|scan)\b)\s*(?:\b(?:left|right)\b)?\s*(?:\b(?:by|while|until|with)\b)?
      |(?:\b(?:take|drop)\b)\s*(?:\b(?:left|right|init|head|tail|last)\b)?\s*(?:\b(?:by|while|until|with)\b)?
      )\b)\s*)
      (\|)
      (?!\|)
    captures:
      1: {name: punctuation.separator.arguments.so}
    end: (?<!\|)(\|)(?!\|)
    patterns:
      - include: "#function-params"

  clauses:
    patterns:
      - include: "#arguments-clause"
      - include: "#for-clause"
      - include: "#if-clause"
      - include: "#switch-clause"
      - include: "#match-clause"
      - include: "#catch-clause"
      - include: "#with-clause"
      - include: "#thread-clause"
      - include: "#do-clause"
      - include: "#when-clause"
      - include: "#case-clause"
      - include: "#type-clause"
      - include: "#new-clause"
      - include: "#method-clause"
      - include: "#function-clause"

    repository:
      function-params:
        patterns: *function-params

      pattern-brackets:
        begin: \s*(\()
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.parameters.so}
        patterns:
          - include: "#function-params"

      method-clause:
        patterns:
          - begin: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([\p{Pc}\p{L}]\w*)\s+
              ([?:]?=)\s+
              (
              (?:(?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound|sealed)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [\p{Pc}\p{L}]\w*
              (?:(?:[?!]?\.|[?!:]:|->)
              (?:(?:[\p{Pc}\p{L}]\w*)))*
              )
              )\s*\b)*
              )\s*
              (\|)
              (?!\|)
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1: {name: entity.name.function.method.so}
              2: {name: keyword.operator.assignment.so}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.so}
            endCaptures:
              1: {name: punctuation.separator.arguments.so}
            patterns:
              - include: "#function-params"
          - comment: |
              Method def before function keyword
              x = def()
            match: |
              (?x)(?<!\.\.+)(?<=[!?~]?\.=?|[?!:]:=?|->)
              ([\p{Pc}\p{L}]\w*)\s+
              ([?:]?=)\s+
              ([\p{Pc}\p{L}]\w*)\s+
              ([?:]?=)\s+
              ((?:
              \s*(?:
              (?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound|sealed)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [\p{Pc}\p{L}]\w*
              (?:(?:[?!]?\.|[?!:]:|->)
              (?:(?:[\p{Pc}\p{L}]\w*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              def|func?|function|proc|process|macro
              )\b
              )
            captures:
              1: {name: entity.name.function.method.so}
              2: {name: keyword.operator.assignment.so}
              3: {patterns: *modifier-keywords}

      function-clause:
        patterns:
          - begin: |
              (?x)\s*
              ([\p{Pc}\p{L}]\w*)\s+
              ([?:]?=)\s+
              (
              (?:(?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound|sealed)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [\p{Pc}\p{L}]\w*
              (?:(?:[?!]?\.|[?!:]:|->)
              (?:(?:[\p{Pc}\p{L}]\w*)))*
              )
              )\s*\b)*
              )\s*
              (\|)
              (?!\|)
            end: (?<!\|)(\|)(?!\|)
            beginCaptures:
              1: {name: entity.name.function.so}
              2: {name: keyword.operator.assignment.so}
              3: {patterns: *modifier-keywords}
              4: {name: punctuation.separator.arguments.so}
            endCaptures:
              1: {name: punctuation.separator.arguments.so}
            patterns:
              - include: "#function-params"
          - comment: |
              Function def before function keyword
              x = def()
            match: |
              (?x)\s*
              ([\p{Pc}\p{L}]\w*)\s+
              ([?:]?=)\s+
              ((?:
              \s*(?:
              (?:# Access modifiers
              public|private|protected|readonly|a?sync|inline|lazy|eager|transparent|transient|partial|whole
              |lawful|rogue|early|late|unique|handle|override|abstract|volatile|static|dynamic|threadsafe|final
              # Function or method modifiers
              |[gs]etter|[dr]efer|recursive|generator|operator|(?:im)?(?:mut|pure)|local|global|native|opaque
              |(?:un)?(?:signed|safe|checked|locked|fixed|sized|bound|sealed)
              |# Function or method modifiers
              (?:pre|in|post|suf|af|trans|interface)fix|
              (?:u|bi|ter|)nary|oper
              |# Decorators
              @(?:
              [\p{Pc}\p{L}]\w*
              (?:(?:[?!]?\.|[?!:]:|->)
              (?:(?:[\p{Pc}\p{L}]\w*)))*
              )
              ))
              \s*)*)
              (?=\s*\b
              (?:
              def|func?|function|proc|process|macro
              )\b
              )
            captures:
              1: {name: entity.name.function.so}
              2: {name: keyword.operator.assignment.so}
              3: {patterns: *modifier-keywords}

      new-clause:
        applyEndPatternLast: 1
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(new)\b
        end: (?=\O)|$
        beginCaptures:
          1: {name: keyword.operator.expression.$1.so}
        patterns:
          - match: \s*([\p{Pc}\p{L}]\w*)
            name: entity.name.instance.so
          - include: "#block-entities"

      type-clause:
        patterns:
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b([ia]s|instanceof)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.operator.expression.$1.so}
            patterns:
              - include: "#types"
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(type|alias)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.other.typedef.so}
            patterns:
              - match: \s*([?:]?=)\s*
                captures:
                  1: {name: keyword.operator.assignment.so}
              - include: "#types"
          - applyEndPatternLast: 1
            begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b((?:return|give|await|yield|throw|raise)s)\b
            end: (?=\O)|$
            beginCaptures:
              1: {name: keyword.modifier.so}
            patterns:
              - include: "#types"

      case-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(case|fail|default)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        beginCaptures:
          1: {name: keyword.control.switch.so}
        patterns:
          - include: "#code-block"
          - include: $self

      catch-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(try|retry|catch|rescue|finally)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.catch.so
        beginCaptures:
          1: {name: keyword.control.error.so}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.so}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.error.so
              - include: "#code-block"
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.error.so
          - include: "#code-block"
          - include: $self

      thread-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(parallel|series|spawn|discard|fixed|lock)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.thread.so
        beginCaptures:
          1: {name: keyword.control.thread.so}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.so}
            patterns:
              - match: \s*\b(as)\b
                name: keyword.control.thread.so
              - include: "#code-block"
              - include: $self
          - match: \s*\b(as)\b
            name: keyword.control.thread.so
          - include: "#code-block"
          - include: $self

      do-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(do|redo)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.do.so
        beginCaptures:
          1: {name: keyword.control.do.so}
        patterns:
          - include: "#code-block"
          - include: $self

      for-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(for\s*(?:each)?|each|repeat\s*\b\s*(?:while|until)?|while|until|repeat)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.for.so
        beginCaptures:
          1: {name: keyword.control.loop.so}
        patterns:
          - &for-clause-keywords
            match: \s*\b(in|of|to|til|thru|at|by)\b
            name: keyword.control.loop.so
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.so}
            patterns:
              - *for-clause-keywords
              - include: "#code-block"
              - include: $self
          - include: "#code-block"
          - include: $self

      if-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(if|else\s*(?:if|unless)?|els?if|ell?ess|unless|guard)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.if.so
        beginCaptures:
          1: {name: keyword.control.conditional.so}
        patterns:
          - include: "#code-block"
          - include: $self

      match-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(match)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.match.so
        beginCaptures:
          1: {name: keyword.control.match.so}
        patterns:
          - include: "#code-block"
          - include: $self

      switch-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(switch)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.switch.so
        beginCaptures:
          1: {name: keyword.control.switch.so}
        patterns:
          - include: "#code-block"
          - include: $self

      when-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(when)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        beginCaptures:
          1: {name: keyword.control.match.so}
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.so}
            patterns:
              - include: "#type-operators"
              - include: "#code-block"
              - include: $self
          - include: "#type-operators"
          - include: "#code-block"
          - include: $self

      with-clause:
        begin: (?x)\s*(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\b(with)\b
        end: (?<=})|(?=;|(?<=\s)(?:->|(?<!(?:(?<!\.)\.|[?!:]:)=?|->)\bthen\b)|$)
        name: meta.with.so
        beginCaptures:
          1: {name: keyword.control.with.so}
        patterns:
          - &with-clause-keywords
            match: \s*\b(as)\b
            name: keyword.control.with.so
          - begin: \s*(\()
            end: \s*(\))
            captures:
              1: {name: punctuation.definition.expression.so}
            patterns:
              - *with-clause-keywords
              - include: "#code-block"
              - include: $self
          - include: "#code-block"
          - include: $self

  punctuation:
    patterns:
      - include: "#line-continuation"
      - include: "#comma"
      - include: "#right-arrow"
      - include: "#semicolon"
      - include: "#double-semi"

    repository:
      line-continuation:
        match: (\\)\s*(?=/[/*+]|$)
        captures:
          1: {name: punctuation.separator.continuation.line.so}
      comma:
        match: \s*(,)
        captures:
          1: {name: punctuation.separator.comma.so}
      right-arrow:
        match: (?:^|['"`\\({\[\s]*)(->)(?:$|['"`\\\s)}\]])
        captures:
          1: {name: punctuation.definition.arrow.so}
      double-semi:
        match: \s*(;;)
        captures:
          1: {name: punctuation.terminator.statement.so}
      semicolon:
        match: \s*(;)(?!;)
        captures:
          1: {name: punctuation.terminator.expression.so}

  brackets:
    patterns:
      - include: "#curly-brackets"
      - include: "#code-block"
      - include: "#square-brackets"
      - include: "#round-brackets"

  code-block:
    patterns:
      - begin: (\#\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.section.class.so}
        patterns:
          - include: $self
      - begin: (\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.block.so}
        patterns:
          - include: $self

  curly-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.mapping.so
          - match: (?<!\s):(?!:)
            name: punctuation.separator.key-value.so
          - match: (?<=^|[({\[])\s*([*+-](?:\s+[*+-])*)
            name: punctuation.definition.block.sequence.item.so

    patterns:
      - begin: (?<=(?::|:?=|->)\s+|[({\[]\s*|\b(?:var|let|const)\b\s*)(\#\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.mapping.so}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self
      - begin: (?<=(?::|:?=|->)\s+|[({\[]\s*|\b(?:var|let|const)\b\s*)(\{)\s*
        end: \s*(\})
        captures:
          1: {name: punctuation.definition.dictionary.so}
        patterns:
          - include: "#labels"
          - include: "#punctuation"
          - include: $self

  round-brackets:
    repository:
      punctuation:
        patterns:
          - match: ","
            name: punctuation.separator.arguments.so

    patterns:
      - begin: (\#\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.parameters.so}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\()\s*
        end: \s*(\))
        captures:
          1: {name: punctuation.definition.expression.so}
        patterns:
          - include: "#punctuation"
          - include: $self

  square-brackets:
    repository:
      punctuation:
        patterns:
          - match: (?<=\b|^|[)}\]'"`\\\s])(:)(?=\b|$|[({\['"`\\\s])
            captures:
              1: {name: punctuation.separator.slice.so}
          - match: ","
            name: punctuation.separator.sequence.so

    patterns:
      - begin: (\[<)\s*
        end: \s*(>\])
        captures:
          1: {name: punctuation.definition.typeparameters.so}
        patterns:
          - include: "#types"
          - include: $self
      - begin: (\#\[)\s*
        end: \s*(\])
        captures:
          1: {name: punctuation.definition.sequence.so}
        patterns:
          - include: "#punctuation"
          - include: $self
      - begin: (\[)\s*
        end: \s*(\])
        captures:
          1: {name: punctuation.definition.array.so}
        patterns:
          - include: "#punctuation"
          - include: $self

  support-js:
    patterns:
      - begin: \s*+\b(WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|String|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|Number|NaN|Math|Map|JSON|InternalError|Int8Array|Int32Array|Int16Array|Infinity|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.class.builtin.js}
        patterns:
          - include: "#round-brackets"
      - begin: \s*+\b((SIMD)((\.)(Uint8x16|Uint32x4|Uint16x8|Int8x16|Int32x4|Int16x8|Float64x2|Float32x4|Bool8x16|Bool64x2|Bool32x4|Bool16x8))?)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          2: {name: support.class.builtin.js}
          4: {name: keyword.operator.accessor.js}
          5: {name: support.class.builtin.js}
        patterns:
          - include: "#round-brackets"
      - begin: \s*+\b((Intl)((\.)(NumberFormat|DateTimeFormat|Collator))?)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          2: {name: support.class.builtin.js}
          4: {name: keyword.operator.accessor.js}
          5: {name: support.class.builtin.js}
        patterns:
          - include: "#round-brackets"
      - begin: (?<!\.)\s*+\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.function.js}
        patterns:
          - include: "#round-brackets"
      - begin: (?<=\.)\s*+(shift|sort|splice|unshift|pop|push|reverse)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.function.mutator.js}
        patterns:
          - include: "#round-brackets"
      - begin: (?<!\.)\s*+\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.class.error.js}
        patterns:
          - include: "#round-brackets"
      - match: (?<!\.)\s*+\b(debugger)\b
        captures:
          1: {name: keyword.other.js}
      - match: (?<!\.)\s*+\b(document|window)\b
        captures:
          1: {name: support.type.object.dom.js}
      - match: \s*+\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b
        captures:
          1: {name: support.constant.dom.js}
      - begin: (?<!\.)\s*+\b(Console)(?:(\.)(warn|info|log|error|time|timeEnd|assert))?\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.type.object.console.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.function.console.js}
        patterns:
          - include: "#round-brackets"
      - match: (?<!\.)\s*+\b(Process)(?:(\.)(stdout|stderr|stdin|argv|execPath|execArgv|env|exitCode|version|versions|config|pid|title|arch|platform|mainModule))?\b
        captures:
          1: {name: support.type.object.process.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.type.object.process.js}
      - begin: (?<!\.)\s*+\b(Process)(?:(\.)(abort|chdir|cwd|exit|getgid|setgid|getuid|setuid|setgroups|getgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.type.object.process.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.function.process.js}
        patterns:
          - include: "#round-brackets"
      - match: (((?<!\.)\s*+\bModule\.((?<!\,)exports|id|require|parent|filename|loaded|children)|exports))\b
        captures:
          1: {name: support.type.object.module.js}
          2: {name: keyword.operator.accessor.js}
          3: {name: support.type.object.module.js}
      - match: (?<!\.)\s*+\b(global|GLOBAL|root|__dirname|__filename)\b
        captures:
          1: {name: support.type.object.node.js}
      - begin: \s*+\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b
        end: (?=.)
        applyEndPatternLast: 1
        beginCaptures:
          1: {name: support.class.node.js}
        patterns:
          - include: "#round-brackets"

  named-chars-database:
    patterns:
      - comment: Yes this is a bit ridiculous, there are quite a lot of these
        name: constant.character.html.so
        match: (?x)\b(A(Elig|MP|acute|breve|c(irc|y)|fr|grave|lpha|macr|nd|o(gon|pf)|pplyFunction|ring|s(cr|sign)|tilde|uml)|B(a(ckslash|r(wed|v))|cy|e(cause|rnoullis|ta)|fr|opf|reve|scr|umpeq)|C(Hcy|OPY|a(cute|p(italDifferentialD)?|yleys)|c(aron|edil|irc|onint)|dot|e(dilla|nterDot)|fr|hi|ircle(Dot|Minus|Plus|Times)|lo(ckwiseContourIntegral|seCurly(DoubleQuote|Quote))|o(lone?|n(gruent|int|tourIntegral)|p(roduct|f)|unterClockwiseContourIntegral)|ross|scr|up(Cap)?)|D(D(otrahd)?|Jcy|Scy|Zcy|a(gger|rr|shv)|c(aron|y)|el(ta)?|fr|i(a(critical(Acute|Do(ubleAcute|t)|Grave|Tilde)|mond)|fferentialD)|o(pf|t((Dot|Equal))?|uble(ContourIntegral|Do(wnArrow|t)|L(eft(Arrow|RightArrow|Tee)|ong(Left(Arrow|RightArrow)|RightArrow))|Right(Arrow|Tee)|Up(Arrow|DownArrow)|VerticalBar)|wn(Arrow((Bar|UpArrow))?|Breve|Left(RightVector|TeeVector|Vector(Bar)?)|Right(TeeVector|Vector(Bar)?)|Tee(Arrow)?|arrow))|s(cr|trok))|E(NG|TH|acute|c(aron|irc|y)|dot|fr|grave|lement|m(acr|pty(SmallSquare|VerySmallSquare))|o(gon|pf)|psilon|qu(al(Tilde)?|ilibrium)|s(cr|im)|ta|uml|x(ists|ponentialE))|F(cy|fr|illed(SmallSquare|VerySmallSquare)|o(pf|rAll|uriertrf)|scr)|G(Jcy|ammad?|breve|c(edil|irc|y)|dot|fr|opf|reater(Equal(Less)?|FullEqual|Greater|Less|SlantEqual|Tilde)|scr|[Tgt])|H(ARDcy|a(cek|t)|circ|fr|ilbertSpace|o(pf|rizontalLine)|s(cr|trok)|ump(DownHump|Equal))|I(Ecy|Jlig|Ocy|acute|c(irc|y)|dot|fr|grave|m((a(cr|ginaryI)|plies))?|n(t(e(gral|rsection))?|visible(Comma|Times))|o(gon|pf|ta)|scr|tilde|u(kcy|ml))|J(c(irc|y)|fr|opf|s(cr|ercy)|ukcy)|K(Hcy|Jcy|appa|c(edil|y)|fr|opf|scr)|L(Jcy|a(cute|mbda|ng|placetrf|rr)|c(aron|edil|y)|e(ft(A(ngleBracket|rrow((Bar|RightArrow))?)|Ceiling|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Floor|Right(Arrow|Vector)|T(ee((Arrow|Vector))?|riangle((Bar|Equal))?)|Up(DownVector|TeeVector|Vector(Bar)?)|Vector(Bar)?|arrow|rightarrow)|ss(EqualGreater|FullEqual|Greater|Less|SlantEqual|Tilde))|fr|l(eftarrow)?|midot|o(ng(Left(Arrow|RightArrow)|RightArrow|left(arrow|rightarrow)|rightarrow)|pf|wer(LeftArrow|RightArrow))|s(cr|trok|h)|[Tt])|M(ap|cy|e(diumSpace|llintrf)|fr|inusPlus|opf|scr|u)|N(Jcy|acute|c(aron|edil|y)|e(gative(MediumSpace|Thi(ckSpace|nSpace)|VeryThinSpace)|sted(GreaterGreater|LessLess)|wLine)|fr|o(Break|nBreakingSpace|pf|t((C(ongruent|upCap)|DoubleVerticalBar|E(lement|qual(Tilde)?|xists)|Greater((Equal|FullEqual|Greater|Less|SlantEqual|Tilde))?|Hump(DownHump|Equal)|Le(ftTriangle((Bar|Equal))?|ss((Equal|Greater|Less|SlantEqual|Tilde))?)|Nested(GreaterGreater|LessLess)|Precedes((Equal|SlantEqual))?|R(everseElement|ightTriangle((Bar|Equal))?)|S(quareSu(bset(Equal)?|perset(Equal)?)|u(bset(Equal)?|cceeds((Equal|SlantEqual|Tilde))?|perset(Equal)?))|Tilde((Equal|FullEqual|Tilde))?|VerticalBar))?)|scr|tilde|u)|O(Elig|acute|c(irc|y)|dblac|fr|grave|m(acr|ega|icron)|opf|penCurly(DoubleQuote|Quote)|s(cr|lash)|ti(lde|mes)|uml|ver(B(ar|rac(ket|e))|Parenthesis)|r)|P(artialD|cy|fr|hi|lusMinus|o(incareplane|pf)|r((ecedes((Equal|SlantEqual|Tilde))?|ime|o(duct|portion(al)?)))?|s(cr|i)|i)|Q(UOT|fr|opf|scr)|R(Barr|EG|a(cute|ng|rr(tl)?)|c(aron|edil|y)|e(verse(E(lement|quilibrium)|UpEquilibrium))?|fr|ho|ight(A(ngleBracket|rrow((Bar|LeftArrow))?)|Ceiling|Do(ubleBracket|wn(TeeVector|Vector(Bar)?))|Floor|T(ee((Arrow|Vector))?|riangle((Bar|Equal))?)|Up(DownVector|TeeVector|Vector(Bar)?)|Vector(Bar)?|arrow)|o(pf|undImplies)|rightarrow|s(cr|h)|uleDelayed)|S(H(CHcy|cy)|OFTcy|acute|c((aron|edil|irc|y))?|fr|hort(DownArrow|LeftArrow|RightArrow|UpArrow)|igma|mallCircle|opf|q(rt|uare((Intersection|Su(bset(Equal)?|perset(Equal)?)|Union))?)|scr|tar|u(b(set(Equal)?)?|c(ceeds((Equal|SlantEqual|Tilde))?|hThat)|p((erset(Equal)?|set))?|m))|T(HORN|RADE|S(Hcy|cy)|a[bu]|c(aron|edil|y)|fr|h(e(refore|ta)|i(ckSpace|nSpace))|ilde((Equal|FullEqual|Tilde))?|opf|ripleDot|s(cr|trok))|U(a(cute|rr(ocir)?)|br(cy|eve)|c(irc|y)|dblac|fr|grave|macr|n(der(B(ar|rac(ket|e))|Parenthesis)|ion(Plus)?)|o(gon|pf)|p(Arrow((Bar|DownArrow))?|DownArrow|Equilibrium|Tee(Arrow)?|arrow|downarrow|per(LeftArrow|RightArrow)|si(lon)?)|ring|scr|tilde|uml)|V(Dash|bar|cy|dashl?|e(r(bar|t(ical(Bar|Line|Separator|Tilde))?|yThinSpace)|e)|fr|opf|scr|vdash)|W(circ|edge|fr|opf|scr)|X(fr|opf|scr|i)|Y(Acy|Icy|Ucy|acute|c(irc|y)|fr|opf|scr|uml)|Z(Hcy|acute|c(aron|y)|dot|e(roWidthSpace|ta)|fr|opf|scr)|a(acute|breve|c((irc|ute|[Edy]))?|elig|fr?|grave|l(e(fsym|ph)|pha)|m(a(cr|lg)|p)|n(d((and|slope|[dv]))?|g((le|msd(a[a-h])?|rt(vbd?)?|s(ph|t)|zarr|e))?)|o(gon|pf)|p((acir|id|os|prox(eq)?|[Ee]))?|ring|s(cr|ymp(eq)?|t)|tilde|uml|w(conint|int))|b(Not|a(ck(cong|epsilon|prime|sim(eq)?)|r(vee|wed(ge)?))|brk(tbrk)?|c(ong|y)|dquo|e(cause?|mptyv|psi|rnou|t(ween|[ah]))|fr|ig(c(ap|irc|up)|o(dot|plus|times)|s(qcup|tar)|triangle(down|up)|uplus|vee|wedge)|karow|l(a(ck(lozenge|square|triangle((down|left|right))?)|nk)|k(1[24]|34)|ock)|n(e(quiv)?|ot)|o(pf|t(tom)?|wtie|x(D[LRlr]|H[DUdu]?|U[LRlr]|V[HLRhlr]?|box|d[LRlr]|h[DUdu]?|minus|plus|times|u[LRlr]|v[HLRhlr]?))|prime|r(eve|vbar)|s(cr|emi|ime?|ol((hsub|b))?)|u(ll(et)?|mp((eq?|E))?))|c(a(cute|p((and|brcup|c(ap|up)|dot|s))?|r(et|on))|c(a(ps|ron)|edil|irc|ups(sm)?)|dot|e(dil|mptyv|nt(erdot)?)|fr|h(cy|eck(mark)?|i)|ir((c((eq|le(arrow(left|right)|d(ast|circ|dash|[RS]))))?|fnint|mid|scir|[Ee]))?|lubs(uit)?|o(lon(eq?)?|m(mat?|p((fn|le(ment|xes)))?)|n(g(dot)?|int)|p(rod|y(sr)?|f))|r(arr|oss)|s(cr|u(be?|pe?))|tdot|u(darr[lr]|e(pr|sc)|larrp?|p((brcap|c(ap|up)|dot|or|s))?|r(arrm?|ly(eq(prec|succ)|vee|wedge)|ren|vearrow(left|right))|vee|wed)|w(conint|int)|ylcty)|d(Arr|Har|a(gger|leth|rr|shv?)|b(karow|lac)|c(aron|y)|d((a(gger|rr)|otseq))?|e(lta|mptyv|g)|f(isht|r)|har[lr]|i(am((ond(suit)?|s))?|gamma|sin|v((ide(ontimes)?|onx))?|e)|jcy|lc(orn|rop)|o(llar|pf|t((eq(dot)?|minus|plus|square))?|ublebarwedge|wn(arrow|downarrows|harpoon(left|right)))|r(bkarow|c(orn|rop))|s(c[ry]|ol|trok)|t(dot|rif?)|u(arr|har)|wangle|z(cy|igrarr))|e(D(Dot|ot)|a(cute|ster)|c(aron|irc?|olon|y)|dot|f(Dot|r)|g((rave|s(dot)?))?|l((inters|s(dot)?|l))?|m(acr|pty((set|v))?|sp(1[34])?)|n(sp|g)|o(gon|pf)|p(ar(sl)?|lus|si((lon|v))?)|q(c(irc|olon)|s(im|lant(gtr|less))|u(als|est|iv(DD)?)|vparsl)|r(Dot|arr)|s(cr|dot|im)|t[ah]|u(ml|ro)|x(cl|ist|p(ectation|onentiale))|e)|f(allingdotseq|cy|emale|f(ilig|l(ig|lig)|r)|ilig|jlig|l(at|lig|tns)|nof|o(pf|r(all|kv?))|partint|r(a(c(1[2-68]|2[35]|3[458]|45|5[68]|78)|sl)|own)|scr)|g(El?|a(cute|mmad?|p)|breve|c(irc|y)|dot|e((q((slant|q))?|s((cc|dot(ol?)?|l(es)?))?|l))?|fr|gg?|imel|jcy|l[Eaj]?|n(ap(prox)?|e(qq?)?|sim|E)|opf|rave|s(cr|im[el]?)|t((c(ir|c)|dot|lPar|quest|r(a(pprox|rr)|dot|eq(less|qless)|less|sim)))?|v(ertneqq|nE))|h(Arr|a(irsp|lf|milt|r(dcy|r((cir|w))?))|bar|circ|e(arts(uit)?|llip|rcon)|fr|ks(earow|warow)|o(arr|mtht|ok(leftarrow|rightarrow)|pf|rbar)|s(cr|lash|trok)|y(bull|phen))|i(acute|c((irc|y))?|e(cy|xcl)|f[fr]|grave|i((i(int|nt)|nfin|ota))?|jlig|m(a(cr|g(line|part|e)|th)|of|ped)|n((care|fin(tie)?|odot|t((cal|e(gers|rcal)|larhk|prod))?))?|o(cy|gon|pf|ta)|prod|quest|s(cr|in((dot|sv?|[Ev]))?)|t(ilde)?|u(kcy|ml))|j(c(irc|y)|fr|math|opf|s(cr|ercy)|ukcy)|k(appav?|c(edil|y)|fr|green|hcy|jcy|opf|scr)|l(A(arr|rr|tail)|Barr|Eg?|Har|a(cute|emptyv|gran|mbda|ng((le|d))?|quo|rr((b(fs)?|fs|hk|lp|pl|sim|tl))?|t((ail|es?))?|p)|b(arr|brk|r(ac[ek]|k(sl[du]|e)))|c(aron|e(dil|il)|ub|y)|d(ca|quor?|r(dhar|ushar)|sh)|e((ft(arrow(tail)?|harpoon(down|up)|leftarrows|right(arrows?|harpoons|squigarrow)|threetimes)|q((slant|q))?|s((cc|dot(or?)?|g(es)?|s(approx|dot|eq(gtr|qgtr)|gtr|sim)))?|g))?|f(isht|loor|r)|gE?|h(ar(ul?|d)|blk)|jcy|l((arr|corner|hard|tri))?|m(idot|oust(ache)?)|n(ap(prox)?|e(qq?)?|sim|E)|o(a(ng|rr)|brk|ng(left(arrow|rightarrow)|mapsto|rightarrow)|oparrow(left|right)|p(ar|lus|f)|times|w(ast|bar)|z((enge|f))?)|par(lt)?|r(arr|corner|hard?|tri|m)|s(aquo|cr|im[eg]?|q(uor?|b)|trok|h)|t((c(ir|c)|dot|hree|imes|larr|quest|r(Par|i[ef]?)))?|ur(dshar|uhar)|v(ertneqq|nE))|m(DDot|a(cr|l(t(ese)?|e)|p(sto((down|left|up))?)?|rker)|c(omma|y)|dash|easuredangle|fr|ho|i(cro|d((ast|cir|dot))?|nus((du?|b))?)|l(cp|dr)|nplus|o(dels|pf)|s(cr|tpos)|u((ltimap|map))?|p)|n(G(tv?|g)|L(eft(arrow|rightarrow)|tv?|l)|Rightarrow|V(Dash|dash)|a(bla|cute|ng|p((id|os|prox|E))?|tur(als?)?)|b(sp|umpe?)|c(a(ron|p)|edil|ong(dot)?|up|y)|dash|e((Arr|ar(hk|r(ow)?)|dot|quiv|s(ear|im)|xists?))?|fr|g(e((q((slant|q))?|s))?|sim|tr?|E)|h(Arr|arr|par)|i((sd?|v))?|jcy|l(Arr|arr|dr|e((ft(arrow|rightarrow)|q((slant|q))?|ss?))?|sim|t(rie?)?|E)|mid|o(pf|t((in((dot|v[a-c]|E))?|ni(v[a-c])?))?)|p(ar((allel|sl|t))?|olint|r((cue|e(c(eq)?)?))?)|r(Arr|arr[cw]?|ightarrow|trie?)|s(c((cue|[er]))?|hort(mid|parallel)|im(eq?)?|mid|par|qsu(be|pe)|u(b((set(eqq?)?|[Ee]))?|cc(eq)?|p((set(eqq?)?|[Ee]))?))|t(gl|ilde|lg|riangle(left(eq)?|right(eq)?))|u(m((ero|sp))?)?|v(Dash|Harr|ap|dash|g[et]|infin|l(Arr|t(rie)?|e)|r(Arr|trie)|sim)|w(Arr|ar(hk|r(ow)?)|near))|o(a(cute|st)|c(irc?|y)|d(ash|blac|iv|ot|sold)|elig|f(cir|r)|g(on|rave|t)|h(bar|m)|int|l(arr|c(ir|ross)|ine|t)|m(acr|ega|i(cron|nus|d))|opf|p(ar|erp|lus)|r((arr|d((er(of)?|[fm]))?|igof|or|slope|v))?|s(cr|lash|ol)|ti(lde|mes(as)?)|uml|vbar|S)|p(ar((a(llel)?|s(im|l)|t))?|cy|er(cnt|iod|mil|tenk|p)|fr|h(iv?|mmat|one)|i((tchfork|v))?|l(an(ckh?|kv)|us((acir|cir|d[ou]|mn|sim|two|[be]))?)|o(intint|pf|und)|r((ap|cue|e(c((approx|curlyeq|eq|n(approx|eqq|sim)|sim))?)?|imes?|n(ap|sim|E)|o(f(alar|line|surf)|p(to)?|d)|sim|urel|E))?|s(cr|i)|uncsp|m)|q(fr|int|opf|prime|scr|u(at(ernions|int)|est(eq)?|ot))|r(A(arr|rr|tail)|Barr|Har|a(c(ute|e)|dic|emptyv|ng((le|[de]))?|quo|rr((ap|b(fs)?|fs|hk|lp|pl|sim|tl|[cw]))?|t(ail|io(nals)?))|b(arr|brk|r(ac[ek]|k(sl[du]|e)))|c(aron|e(dil|il)|ub|y)|d(ca|ldhar|quor?|sh)|e(al((ine|part|s))?|ct|g)|f(isht|loor|r)|h(ar(ul?|d)|ov?)|i(ght(arrow(tail)?|harpoon(down|up)|left(arrows|harpoons)|rightarrows|squigarrow|threetimes)|ng|singdotseq)|l(arr|har|m)|moust(ache)?|nmid|o(a(ng|rr)|brk|p(ar|lus|f)|times)|p(ar(gt)?|polint)|rarr|s(aquo|cr|q(uor?|b)|h)|t(hree|imes|ri((ltri|[ef]))?)|uluhar|x)|s(acute|bquo|c((a(ron|p)|cue|e(dil)?|irc|n(ap|sim|E)|polint|sim|[Ey]))?|dot[be]?|e(Arr|ar(hk|r(ow)?)|ct|mi|swar|tm(inus|n)|xt)|fr(own)?|h(arp|c(hcy|y)|ort(mid|parallel)|y)|i(gma[fv]?|m((dot|eq?|gE?|lE?|ne|plus|rarr))?)|larr|m(a(llsetminus|shp)|eparsl|i(le|d)|t(es?)?)|o(ftcy|l(b(ar)?)?|pf)|pa(des(uit)?|r)|q(c(aps?|ups?)|su(b((set(eq)?|e))?|p((set(eq)?|e))?)|u((ar[ef]|f))?)|rarr|s(cr|etmn|mile|tarf)|t(arf?|r(aight(epsilon|phi)|ns))|u(b((dot|e(dot)?|mult|n[Ee]|plus|rarr|s(et((eqq?|neqq?))?|im|u[bp])|E))?|cc((approx|curlyeq|eq|n(approx|eqq|sim)|sim))?|ng|p((d(ot|sub)|e(dot)?|hs(ol|ub)|larr|mult|n[Ee]|plus|s(et((eqq?|neqq?))?|im|u[bp])|[1-3E]))?|m)|w(Arr|ar(hk|r(ow)?)|nwar)|zlig)|t(a(rget|u)|brk|c(aron|edil|y)|dot|elrec|fr|h(e(re(fore|4)|ta((sym|v))?)|i(ck(approx|sim)|nsp)|k(ap|sim)|orn)|i(lde|mes((b(ar)?|d))?|nt)|o(ea|p((bot|cir|f(ork)?))?|sa)|prime|r(ade|i(angle((down|left(eq)?|right(eq)?|q))?|dot|minus|plus|sb|time|e)|pezium)|s(c[ry]|hcy|trok)|w(ixt|ohead(leftarrow|rightarrow)))|u(Arr|Har|a(cute|rr)|br(cy|eve)|c(irc|y)|d(arr|blac|har)|f(isht|r)|grave|h(ar[lr]|blk)|l(c(orn(er)?|rop)|tri)|m(acr|l)|o(gon|pf)|p(arrow|downarrow|harpoon(left|right)|lus|si((lon|h))?|uparrows)|r(c(orn(er)?|rop)|ing|tri)|scr|t(dot|ilde|rif?)|u(arr|ml)|wangle)|v(Arr|Barv?|Dash|a(ngrt|r(epsilon|kappa|nothing|p(hi|ropto|i)|r(ho)?|s(igma|u(bsetneqq?|psetneqq?))|t(heta|riangle(left|right))))|cy|dash|e(e((bar|eq))?|llip|r(bar|t))|fr|ltri|nsu[bp]|opf|prop|rtri|s(cr|u(bn[Ee]|pn[Ee]))|zigzag)|w(circ|e(d(bar|geq?)|ierp)|fr|opf|r(eath)?|scr|p)|x(c(ap|irc|up)|dtri|fr|h(Arr|arr)|l(Arr|arr)|map|nis|o(dot|p(lus|f)|time)|r(Arr|arr)|s(cr|qcup)|u(plus|tri)|vee|wedge|i)|y(ac(ute|y)|c(irc|y)|en|fr|icy|opf|scr|u(cy|ml))|z(acute|c(aron|y)|dot|e(etrf|ta)|fr|hcy|igrarr|opf|scr|w(nj|j)))\b
      - comment: Yes this is a bit ridiculous, there are quite a lot of these
        match: (?x)\b(A((E(acute)?|acute|breve|circumflex|dieresis|grave|lpha(tonos)?|macron|ogonek|ring(acute)?|tilde))?|B(eta)?|C((acute|c(aron|edilla|ircumflex)|dotaccent|hi))?|D((c(aron|roat)|elta))?|E((acute|breve|c(aron|ircumflex)|d(ieresis|otaccent)|grave|macron|ng|ogonek|psilon(tonos)?|t(a(tonos)?|h)|uro))?|G((amma|breve|c(aron|ircumflex)|dotaccent))?|H((185(33|43|51)|22073|bar|circumflex))?|I((acute|breve|circumflex|d(ieresis|otaccent)|fraktur|grave|macron|o(gonek|ta((dieresis|tonos))?)|tilde|J))?|J(circumflex)?|K(appa)?|L((a(cute|mbda)|caron|dot|slash))?|Mu?|N((acute|caron|tilde|u))?|O((acute|breve|circumflex|dieresis|grave|h(orn|ungarumlaut)|m(acron|ega(tonos)?|icron(tonos)?)|slash(acute)?|tilde|E))?|P((hi|si|i))?|R((acute|caron|fraktur|ho))?|S((F(0(10000|20000|30000|40000|50000|60000|70000|80000|90000)|1(00000|10000|90000)|2(00000|10000|20000|30000|40000|50000|60000|70000|80000)|3(60000|70000|80000|90000)|4(00000|10000|20000|30000|40000|50000|60000|70000|80000|90000)|5(00000|10000|20000|30000|40000))|acute|c(aron|edilla|ircumflex)|igma))?|T((au|bar|caron|h(eta|orn)))?|U((acute|breve|circumflex|dieresis|grave|h(orn|ungarumlaut)|macron|ogonek|psilon((dieresis|tonos|1))?|ring|tilde))?|W((acute|circumflex|dieresis|grave))?|Xi?|Y((acute|circumflex|dieresis|grave))?|Z((acute|caron|dotaccent|eta))?|a((acute|breve|c(ircumflex|ute(comb)?)|dieresis|e(acute)?|grave|l(eph|pha(tonos)?)|m(acron|persand)|n(gle((left|right))?|oteleia)|ogonek|pproxequal|r(ing(acute)?|row(both|d(bl(both|down|left|right|up)|own)|left|right|up(dn(bse)?)?))|s(cii(circum|tilde)|terisk(math)?)|t(ilde)?))?|b((a(ckslash|r)|eta|lock|r(ac(e(left|right)|ket(left|right))|eve|okenbar)|ullet))?|c((a(cute|r(on|riagereturn))|c(aron|edilla|ircumflex)|dotaccent|e(dilla|nt)|hi|irc(le((multiply|plus))?|umflex)|lub|o(lon(monetary)?|mma|ngruent|pyright)|urrency))?|d((agger(dbl)?|c(aron|roat)|e(gree|lta)|i(amond|eresis(tonos)?|vide)|kshade|nblock|o(llar|ng|t(accent|belowcomb|lessi|math))))?|e((acute|breve|c(aron|ircumflex)|d(ieresis|otaccent)|grave|ight|l(ement|lipsis)|m(acron|dash|ptyset)|n(dash|g)|ogonek|psilon(tonos)?|qu(al|ivalence)|stimated|t(a(tonos)?|h)|x(clam(d(bl|own))?|istential)))?|f((emale|i(guredash|lled(box|rect)|ve(eighths)?)|lorin|our|ra(ction|nc)))?|g((amma|breve|c(aron|ircumflex)|dotaccent|ermandbls|r(a(dient|ve(comb)?)|eater(equal)?)|uil(lemot(left|right)|singl(left|right))))?|h((bar|circumflex|eart|o(okabovecomb|use)|ungarumlaut|yphen))?|i((acute|breve|circumflex|dieresis|grave|macron|n(finity|te(gral((bt|tp))?|rsection)|v(bullet|circle|smileface))|o(gonek|ta((dieresis(tonos)?|tonos))?)|tilde|j))?|j(circumflex)?|k((appa|greenlandic))?|l((a(cute|mbda)|caron|dot|ess(equal)?|fblock|ira|o(gical(and|not|or)|ngs|zenge)|slash|tshade))?|m((a(cron|le)|inu(te|s)|u((ltiply|sicalnote(dbl)?))?))?|n((a(cute|postrophe)|caron|ine|ot(e(lement|qual)|subset)|tilde|u(mbersign)?))?|o((acute|breve|circumflex|dieresis|g(onek|rave)|h(orn|ungarumlaut)|m(acron|ega((tonos|1))?|icron(tonos)?)|ne((dotenleader|eighth|half|quarter|third))?|penbullet|r(d(feminine|masculine)|thogonal)|slash(acute)?|tilde|e))?|p((ar(agraph|en(left|right)|tialdiff)|e(r(cent|iod(centered)?|pendicular|thousand)|seta)|hi1?|lus(minus)?|r(escription|o(duct|p(ersu(bset|perset)|ortional)))|si|i))?|q(u(estion(down)?|ote(dbl((base|left|right))?|left|r(eversed|ight)|singl(base|e))))?|r((a(cute|dical)|caron|e(flexsu(bset|perset)|gistered|vlogicalnot)|ho|ing|tblock))?|s((acute|c(aron|edilla|ircumflex)|e(c(ond|tion)|micolon|ven(eighths)?)|hade|i(gma1?|milar|x)|lash|mileface|pa(ce|de)|terling|u(chthat|mmation|n)))?|t((au|bar|caron|h(e(refore|ta1?)|orn|ree((eighths|quarters))?)|ilde(comb)?|onos|r(ademark|iag(dn|lf|rt|up))|wo((dotenleader|thirds))?))?|u((acute|breve|circumflex|dieresis|grave|h(orn|ungarumlaut)|macron|n(derscore(dbl)?|i(on|versal))|ogonek|p(block|silon((dieresis(tonos)?|tonos))?)|ring|tilde))?|w((acute|circumflex|dieresis|eierstrass|grave))?|xi?|y((acute|circumflex|dieresis|en|grave))?|z((acute|caron|dotaccent|e(ro|ta)))?|[FQVv])\b
        name: constant.character.aglfn.so
